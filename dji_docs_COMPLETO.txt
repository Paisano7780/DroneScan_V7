üìö DOCUMENTACI√ìN COMPLETA DJI SDK v4 ANDROID API
================================================================================

üïê Generado: 2025-08-29T01:20:31.846219
üìä Total p√°ginas: 11
üîß Total m√©todos: 1467


================================================================================
P√ÅGINA 1: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/SDKManager/DJISDKManager.html
M√©todos encontrados: 59
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class DJISDKManager
class DJISDKManager
Package:dji.sdk.sdkmanager
Description:
This class is the entry point for using the SDK with a DJI product. Most importantly, this class is used to register the SDK, and to connect to and access the product. This class also provides access to important feature managers (such as getKeyManager), debugging tools, and threading control of asynchronous callbacks. SDK Registration using registerApp must be successful before the SDK can be used with a DJI product.
Class Members:
SDK Admin
SDK InformationmethodgetSDKVersion
method getSDKVersion
String getSDKVersion()
Package:dji.sdk.sdkmanager
Description:
Gets the DJI Mobile SDK Version. Returns SDK version as a string.
Return:
StringA SDK version String instance.
App RegistrationmethodregisterApp
method registerApp
void registerApp(final Context inContext, SDKManagerCallback callback)
Package:dji.sdk.sdkmanager
Description:
The first time the app is initialized after installation, the app connects to a DJI Server through the internet to verify the Application Key. The request will include the following information:  - App key  - Bundle ID  - Device UUID generated from hashed mobile device ID (getDeviceID), hashed SIM serial number (getSIMSerialNumber) and hashed ANDROID ID (Secure.ANDROID_ID). If READ_PHONE_STATE permission is not permitted, a random UUID is generated.  - System platform, version and name  - UUID generated by platform's API ([UIDevice)  - Mobile device model  - Internet related feature initialisation. Subsequent app starts will use locally cached verification information to register the app when the cached information is still valid.
Input Parameters:
SOURCE_DIFFERENT contextAndroid context.SDKManagerCallback callbackCallback used for both the registration result, and when the products changes.
methodregisterAppForLDM
method registerAppForLDM
void registerAppForLDM(final Context inContext, SDKManagerCallback callback)
Package:dji.sdk.sdkmanager
Description:
Designed for LDM feature LDMManager. The first time the app is initialized after installation, the app connects to a DJI Server through the internet to verify the Application Key. The request will include the following information:  - App key  - Bundle ID  - Device UUID generated from hashed mobile device ID (getDeviceID), hashed SIM serial number (getSIMSerialNumber) and hashed ANDROID ID (Secure.ANDROID_ID). If READ_PHONE_STATE permission is not permitted, a random UUID is generated.  - System platform, version and name  - UUID generated by platform's API ([UIDevice)  - Mobile device model  - Internet related feature initialisation (not included) After successfully registered, the app will enter LDM mode. Subsequent app starts will use locally cached verification information to register the app when the cached information is still valid.
Input Parameters:
SOURCE_DIFFERENT contextAndroid context.SDKManagerCallback callbackCallback used for both the registration result, and when the products changes.
methodhasSDKRegistered
method hasSDKRegistered
@Deprecated boolean hasSDKRegistered()
Package:dji.sdk.sdkmanager
Description:
Registration state.
Return:
booleantrue if SDK is registered.
USB Accessory Attached USB_ACCESSORY_ATTACHED
final USB_ACCESSORY_ATTACHED
static final String USB_ACCESSORY_ATTACHED = SDKRelativeJNI.native_getUsbAccessoryAttachedString()
Package:dji.sdk.sdkmanager
Description:
When this string is received in a broadcast, the SDK will attempt to connect to USB accessory.
SDK ManagermethodgetInstance
method getInstance
synchronized static DJISDKManager getInstance()
Package:dji.sdk.sdkmanager
Description:
Accessor for DJISDKManager object.
Return:
synchronized static DJISDKManagerAn instance of DJISDKManager object.
ThreadingmethodsetCallbackRunInUIThread
method setCallbackRunInUIThread
void setCallbackRunInUIThread(boolean enable)
Package:dji.sdk.sdkmanager
Description:
Determines whether asynchronous getter and setter method callbacks should be invoked in UIThread or BackgroundThread. This method is only for setters and getters, as push data callbacks (typically state data) always return in the BackgroundThread.
Input Parameters:
boolean enableA boolean value.
AOA ConnectionmethodcloseAOAConnection
method closeAOAConnection
void closeAOAConnection()
Package:dji.sdk.sdkmanager
Description:
This method is used to close the AOA connection during development and should not be used in the final application. When using AS or Eclipse to build and run the application, the AOA connection is not properly closed if the application is terminated. As a result, the next time the application is run, the SDK will not be able to connect to the product without first disconnecting and reconnecting the USB cable. AS and Eclipse can be configured to invoke this method before compiling the application, closing the link before the application is run, and overcoming this problem.
App Activation ManagermethodgetAppActivationManager
method getAppActivationManager
AppActivationManager getAppActivationManager()
Package:dji.sdk.sdkmanager
Description:
Used to check the states related to the App Activation.
Return:
AppActivationManagerAn instance of AppActivationManager.
RTK Network Service ProvidermethodgetRTKNetworkServiceProvider
method getRTKNetworkServiceProvider
RTKNetworkServiceProvider getRTKNetworkServiceProvider()
Package:dji.sdk.sdkmanager
Description:
Accesses the RTK network service provider.
Return:
RTKNetworkServiceProviderAn instance of RTKNetworkServiceProvider.
Component UpgrademethodgetUpgradeManager
method getUpgradeManager
UpgradeManager getUpgradeManager()
Package:dji.sdk.sdkmanager
Description:
Provide access to UpgradeManager used to manage components upgrade.
Return:
UpgradeManagerAn instance of UpgradeManager.
UAS Remote IDmethodgetUasRemoteIDManager
method getUasRemoteIDManager
UASRemoteIDManager getUasRemoteIDManager()
Package:dji.sdk.sdkmanager
Description:
Provide access to UASRemoteIDManager used to manage UA SRemote ID.
Return:
UASRemoteIDManagerAn instance of DJIUASRemoteIDManager.
Product Connection
ProductmethodgetProduct
method getProduct
BaseProduct getProduct()
Package:dji.sdk.sdkmanager
Description:
The DJI product which is connected to the mobile device, only available after successful registration of the app.
Return:
BaseProductAn instance of BaseProduct.
BluetoothmethodgetBluetoothProductConnector
method getBluetoothProductConnector
BluetoothProductConnector getBluetoothProductConnector()
Package:dji.sdk.sdkmanager
Description:
Used to establish the Bluetooth connection between the mobile device and the DJI product. The Bluetooth connection needs to be established before a connection between the SDK and the DJI product can be made using startConnectionToProduct.
Return:
BluetoothProductConnectorA BluetoothProductConnector instance.
methodsetSupportOnlyForBluetoothDevice
method setSupportOnlyForBluetoothDevice
void setSupportOnlyForBluetoothDevice(boolean isBluetoothDevice)
Package:dji.sdk.sdkmanager
Description:
If only Bluetooth devices will be connected, then this should be set to true.
Input Parameters:
boolean isBluetoothDevicetrue if only Bluetooth devices will be connected.
ConnectionmethodstartConnectionToProduct
method startConnectionToProduct
boolean startConnectionToProduct()
Package:dji.sdk.sdkmanager
Description:
Starts a connection between the SDK and the DJI product. This method should be called after successful registration of the app and once there is a data connection between the mobile device and DJI product. This data connection is either a USB cable connection, a WiFi connection (that needs to be established outside of the SDK) or a Bluetooth connection (that needs to be established with getBluetoothProductConnector). If the connection succeeds, onProductConnect will be called if the connection succeeded. Returns true if the connection is started successfully. For products which connect to the mobile device using Bluetooth, getBluetoothProductConnector should be used to get a BluetoothProductConnector object which can handle Bluetooth device connection.
Return:
booleantrue if the connection is started successfully.
methodstopConnectionToProduct
method stopConnectionToProduct
void stopConnectionToProduct()
Package:dji.sdk.sdkmanager
Description:
Disconnect from the connected DJI product.
Debug and Logging
DebugmethodenableBridgeModeWithBridgeAppIP
method enableBridgeModeWithBridgeAppIP
void enableBridgeModeWithBridgeAppIP(String bridgeAppIP)
Package:dji.sdk.sdkmanager
Description:
Enter debug mode with debug IP.
Input Parameters:
String bridgeAppIPDebug IP of the DJI Bridge App.
Get Log Path
Log PathmethodgetLogPath
method getLogPath
@NonNull String getLogPath()
Package:dji.sdk.sdkmanager
Description:
Gets the path that flight logs are stored to. Flight logs are automatically defineed by MSDK and stored on the mobile device. The SDK does nothing with these logs, and they are provided only as a convenience for developers and users. Users can use these flight logs with DJI service centers if they are making a warranty claim. Only developers using the SDK, and users of the mobile device can access these logs. Older flight logs are overwritten by newer flight logs over time, so the flight log path is given in case an application needs to store all logs.
Return:
StringAn NSString object of the flight log path.
methodgetFlycLogPath
method getFlycLogPath
String getFlycLogPath()
Package:dji.sdk.sdkmanager
Description:
Gets the path that flight control compact logs are stored to. Flight control compact logs are defined by flight controller and stored on the mobile device. The SDK does nothing with these logs, and they are provided only as a convenience for developers and users. Users can use these flight logs with DJI service centers if they are making a warranty claim. Only developers using the SDK, and users of the mobile device can access these logs. Older flight logs are overwritten by newer flight logs over time, so the flight log path is given in case an application needs to store all logs. Supported by DJI Air 2S, DJI Mini 2, DJI Mini SE, Mavic Air 2, Mavic Mini, Mavic Pro, Phantom 4 Pro, Matrice 300 RTK.
Return:
StringAn NSString object of the flight control compact log path.
Managers
Fly ZonesmethodgetFlyZoneManager
method getFlyZoneManager
FlyZoneManager getFlyZoneManager()
Package:dji.sdk.sdkmanager
Description:
Provide access to FlyZoneManager used to manage DJI's GEO system for no fly zones.
Return:
FlyZoneManagerAn instance of FlyZoneManager.
SDK KeysmethodgetKeyManager
method getKeyManager
@Nullable KeyManager getKeyManager()
Package:dji.sdk.sdkmanager
Description:
Provide access to the SDK Key interface.
Return:
KeyManagerAn instance of KeyManager.
Mission ControlmethodgetMissionControl
method getMissionControl
MissionControl getMissionControl()
Package:dji.sdk.sdkmanager
Description:
Provide access to MissionControl used to manage missions.
Return:
MissionControlAn instance of MissionControl.
FlighthubmethodgetFlightHubManager
method getFlightHubManager
FlightHubManager getFlightHubManager()
Package:dji.sdk.sdkmanager
Description:
Provide access to FlightHubManager. It can be used to interact with DJI FlightHub (https://www.dji.com/flighthub).
Return:
FlightHubManagerAn instance of FlightHubManager.
Live StreammethodgetLiveStreamManager
method getLiveStreamManager
LiveStreamManager getLiveStreamManager()
Package:dji.sdk.sdkmanager
Description:
Provides access to getLiveStreamManager. It can be used to stream the video to a RTMP server to do live streaming with DJI products.
Return:
LiveStreamManagerAn instance of getLiveStreamManager.
LDM
Local Data ModemethodgetLDMManager
method getLDMManager
LDMManager getLDMManager()
Package:dji.sdk.sdkmanager
Description:
Manages Local Data Mode (LDM) functionality. Local data mode gives the developer the option to put the SDK into airplane mode, restricting its access to the internet. See LDMManager for details on when and where this is possible, and what is restricted.
Return:
LDMManagerAn instance of LDMManager.
Related:
State UpdatesclassSDKManagerCallbackBluetoothclassBluetoothProductConnectorSDK Init EventclassDJISDKInitEvent
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ synchronizedstaticDJISDKManagergetInstance
  ‚Ä¢ setSupportOnlyForBluetoothDevice
  ‚Ä¢ setCallbackRunInUIThread
  ‚Ä¢ voidsetSupportOnlyForBluetoothDevice
  ‚Ä¢ number
  ‚Ä¢ getProduct
  ‚Ä¢ registerApp
  ‚Ä¢ LDMManagergetLDMManager
  ‚Ä¢ stopConnectionToProduct
  ‚Ä¢ LiveStreamManagergetLiveStreamManager
  ‚Ä¢ BaseProductgetProduct
  ‚Ä¢ BluetoothProductConnectorgetBluetoothProductConnector
  ‚Ä¢ RTKNetworkServiceProvidergetRTKNetworkServiceProvider
  ‚Ä¢ StringgetLogPath
  ‚Ä¢ booleanhasSDKRegistered
  ‚Ä¢ getInstance
  ‚Ä¢ voidenableBridgeModeWithBridgeAppIP
  ‚Ä¢ getLogPath
  ‚Ä¢ getFlightHubManager
  ‚Ä¢ enableBridgeModeWithBridgeAppIP
  ‚Ä¢ getUpgradeManager
  ‚Ä¢ native_getUsbAccessoryAttachedString
  ‚Ä¢ getSDKVersion
  ‚Ä¢ getFlyZoneManager
  ‚Ä¢ callbacks
  ‚Ä¢ getFlycLogPath
  ‚Ä¢ voidregisterAppForLDM
  ‚Ä¢ voidsetCallbackRunInUIThread
  ‚Ä¢ connection
  ‚Ä¢ AppActivationManagergetAppActivationManager
  ‚Ä¢ UpgradeManagergetUpgradeManager
  ‚Ä¢ startConnectionToProduct
  ‚Ä¢ StringgetFlycLogPath
  ‚Ä¢ UASRemoteIDManagergetUasRemoteIDManager
  ‚Ä¢ API
  ‚Ä¢ getLiveStreamManager
  ‚Ä¢ Mode
  ‚Ä¢ FlyZoneManagergetFlyZoneManager
  ‚Ä¢ getAppActivationManager
  ‚Ä¢ getUasRemoteIDManager
  ‚Ä¢ managers
  ‚Ä¢ StringgetSDKVersion
  ‚Ä¢ registerAppForLDM
  ‚Ä¢ hasSDKRegistered
  ‚Ä¢ closeAOAConnection
  ‚Ä¢ voidstopConnectionToProduct
  ‚Ä¢ getKeyManager
  ‚Ä¢ FlightHub
  ‚Ä¢ voidcloseAOAConnection
  ‚Ä¢ getLDMManager
  ‚Ä¢ MissionControlgetMissionControl
  ‚Ä¢ initialisation
  ‚Ä¢ FlightHubManagergetFlightHubManager
  ‚Ä¢ getBluetoothProductConnector
  ‚Ä¢ booleanstartConnectionToProduct
  ‚Ä¢ voidregisterApp
  ‚Ä¢ getMissionControl
  ‚Ä¢ KeyManagergetKeyManager
  ‚Ä¢ getRTKNetworkServiceProvider


================================================================================
P√ÅGINA 2: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/Camera/DJICamera.html
M√©todos encontrados: 643
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class Camera
class Camera extends BaseComponent
Package:dji.sdk.cameraInherits From:BaseComponent
Description:
This class contains the media manager and playback manager, which manage the camera's media content. It provides methods to change camera settings and perform camera actions. This object is available from the Aircraft or HandHeld object, which is a subclass of BaseProduct.
Class Members:
State Updates
GeneralmethodsetSystemStateCallback
method setSystemStateCallback
void setSystemStateCallback(@Nullable SystemState.Callback updatedSystemStateCallBack)
Package:dji.sdk.camera
Description:
Sets the camera's system state callback. The onUpdate function has a CameraSystemState object as its parameter.  Precondition:  A Callback object must be implemented and passed in as a parameter.  Postcondition:  The Callback object that was passed in as a parameter will call its onUpdate function at regular intervals.
Input Parameters:
@Nullable SystemState.Callback updatedSystemStateCallBackThe Callback object to set as the callback. <br> Callback implements an onUpdate method.</br> The CameraSDCardState object contains information about the SD card inserted into the aircraft's camera.
ExposuremethodsetExposureSettingsCallback
method setExposureSettingsCallback
void setExposureSettingsCallback(@Nullable ExposureSettings.Callback callback)
Package:dji.sdk.camera
Description:
Sets the callback for updated exposure parameters. The callback's onUpdate method will be called each time the exposure parameters (ISO, Exposure Compensation, Shutter Speed and Aperture) are updated. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@Nullable ExposureSettings.Callback callbackThe execution callback.
MediamethodsetMediaFileCallback
method setMediaFileCallback
@Deprecated void setMediaFileCallback(@Nullable MediaFile.Callback callback)
Package:dji.sdk.camera
Description:
Sets the camera's new generated media file callback. Note:Because the firmware cannot return some information correctly, so the interface is deprecated, please use setNewGeneratedMediaFileInfoCallback insteaded.
Input Parameters:
@Nullable MediaFile.Callback callbackThe Callback object to set as the callback. The callback's method onNewFile has a MediaFile object as it's parameter from which information about the media type, index, file size and the created time can be obtained.
methodsetNewGeneratedMediaFileInfoCallback
method setNewGeneratedMediaFileInfoCallback
void setNewGeneratedMediaFileInfoCallback(@Nullable MediaFile.NewFileInfoCallback callback)
Package:dji.sdk.camera
Description:
Sets the camera's new generated media file info callback.
Input Parameters:
@Nullable MediaFile.NewFileInfoCallback callbackThe Callback object to set as the callback. The callback's method onNewFileInfo has a MediaFileInfo object as it's parameter from which information about the media type, index, file size, created time and stream source can be obtained.
methodsetTimeLapsePreviewCallback
method setTimeLapsePreviewCallback
void setTimeLapsePreviewCallback(@Nullable TimeLapsePreviewCallback generatedTimeLapseCallBack)
Package:dji.sdk.camera
Description:
Sets the generated preview image callback. The callback's onGenerate method will be called each time a photo has been taken.
Input Parameters:
@Nullable TimeLapsePreviewCallback generatedTimeLapseCallBackThe execution callback.
Thermal TemperaturemethodsetThermalTemperatureCallback
method setThermalTemperatureCallback
void setThermalTemperatureCallback(@Nullable TemperatureDataCallback updateCenterTemperatureCallback)
Package:dji.sdk.camera
Description:
Sets the thermal camera's temperature update callback. Callback is used when there is a new temperature value available for the set spot metering target point. Supported only by thermal imaging cameras with installed firmware version of 1.20.0.00 or higher. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@Nullable TemperatureDataCallback updateCenterTemperatureCallbackThe Callback object to set as the callback. <br> Callback implements an onUpdate method.</br> The Float object contains information about the updated temperature value.
LensmethodsetFocusStateCallback
method setFocusStateCallback
void setFocusStateCallback(@Nullable FocusState.Callback updatedLensStateCallback)
Package:dji.sdk.camera
Description:
Callback for updating the lens state. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@Nullable FocusState.Callback updatedLensStateCallbackThe callback.
Thermal Area Temperature AggregationsmethodsetThermalAreaTemperatureAggregationsCallback
method setThermalAreaTemperatureAggregationsCallback
void setThermalAreaTemperatureAggregationsCallback(       @Nullable ThermalAreaTemperatureAggregations.Callback areaTemperatureAggregationsUpdatedCallback)
Package:dji.sdk.camera
Description:
Sets the thermal camera's temperature aggregation update callback. Callback will be called when there are new min, max, and average values available for the set spot metering area. Supported only by thermal imaging cameras with installed firmware version of 1.20.0.00 or higher. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@Nullable ThermalAreaTemperatureAggregations.Callback areaTemperatureAggregationsUpdatedCallbackThe Callback object to set as the callback.
Thermal External Scene SettingsmethodsetThermalExternalSceneSettingsCallback
method setThermalExternalSceneSettingsCallback
void setThermalExternalSceneSettingsCallback(       @Nullable ThermalExternalSceneSettings.Callback thermalExternalSceneSettingsUpdatedCallback)
Package:dji.sdk.camera
Description:
Sets the thermal camera's external scene settings update callback. Callback will get called when updated external scene settings are available. Supported only by thermal imaging cameras with installed firmware version of 1.20.0.00 or higher, Only supported by XT2.
Input Parameters:
@Nullable ThermalExternalSceneSettings.Callback thermalExternalSceneSettingsUpdatedCallbackThe Callback object to set as the callback.
StoragemethodsetSDCardStateCallBack
method setSDCardStateCallBack
@Deprecated void setSDCardStateCallBack(@Nullable StorageState.Callback updatedSDCardStateCallback)
Package:dji.sdk.camera
Description:
Sets the camera's SD card information callback. Deprecated, please use onUpdate instead.
Input Parameters:
@Nullable StorageState.Callback updatedSDCardStateCallbackThe Callback object to set as the callback.
methodsetStorageStateCallBack
method setStorageStateCallBack
void setStorageStateCallBack(@Nullable StorageState.Callback storageStateCallBack)
Package:dji.sdk.camera
Description:
Called when the camera's storage state has been updated. Use StorageState's getStorageLocation to determine if the updated state is for SD card or the internal storage.
Input Parameters:
@Nullable StorageState.Callback storageStateCallBackThe Callback object to set as the callback.
methodsetSSDStateCallback
method setSSDStateCallback
void setSSDStateCallback(@Nullable SSDState.Callback updatedSSDStateCallback)
Package:dji.sdk.camera
Description:
Callback for updating the SSD state.
Input Parameters:
@Nullable SSDState.Callback updatedSSDStateCallbackThe Callback.
HistogrammethodsetHistogramCallback
method setHistogramCallback
void setHistogramCallback(@Nullable HistogramCallback callback)
Package:dji.sdk.camera
Description:
Sets the histogram callback.
Input Parameters:
@Nullable HistogramCallback callbackThe execution callback.
Camera Video Stream SourcemethodsetCameraVideoStreamSourceCallback
method setCameraVideoStreamSourceCallback
void setCameraVideoStreamSourceCallback(CameraVideoStreamSource.Callback callback)
Package:dji.sdk.camera
Description:
Sets the camera video stream source callback. When the camera video stream source been changed, the interface of Callback would be triggered. It is only supported by Zenmuse H20 series.
Input Parameters:
CameraVideoStreamSource.Callback callbackThe execution callback with the returned value(s).
Multispectral Exposure StatemethodsetMultispectralExposureStateCallback
method setMultispectralExposureStateCallback
void setMultispectralExposureStateCallback(@Nullable MultispectralExposureState.Callback callback)
Package:dji.sdk.camera
Description:
Called when the Multispectral camera's exposure status changes. Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
@Nullable MultispectralExposureState.Callback callbackCallback to receive the result.
Check Capture In Video SupportedmethodisCaptureInVideoSupported
method isCaptureInVideoSupported
boolean isCaptureInVideoSupported()
Package:dji.sdk.camera
Description:
This method is used to determine whether the video recording supports photographing.
Return:
booleanA boolean value.
Information
Display NamemethodgetDisplayName
method getDisplayName
String getDisplayName()
Package:dji.sdk.cameraSDK Key:CameraKey.DISPLAY_NAME
Description:
Return string that represents name of the camera.
Return:
StringAn instance of display name String.
Camera CapabilitiesmethodgetCapabilities
method getCapabilities
Capabilities getCapabilities()
Package:dji.sdk.camera
Description:
Camera capabilities. Return nil when the camera is multiple lenses camera. Instead, user can access lens' capabilities through its lens object.
Return:
CapabilitiesAn object of Capabilities.
Get Camera LensmethodgetLens
method getLens
Lens getLens(int lensIndex)
Package:dji.sdk.camera
Description:
Gets camera lens by lensIndex.
Input Parameters:
int lensIndexLens index.
Return:
LensAn object of Lens.
Camera LensmethodgetLenses
method getLenses
@Nullable List<Lens> getLenses()
Package:dji.sdk.camera
Description:
Camera's own lenses.
Return:
List<Lens>A list of Lens.
Flat Camera Mode
Check Flat Camera Mode SupportedmethodisFlatCameraModeSupported
method isFlatCameraModeSupported
boolean isFlatCameraModeSupported()
Package:dji.sdk.camera
Description:
Determines if current camera supports Flat Camera Mode. Returns true if the CameraMode and ShootPhotoMode flatten into FlatCameraMode. The FlatCameraMode and setFlatMode can be used to set the camera mode directly. The user does not need to use setMode and setShootPhotoMode to set the camera mode by two steps. Besides, the MEDIA_DOWNLOAD is decoupled from the CameraMode. Determine what the last camera mode was by checking getMode before entering the playback.
Return:
booleanA boolean value.
Set Flat ModemethodsetFlatMode
method setFlatMode
void setFlatMode(@NonNull FlatCameraMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the camera's flat mode to take photo, record video, or enter intelligent camera modes. Please note that you cannot change the mode when a certain task is executing. This is available only when isFlatCameraModeSupported returns true.
Input Parameters:
@NonNull FlatCameraMode modeCamera flat mode. See FlatCameraMode to find details.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Get Flat ModemethodgetFlatMode
method getFlatMode
void getFlatMode(@NonNull final CompletionCallbackWith<FlatCameraMode> callback)
Package:dji.sdk.camera
Description:
Gets the camera's current flat mode. This is available only when isFlatCameraModeSupported returns true.
Input Parameters:
@NonNull final CompletionCallbackWith<FlatCameraMode> callbackThe execution callback with the returned value(s).
Enter Playback ModemethodenterPlayback
method enterPlayback
void enterPlayback(@Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Enter playback mode, in which users can preview photos or videos, begin the video playback, and download media to the mobile device. This is available only when isFlatCameraModeSupported returns true. Please note that only after exiting playback mode, last flat camera mode will be recovered.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with result of the action.
Exit Playback ModemethodexitPlayback
method exitPlayback
void exitPlayback(@NonNull final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Exit play back mode. This is available only when isFlatCameraModeSupported returns true.
Input Parameters:
@NonNull final CompletionCallback callbackThe execution callback with result of the action.
Shoot Photo/Video
Camera ModemethodsetMode
method setMode
void setMode(@NonNull CameraMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.MODE
Description:
Sets the camera's work mode to taking pictures, video, playback or download. Please note that you cannot change the mode when a certain task is executing, such as taking photo(s), recording video, or downloading and saving files. Also supported by thermal imaging camera.
Input Parameters:
@NonNull CameraMode modeCamera work mode. See enum named CameraMode in SettingsDefinitions to find details on camera work modes.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetMode
method getMode
void getMode(@NonNull final CompletionCallbackWith<CameraMode> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.MODE
Description:
Gets the camera's current work mode. Also supported by thermal imaging camera.
Input Parameters:
@NonNull final CompletionCallbackWith<CameraMode> callbackThe execution callback with the returned value(s).
Record VideomethodstartRecordVideo
method startRecordVideo
void startRecordVideo(@Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.START_RECORD_VIDEO
Description:
Starts recording video.  Precondition: Camera must be in RECORD_VIDEO mode. For thermal imaging camera, user can take Single photo when recording video.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
methodstopRecordVideo
method stopRecordVideo
void stopRecordVideo(@Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.STOP_RECORD_VIDEO
Description:
Stops recording video.   Precondition: The camera is recording currently.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Shoot PhotomethodstartShootPhoto
method startShootPhoto
void startShootPhoto(@Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.START_SHOOT_PHOTO
Description:
Camera starts to take photo with one of the camera capture modes (shoot photo modes).Also,  Precondition: 1. Camera must be in ShootPhoto mode. Check the enum named CameraShootPhotoMode in DJICameraSettingsDef to find all possible camera capture modes. For thermal imaging camera, Single photo can be taken while recording video.2. The SD card state should be checked before this method is used to ensure sufficient space exists.  Post condition: If the capture mode is either Burst or Interval, calling stopShootPhoto will be required for the camera to stop taking photos.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodstopShootPhoto
method stopShootPhoto
void stopShootPhoto(@Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.STOP_SHOOT_PHOTO
Description:
Camera stops taking photos.   Precondition: 1. startShootPhoto has been invoked and the shoot mode is either Interval or Time-lapse.  2. If the capture mode is set to Single, the camera will automatically stop taking the photo once the individual photo is taken.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Shoot Photo ModemethodsetShootPhotoMode
method setShootPhotoMode
void setShootPhotoMode(@NonNull ShootPhotoMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SHOOT_PHOTO_MODE
Description:
Sets the photo shooting mode for the camera.
Input Parameters:
@NonNull ShootPhotoMode modeShootPhotoMode enum value.@Nullable final CompletionCallback callbackAsynchronous execution result.
methodgetShootPhotoMode
method getShootPhotoMode
void getShootPhotoMode(@NonNull final CompletionCallbackWith<ShootPhotoMode> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SHOOT_PHOTO_MODE
Description:
Returns the current photo shooting mode of the camera.
Input Parameters:
@NonNull final CompletionCallbackWith<ShootPhotoMode> callbackAsynchronous execution result.
methodisTimeLapseSupported
method isTimeLapseSupported
boolean isTimeLapseSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_TIME_LAPSE_SUPPORTED
Description:
Check if the current device supports time-lapse shoot mode. Supported only on the Osmo camera.
Return:
booleantrue if timelapse is supported.
Super ResolutionmethodisSuperResolutionSupported
method isSuperResolutionSupported
boolean isSuperResolutionSupported()
Package:dji.sdk.camera
Description:
Check if the current device supports super resolution shoot mode. Supported only on the Zenmuse H20 Series.
Return:
booleantrue if Super Resolution is supported.
methodsetSuperResolutionInfoCallback
method setSuperResolutionInfoCallback
void setSuperResolutionInfoCallback(@Nullable SuperResolutionInfo.Callback superResStateCallback)
Package:dji.sdk.camera
Description:
Callback for updating the super resolution state.
Input Parameters:
@Nullable SuperResolutionInfo.Callback superResStateCallbackCallback method.
methodsetSuperResolutionCaptureArea
method setSuperResolutionCaptureArea
void setSuperResolutionCaptureArea(@NonNull RectF area, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the capture area of super resolution. The area range must be within the range:getMaxArea.
Input Parameters:
@NonNull RectF areaA RecF value of super resolution capture area.@Nullable final CommonCallbacks.CompletionCallback callbackCallback method.
Related:
SettingsclassSuperResolutionInfoclassCapabilitiesclassSettingsDefinitionsenumFlatCameraMode
enum FlatCameraMode
enum FlatCameraMode
Package:dji.common.camera
Description:
Flat camera mode can be used to set the mode to camera directly. The benefit is no need to set the camera mode to shoot photo mode or the Record video first. Please use setFlatMode to set the flat mode. This is available only when isFlatCameraModeSupported returns true.
Enum Members:
SLOW_MOTIONSets the camera to slow motion video recording mode. Only supported by Mavic Air 2, DJI Air 2S.VIDEO_NORMALSets the camera to record normal videos.PHOTO_TIME_LAPSESets the camera to take a picture (or multiple pictures) continuously at a set time interval. The camera will merge the photo sequence and the output is a video. The minimum interval for Video only format is 1 s. The minimum interval for Video+Photo format is 2 s.PHOTO_AEBAutomatic Exposure Bracketing (AEB) capture. In this mode you can quickly take multiple shots (the default is 3) at different exposures without having to manually change any settings between frames.PHOTO_SINGLESets the camera to take a single photo.PHOTO_BURSTSet the camera to take multiple photos at once.PHOTO_HDRSets the camera to take photos in HDR mode.VIDEO_HDRSets the camera to HDR video recording mode. Only supported by Mavic Air 2.PHOTO_INTERVALSets the camera to take a picture (or multiple pictures) continuously at a set time interval. The minimum interval for JPEG format of any quality is 2s.PHOTO_HYPER_LIGHTSets the camera to take photos in HyperLight mode. It is a setting for low-light environment to enhance the photo quality while reducing noise significantly.PHOTO_PANORAMASets the camera to take photos in panorama mode. the aircraft takes a series of photos with different gimbal and aircraft heading positions. The photos can be stitched with a third-party library.PHOTO_EHDRSets the camera to take an enhanced-HDR photo. It blends a sequence of photos for ghost-free high dynamic range photos.PHOTO_HIGH_RESOLUTIONSets the camera to the high resolution mode. In this mode, the camera will take photos with a resolution of 48MP. Only supported by Mavic Air 2.PHOTO_SUPER_RESOLUTIONSets the camera to the super resolution mode. In this mode, drag to select an area in the wide camera view, the gimbal will move automatically and take a series of 20MP photos of the selected area at the current zoom ratio by the zoom camera. All photos will be saved in the same sub-folder in the microSD card, and an HTML file will be created. To view the wide and close-up images, open the HTML file using a browser on a PC. If you want to view the close-up images in app, please refer to the sample implementation. Using setSuperResolutionCaptureArea to set the super resolution capture area. Using setSuperResolutionInfoCallback to listen the super resolution state. Only supported by Matrice 300 RTK.PHOTO_SMARTSets the camera to the smart mode. In this mode, when shooting photo, the camera can automatically recognize the scene, and use the built-in algorithm to optimize the scene. Only supported by Mavic Air 2, DJI Air 2S.INTERNAL_AI_SPOT_CHECKINGInternal work mode during smart inspection and it cannot be set manually. This mode might last for less than 10 seconds, during when the user cannot take photo, record a video, enter media playback mode, set spot metering target of ZOOM lens type, and set zoom focus length with any lens type. Only AUTO can be set with ZOOM lens type. In this mode, remote controller also cannot be used to take photo, record video and adjust focus. It's only supported by Matrice 300 RTK.UNKNOWNThe camera work mode is unknown.
Class Members:
classWhiteBalanceclassFocusAssistantSettingsenumPhotoAEBCount
enum PhotoAEBCount
enum PhotoAEBCount
Package:dji.common.cameraSDK Key:CameraKey.PHOTO_AEB_COUNT
Description:
The number of pictures to continuously take at one time in AEB mode. Use with DJICameraPhotoAEBParam.
Enum Members:
AEB_COUNT_3The number of pictures to continuously take at one time in AEB mode is 3.AEB_COUNT_5The number of pictures to continuously take at one time in AEB mode is 5.AEB_COUNT_7The number of pictures to continuously take at one time in AEB mode is 7.UNKNOWNThe number of pictures to continuously take at one time in AEB mode is unknown.
Class Members:
classPhotoTimeLapseSettingsenumPhotoPanoramaMode
enum PhotoPanoramaMode
enum PhotoPanoramaMode
Package:dji.common.cameraSDK Key:CameraKey.PHOTO_PANORAMA_MODE
Description:
Panorama photo modes.
Enum Members:
PANORAMA_MODE_3X3Camera will shoot 3 rows of 3 photos. Each photo in a row will be taken with a different aircraft heading. Each row of photos is taken with a different gimbal pitch.PANORAMA_MODE_3X1Camera will shoot 3 photos with the same aircraft heading and different gimbal pitch.PANORAMA_MODE_SPHERECamera will shoot 8 rows of 3 photos and 1 extra photo (facing downward). Each photo in a row will be taken with a different aircraft heading. Each row of photos is taken with a different gimbal pitch.PANORAMA_MODE_180Camera will shoot 3 photos with the same gimbal pitch (facing forward) and different aircraft headings.PANORAMA_MODE_SUPER_RESOLUTIONThe camera will capture and patch nine photos resulting in a 48-megapixel super resolution photo. It is supported by Spark, Mavic Air, Mavic 2, Mavic 2 Pro, Mavic 2 Zoom, Mavic 2 Eneterprise, Mavic 2 Enterprise Dual.UNKNOWNUnknown.
Class Members:
classResolutionAndFrameRateenumCameraVideoStreamSource
enum CameraVideoStreamSource
enum CameraVideoStreamSource
Package:dji.common.camera
Description:
The enumeration represents which lens the camera stream comes from. The camera video stream will been used to transfer to image transmission to display and determine which lens were taken photo or recording. It is only supported by Zenmuse H20 Series Camera.
Enum Members:
DEFAULTThe default video stream channel.WIDEWide stream. Only supported by Zenmuse H20 Series and Mavic 2 Enterprise Advanced.ZOOMZoom stream. Only supported by Zenmuse H20 Series and Mavic 2 Enterprise Advanced.INFRARED_THERMALInfrared thermal stream. Only supported by Zenmuse H20T and H20N.and Mavic 2 Enterprise Advanced.UNKNOWNUnknown.
Class Members:
CallbackclassCallback
classCameraStreamSettingsclassColorWaveformSettingsenumSuperResolutionStatus
enum SuperResolutionStatus
enum SuperResolutionStatus
Package:dji.common.camera
Description:
The states of Super resolution.
Enum Members:
SELECTINGSelecting. You could adjust super resolution area with setSuperResolutionCaptureArea.IN_PROGRESSSuper resolution shooting in progress.FINISHSuper resolution shooting completed.EXIT_OUT_OF_STORAGEStop shooting because there is no storage.EXIT_SHOOT_FAILStop shooting because the shooting failed.EXIT_GIMBAL_BLOCKStop shooting because the gimbal is blocked.EXIT_GIMBAL_ABNORMAL_MOVEStop shooting because the gimbal did not move or move abnormally.TIP_GIMBAL_OUT_OF_RANGEStop shooting because the angle of gimbal exceeds the maximum range.TIP_OUT_OF_ZOOMThe zoom of camera out of the maximum range.UNKNOWNUnknown error.
Class Members:
enumResult
enum Result
enum Result
Package:dji.sdk.camera.view
Description:
Defines the result of pin point callback.
Enum Members:
SUCCESS_BUT_OUT_OF_SCREENSuccess to get the pin point location, but point is out of liveview, should show as side indicator, please reference to DJI pilot.SUCCESSSuccess to get the pin point location, the point is insde the liveview.FAILEDFailed to get the pin point location.INVALID_DRONE_POSITIONFailed to get the pin point location, because the drone position is invalid.INVALID_POINT_POSITIONFailed to get the pin point location, because the input GPS location is invalid.GIMBAL_ATTI_ERRORFailed to get the pin point location, because of gimbal attitude error.CAMEAR_ERRORFailed to get the pin point location, because of camera error.
Class Members:
classPinPointclassPinPointInfoclassHistogramCallbackclassTapZoomStateCallbackclassTemperatureDataCallbackState UpdatesclassTimeLapsePreviewCallbackclassSystemStateclassFocusStateclassStorageStateclassSSDStateclassStabilizationStateManagersclassMediaManagerclassPlaybackManagerSSD Clip File NameclassSSDClipFileNameOriginal Photo SettingsclassOriginalPhotoSettingsMultispectral Storage SettingsclassMultispectralStoragePhotoSettingsMultispectral Exposure StateclassMultispectralExposureStateWatermark SettingsclassWatermarkSettingsLaser Measure InfoclassLaserMeasureInformationDisplay Name DisplayNamePhantom3StandardCamera
final DisplayNamePhantom3StandardCamera
static final String DisplayNamePhantom3StandardCamera =       DJICameraAbstraction.DisplayNamePhantom3StandardCamera
Package:dji.sdk.camera
Description:
The display name for Phantom 3 Standard camera.
DisplayNamePhantom3AdvancedCamera
final DisplayNamePhantom3AdvancedCamera
static final String DisplayNamePhantom3AdvancedCamera =       DJICameraAbstraction.DisplayNamePhantom3AdvancedCamera
Package:dji.sdk.camera
Description:
The display name for Phantom 3 Advanced camera.
DisplayNamePhantom3ProfessionalCamera
final DisplayNamePhantom3ProfessionalCamera
static final String DisplayNamePhantom3ProfessionalCamera =       DJICameraAbstraction.DisplayNamePhantom3ProfessionalCamera
Package:dji.sdk.camera
Description:
The display name for Phantom 3 Professional camera.
DisplayNamePhantom34KCamera
final DisplayNamePhantom34KCamera
static final String DisplayNamePhantom34KCamera = DJICameraAbstraction.DisplayNamePhantom34KCamera
Package:dji.sdk.camera
Description:
The display name for Phantom 3 4K camera.
DisplayNameX3
final DisplayNameX3
static final String DisplayNameX3 = DJICameraAbstraction.DisplayNameX3
Package:dji.sdk.camera
Description:
The display name for X3 camera.
DisplayNameX5
final DisplayNameX5
static final String DisplayNameX5 = DJICameraAbstraction.DisplayNameX5
Package:dji.sdk.camera
Description:
The display name for X5 camera.
DisplayNameX5R
final DisplayNameX5R
static final String DisplayNameX5R = DJICameraAbstraction.DisplayNameX5R
Package:dji.sdk.camera
Description:
The display name for X5R camera.
DisplayNamePhantom4Camera
final DisplayNamePhantom4Camera
static final String DisplayNamePhantom4Camera = DJICameraAbstraction.DisplayNamePhantom4Camera
Package:dji.sdk.camera
Description:
The display name for Phantom 4 camera.
DisplaynamePhantom4ProCamera
final DisplaynamePhantom4ProCamera
static final String DisplaynamePhantom4ProCamera = DJICameraAbstraction.DisplaynamePhantom4ProCamera
Package:dji.sdk.camera
Description:
The display name for Phantom 4 Pro camera.
DisplayNameXT
final DisplayNameXT
static final String DisplayNameXT = DJICameraAbstraction.DisplayNameXT336
Package:dji.sdk.camera
Description:
The display name for Zenmuse XT camera.
DisplayNameXTS
final DisplayNameXTS
static final String DisplayNameXTS = DJICameraAbstraction.DisplayNameXTS
Package:dji.sdk.camera
Description:
The display name for Zenmuse XT S camera.
DisplayNameZ3
final DisplayNameZ3
static final String DisplayNameZ3 = DJICameraAbstraction.DisplayNameZ3
Package:dji.sdk.camera
Description:
The display name for Z3 camera.
DisplayNameMavicProCamera
final DisplayNameMavicProCamera
static final String DisplayNameMavicProCamera = DJICameraAbstraction.DisplayNameMavicProCamera
Package:dji.sdk.camera
Description:
The display name for Mavic Pro camera.
DisplayNameSparkCamera
final DisplayNameSparkCamera
static final String DisplayNameSparkCamera = DJICameraAbstraction.DisplayNameSparkCamera
Package:dji.sdk.camera
Description:
The display name for Spark camera.
DisplaynamePhantom4PV2Camera
final DisplaynamePhantom4PV2Camera
static final String DisplaynamePhantom4PV2Camera = DJICameraAbstraction.DisplaynamePhantom4PSDRCamera
Package:dji.sdk.camera
Description:
The display name for Phantom 4 Pro V2 camera.
DisplaynamePhantom4RTKCamera
final DisplaynamePhantom4RTKCamera
static final String DisplaynamePhantom4RTKCamera = DJICameraAbstraction.DisplaynamePhantom4RTKCamera
Package:dji.sdk.camera
Description:
The display name for Phantom 4 RTK camera.
DisplayNameX7
final DisplayNameX7
static final String DisplayNameX7 = DJICameraAbstraction.DisplayNameX7
Package:dji.sdk.camera
Description:
The display name for X7 camera.
DisplayNameXT2_IR
final DisplayNameXT2_IR
static final String DisplayNameXT2_IR = DJICameraAbstraction.DisplayNameXT2_IR
Package:dji.sdk.camera
Description:
The display name for XT2 thermal camera.
DisplayNameXT2_VL
final DisplayNameXT2_VL
static final String DisplayNameXT2_VL = DJICameraAbstraction.DisplayNameXT2_VL
Package:dji.sdk.camera
Description:
The display name for XT2 visual camera.
DisplayNameMavicAirCamera
final DisplayNameMavicAirCamera
static final String DisplayNameMavicAirCamera = DJICameraAbstraction.DisplayNameMavicAirCamera
Package:dji.sdk.camera
Description:
The display name for Mavic Air camera.
DisplayNameMavic2ZoomCamera
final DisplayNameMavic2ZoomCamera
static final String DisplayNameMavic2ZoomCamera = DJICameraAbstraction.DisplayNameMavic2ZoomCamera
Package:dji.sdk.camera
Description:
The display name for Mavic 2 Zoom camera.
DisplayNameMavic2ProCamera
final DisplayNameMavic2ProCamera
static final String DisplayNameMavic2ProCamera = DJICameraAbstraction.DisplayNameMavic2ProCamera
Package:dji.sdk.camera
Description:
The display name for Mavic 2 Pro camera.
DisplayNameMavic2EnterpriseCamera
final DisplayNameMavic2EnterpriseCamera
static final String DisplayNameMavic2EnterpriseCamera = DJICameraAbstraction.DisplayNameMavic2EnterpriseCamera
Package:dji.sdk.camera
Description:
The display name for Mavic 2 Enterprise.
DisplayNameMavic2EnterpriseDual_IR
final DisplayNameMavic2EnterpriseDual_IR
static final String DisplayNameMavic2EnterpriseDual_IR = DJICameraAbstraction.DisplayNameMavic2EnterpriseDual_IR
Package:dji.sdk.camera
Description:
The display name for Mavic 2 Enterprise Dual thermal camera.
DisplayNameMavic2EnterpriseDual_VL
final DisplayNameMavic2EnterpriseDual_VL
static final String DisplayNameMavic2EnterpriseDual_VL = DJICameraAbstraction.DisplayNameMavic2EnterpriseDual_VL
Package:dji.sdk.camera
Description:
The display name for Mavic 2 Enterprise Dual visual camera.
DisplayNameP4MCamera
final DisplayNameP4MCamera
static final String DisplayNameP4MCamera = DJICameraAbstraction.DisplayNameP4MCamera
Package:dji.sdk.camera
Description:
The display name for P4 Multispectral camera.
DisplayNameMavicMiniCamera
final DisplayNameMavicMiniCamera
static final String DisplayNameMavicMiniCamera = DJICameraAbstraction.DisplayNameMavicMiniCamera
Package:dji.sdk.camera
Description:
The display name for Mavic Mini camera.
DisplayNameMavicAir2Camera
final DisplayNameMavicAir2Camera
static final String DisplayNameMavicAir2Camera = DJICameraAbstraction.DisplayNameMavicAir2Camera
Package:dji.sdk.camera
Description:
The display name for Mavic Air 2 camera.
DisplayNameZenmuseH20
final DisplayNameZenmuseH20
static final String DisplayNameZenmuseH20 = DJIMultiLensCameraAbstraction.DisplayNameZenmuseH20
Package:dji.sdk.camera
Description:
The display name for Zenmuse H20.
DisplayNameZenmuseH20T
final DisplayNameZenmuseH20T
static final String DisplayNameZenmuseH20T = DJIMultiLensCameraAbstraction.DisplayNameZenmuseH20T
Package:dji.sdk.camera
Description:
The display name for Zenmuse H20T.
DisplayNameZenmuseH20N
final DisplayNameZenmuseH20N
static final String DisplayNameZenmuseH20N = DJIMultiLensCameraAbstraction.DisplayNameZenmuseH20N
Package:dji.sdk.camera
Description:
The display name for Zenmuse H20N.
DisplayNameMavic2EnterpriseAdvancedCamera
final DisplayNameMavic2EnterpriseAdvancedCamera
static final String DisplayNameMavic2EnterpriseAdvancedCamera = DJIMultiLensCameraAbstraction.DisplayNameMavic2EnterpriseAdvancedCamera
Package:dji.sdk.camera
Description:
The display name for Mavic 2 Enterprise Advanced Camera.
XT2_IR_CAMERA_INDEX
final XT2_IR_CAMERA_INDEX
static final int XT2_IR_CAMERA_INDEX = DJISDKCacheHWAbstractionLayer.XT2_IR_CAMERA_INDEX
Package:dji.sdk.camera
Description:
Index for the XT2 camera.
DisplayNameZ30
final DisplayNameZ30
static final String DisplayNameZ30 = DJICameraAbstraction.DisplayNameZ30
Package:dji.sdk.camera
Description:
The display name for Z30 camera.
DisplayNameX4S
final DisplayNameX4S
static final String DisplayNameX4S = DJICameraAbstraction.DisplayNameX4S
Package:dji.sdk.camera
Description:
The display name for X4S camera.
DisplayNameX5S
final DisplayNameX5S
static final String DisplayNameX5S = DJICameraAbstraction.DisplayNameX5S
Package:dji.sdk.camera
Description:
The display name for X5S camera.
DisplaynamePhantom4AdvancedCamera
final DisplaynamePhantom4AdvancedCamera
static final String DisplaynamePhantom4AdvancedCamera = DJICameraAbstraction.DisplaynamePhantom4AdvancedCamera
Package:dji.sdk.camera
Description:
The display name for Phantom 4 Advanced camera.
Camera peak ThresholdclassCameraPeakThresholdDJILensclassLens
Playback and Download
MediamethodisMediaDownloadModeSupported
method isMediaDownloadModeSupported
boolean isMediaDownloadModeSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_MEDIA_DOWNLOAD_MODE_SUPPORTED
Description:
Check if the current device supports Media Download Mode.
Return:
booleantrue if the current device supports Media Download Mode, false otherwise.
methodgetMediaManager
method getMediaManager
@Nullable MediaManager getMediaManager()
Package:dji.sdk.camera
Description:
Media Manager is used for interaction when camera is in MEDIA_DOWNLOAD. The user can only access the manager when isMediaDownloadModeSupported returns true. @return The MediaManager object if the aircraft supports media list feature. Otherwise, returns null.
Return:
MediaManagerAn instance of MediaManager.
PlaybackmethodisPlaybackSupported
method isPlaybackSupported
boolean isPlaybackSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_PLAYBACK_SUPPORTED
Description:
Check if the current device supports Playback Mode.
Return:
booleanA boolean value.
methodgetPlaybackManager
method getPlaybackManager
@Nullable PlaybackManager getPlaybackManager()
Package:dji.sdk.camera
Description:
Gets the playback manager object. Playback Manager is used for interaction when camera is in PLAYBACK. User can only access to the manager when isPlaybackSupported returns true.
Return:
PlaybackManagerAn instance of PlaybackManager.
Exposure & White Balance
Exposure ModemethodsetExposureMode
method setExposureMode
void setExposureMode(@NonNull ExposureMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.EXPOSURE_MODE
Description:
Sets the camera's exposure mode. Check ExposureMode to view all possible camera exposure modes. Please note that in different exposure mode, it will have different values for the same setting. For Mavic 2 Enterprise Dual, the exposure mode is always PROGRAM. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull ExposureMode modeCamera exposure mode to set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetExposureMode
method getExposureMode
void getExposureMode(@NonNull final CompletionCallbackWith<ExposureMode> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.EXPOSURE_MODE
Description:
Gets the camera's exposure mode. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ExposureMode> callbackThe execution callback with the returned value(s).
ISOmethodsetISO
method setISO
void setISO(@NonNull ISO iso, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.ISO
Description:
Sets the camera's ISO value. See ISO to view all possible ISO settings for the camera. For the X5, X5R, Phantom 4 Pro camera, X4S and X5S, the ISO value can be set for all modes. For the other cameras, the ISO value can only be set when the camera exposure mode is in Manual mode. See the setExposureMode method for how to set exposure mode. For Mavic 2 Enterprise Dual, the ISO value is always AUTO. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull ISO isoThe ISO value to set the camera to use. Please check the enum CameraISOe in DJICameraSettingsDef to find all possible ISO values that the camera can be set to.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetISO
method getISO
void getISO(@NonNull final CompletionCallbackWith<ISO> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.ISO
Description:
Gets the camera's ISO value. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ISO> callbackThe execution callback with the returned value(s).
Shutter SpeedmethodsetShutterSpeed
method setShutterSpeed
void setShutterSpeed(@NonNull ShutterSpeed shutterSpeed, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SHUTTER_SPEED
Description:
Sets the camera shutter speed. To see all available shutterSpeed value settings, see ShutterSpeed. The shutter speed should not be set slower than the video frame rate when the camera's mode is RECORD_VIDEO. For example, if the video frame rate is 30fps, the shutterSpeed must be <= 1/30. Precondition: The shutter speed can be set only when the camera exposure mode is Shutter mode or Manual mode. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull ShutterSpeed shutterSpeedThe ISO value to set the camera to use. Please check the enum CameraISOe in DJICameraSettingsDef to find all possible ISO values that the camera can be set to.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetShutterSpeed
method getShutterSpeed
void getShutterSpeed(@NonNull final CompletionCallbackWith<ShutterSpeed> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SHUTTER_SPEED
Description:
Gets the camera's shutter speed. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ShutterSpeed> callbackThe execution callback with the returned value(s).
AperturemethodisAdjustableApertureSupported
method isAdjustableApertureSupported
boolean isAdjustableApertureSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_ADJUSTABLE_APERTURE_SUPPORTED
Description:
Gets whether the camera supports an adjustable aperture. Currently adjustable aperture is supported only by the X5, X5R, X4S, X5S cameras and Mavic 2 Pro. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Return:
booleanA boolean value.
methodsetAperture
method setAperture
void setAperture(@NonNull Aperture aperture, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.APERTURE
Description:
Sets the aperture value. This feature is available only when isAdjustableApertureSupported returns true.  Precondition:  The exposure mode ExposureMode must be in MANUAL or APERTURE_PRIORITY.  Supported only by the X5, X5R, X4S, X5S camera and Mavic 2 Pro. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull Aperture apertureThe aperture to set. Check enum CameraLensFocusMode in DJICameraSettingsDef.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetAperture
method getAperture
void getAperture(@NonNull final CompletionCallbackWith<Aperture> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.APERTURE
Description:
Gets the lens aperture. This feature is available only when isAdjustableApertureSupported returns true. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Aperture> callbackThe execution callback with the returned value(s).
Exposure MeteringmethodsetMeteringMode
method setMeteringMode
void setMeteringMode(@NonNull MeteringMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.METERING_MODE
Description:
Sets the camera's exposure metering. See MeteringMode to view all possible exposure metering settings for the camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull MeteringMode modeExposure metering to be set. Check the enum MeteringMode to find all possible exposure metering the camera can be set to.@Nullable final CompletionCallback callbackThe execution callback with the execution result
methodgetMeteringMode
method getMeteringMode
void getMeteringMode(@NonNull final CompletionCallbackWith<MeteringMode> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.METERING_MODE
Description:
Gets the camera's exposure metering. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<MeteringMode> callbackThe execution callback with the returned value(s).
methodsetSpotMeteringTarget
method setSpotMeteringTarget
void setSpotMeteringTarget(@NonNull Point spotIndex, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SPOT_METERING_TARGET
Description:
Sets the spot metering area index. The camera image is divided into 96 spots defined by 12 columns and 8 rows. The row index range is [0,7], where the values increase top to bottom across the image. The column index range is [0, 11], where the values increase left to right. In order to make the method work, The camera exposure mode should be Program, Shutter or Aperture, the exposure metering mode must be SPOT, and setAELock must be false. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull Point spotIndexSpot metering point coordinate (x, y).  x is column index to be set. The value should falls in [0, 11], where the values increase left to right. y is row index to be set. The value should falls in [0, 7], where the values increase top to bottom across the image.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetSpotMeteringTarget
method getSpotMeteringTarget
void getSpotMeteringTarget(@NonNull final CompletionCallbackWith<Point> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SPOT_METERING_TARGET
Description:
Gets the spot metering area row index and column index. In order to make the method work, The camera exposure mode should be PROGRAM, SHUTTER_PRIORITY or APERTURE_PRIORITY, the exposure metering mode must be SPOT, and getAELock must be false. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Point> callbackThe execution callback with the returned value(s).
Exposure CompensationmethodsetExposureCompensation
method setExposureCompensation
void setExposureCompensation(@NonNull ExposureCompensation compensation,                                       @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.EXPOSURE_COMPENSATION
Description:
Sets the camera's exposure compensation. See ExposureCompensation to view all possible exposure compensations to which the camera can be set. In order to use this function, set the camera exposure mode to shutter, program or aperture. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull ExposureCompensation compensationExposure compensation value to be set for the camera.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetExposureCompensation
method getExposureCompensation
void getExposureCompensation(@NonNull final CompletionCallbackWith<ExposureCompensation> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.EXPOSURE_COMPENSATION
Description:
Gets the camera's exposure compensation. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ExposureCompensation> callbackThe execution callback with the returned value(s).
Auto Exposure (AE)methodsetAELock
method setAELock
void setAELock(boolean isLocked, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.AE_LOCK
Description:
Locks or unlocks the camera's AE (auto exposure).  Post condition:  If the AE lock is enabled, the spot metering area cannot be set. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
boolean isLockedtrue if the camera AE is locked, false if it is unlocked.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetAELock
method getAELock
void getAELock(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.AE_LOCK
Description:
Determines if the camera's AE (auto exposure) is locked. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
methodsetAutoAEUnlockEnabled
method setAutoAEUnlockEnabled
void setAutoAEUnlockEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.AUTO_AE_UNLOCK_ENABLED
Description:
Enables/disables auto-unlocking of AE lock after shooting a photo. If it is enabled, the Auto Exposure will unlock after each shot. If disabled, Auto Exposure will change when calling setAELock. It is only supported X4S, X5S and Phantom 4 Pro cameras. For the other products, auto-unlocking is always enabled. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
boolean enabledtrue if the camera AE will automatically unlock.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetAutoAEUnlockEnabled
method getAutoAEUnlockEnabled
void getAutoAEUnlockEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.AUTO_AE_UNLOCK_ENABLED
Description:
Determines whether auto-unlocking of AE lock is enabled. It is only supported by X4S, X5S and Phantom 4 Pro cameras. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Auto Exposure Bracketing (AEB)methodsetPhotoAEBCount
method setPhotoAEBCount
void setPhotoAEBCount(@NonNull PhotoAEBCount count, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_AEB_COUNT
Description:
Sets the camera's auto exposure bracketing (AEB) capture parameters.
Input Parameters:
@NonNull PhotoAEBCount countAEB capture count to be set for the camera.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetPhotoAEBCount
method getPhotoAEBCount
void getPhotoAEBCount(@NonNull final CompletionCallbackWith<PhotoAEBCount> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_AEB_COUNT
Description:
Gets the camera's AEB capture parameters.
Input Parameters:
@NonNull final CompletionCallbackWith<PhotoAEBCount> callbackThe execution callback with the returned value(s).
White Balance & Color TemperaturemethodsetWhiteBalance
method setWhiteBalance
void setWhiteBalance(@NonNull WhiteBalance whiteBalance, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.WHITE_BALANCE
Description:
Sets the camera's white balance (color temperature). When white balance is CUSTOM, the colorTemperature argument is used. For all other values, the colorTemperature argument is ignored. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull WhiteBalance whiteBalanceWhite balance value to be set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
See Also:
WhiteBalancePreset to view all possible white balance setting options for the camera.
methodgetWhiteBalance
method getWhiteBalance
void getWhiteBalance(@NonNull final CompletionCallbackWith<WhiteBalance> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.WHITE_BALANCE
Description:
Gets the camera's white balance and color temperature. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<WhiteBalance> callbackThe execution callback with the returned value(s).
Lens, Zoom & Focus
LensmethodisInterchangeableLensSupported
method isInterchangeableLensSupported
boolean isInterchangeableLensSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_INTERCHANGEABLE_LENS_SUPPORTED
Description:
true if the changeable lens is supported by the camera. Currently a changeable lens is supported only by the X5, X5R and X5S cameras. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Return:
booleanA boolean value.
methodgetLensInformation
method getLensInformation
void getLensInformation(@NonNull final CompletionCallbackWith<String> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.LENS_INFORMATION
Description:
Gets details of the installed lens. Supported only by the X5, X5R, X5S and X7 cameras. This is available only when isInterchangeableLensSupported returns true. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<String> callbackThe execution callback with the returned value(s).
ZoommethodisDigitalZoomSupported
method isDigitalZoomSupported
boolean isDigitalZoomSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_DIGITAL_ZOOM_SUPPORTED
Description:
Check if the current device supports digital zoom scale. It is supported by Osmo with X3 camera, Phantom 4 camera, Z3 camera, Mavic Pro camera and Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Return:
booleanA boolean value.
methodsetDigitalZoomFactor
method setDigitalZoomFactor
void setDigitalZoomFactor(@FloatRange(from = 1.0, to = 2.0) float factor,                                    @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.DIGITAL_ZOOM_FACTOR
Description:
Adjusts the digital zoom. It is supported by Osmo with X3 camera, Phantom 4 camera, Z3 camera, Mavic Pro camera and XT 2 camera, DJI Mini 2. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@FloatRange(from = 1.0, to = 2.0) float factorThe valid range is from 1.0 to 4.0.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetDigitalZoomFactor
method getDigitalZoomFactor
void getDigitalZoomFactor(@NonNull final CompletionCallbackWith<Float> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.DIGITAL_ZOOM_FACTOR
Description:
Gets current digital zoom. It is supported by Osmo with X3 camera, Phantom 4 camera, Z3 camera, Mavic Pro camera and Z30 camera. Note Z30 cannot set the digital zoom scale, but will use digital zoom when using startContinuousOpticalZoom and the optical zoom has reached its limit. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Float> callbackThe execution callback with the returned value(s).
methodisOpticalZoomSupported
method isOpticalZoomSupported
boolean isOpticalZoomSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_OPTICAL_ZOOM_SUPPORTED
Description:
Check if camera supports optical zoom. It is only supported by X5, X5R and X5S camera with the Olympus M.Zuiko ED 14-42mm f/3.5-5.6 EZ lens, Z3 camera, Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Return:
booleantrue if camera supports optical zoom.
methodgetOpticalZoomSpec
method getOpticalZoomSpec
void getOpticalZoomSpec(@NonNull final CompletionCallbackWith<OpticalZoomSpec> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.OPTICAL_ZOOM_SPEC
Description:
Gets the specification of the zoom lens. It is only supported by X5, X5R and X5S camera with lens Olympus M.Zuiko ED 14-42mm f/3.5-5.6 EZ, Z3 camera, Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<OpticalZoomSpec> callbackThe execution callback with the returned value(s).
methodsetOpticalZoomFocalLength
method setOpticalZoomFocalLength
void setOpticalZoomFocalLength(int focalLength, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.OPTICAL_ZOOM_FOCAL_LENGTH
Description:
Sets focal length of the zoom lens. It is only supported by X5, X5R and X5S camera with lens Olympus M.Zuiko ED 14-42mm f/3.5-5.6 EZ, X5S camera with Panasonic Lumix 14-42mm/3.5-5.6 HD or Olympus M.Zuiko 9-18mm/4.0-5.6, Z3 camera, Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
int focalLengthFocal length of zoom lens. Valid range is [getMinFocalLength, getMaxFocalLength] and must be a multiple of getFocalLengthStep.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetOpticalZoomFocalLength
method getOpticalZoomFocalLength
void getOpticalZoomFocalLength(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.OPTICAL_ZOOM_FOCAL_LENGTH
Description:
Gets zoom lens focal length in units of 0.1mm. It is only supported by X5, X5R and X5S camera with lens Olympus M.Zuiko ED 14-42mm f/3.5-5.6 EZ, Z3 camera, Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
methodgetOpticalZoomFactor
method getOpticalZoomFactor
void getOpticalZoomFactor(@NonNull final CompletionCallbackWith<Float> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.OPTICAL_ZOOM_SCALE
Description:
Gets current optical zoom factor with range [1, 30]. It is only supported Z30 camera. The Z30 zoom factor can be changed with setOpticalZoomFocalLength and startContinuousOpticalZoom. The zoom factor is then calculated and given through this method. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Float> callbackThe execution callback with the returned value(s).
methodstartContinuousOpticalZoom
method startContinuousOpticalZoom
void startContinuousOpticalZoom(@NonNull ZoomDirection direction,                                          @NonNull final ZoomSpeed speed,                                          @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.START_CONTINUOUS_OPTICAL_ZOOM
Description:
Start changing the focal length of the lens in specified direction with specified speed. Focal length change (zooming) will halt when maximum or minimum focal lengths are reached, or stopContinuousOpticalZoom is called. It is only supported by X5, X5R and X5S camera on Osmo with lens Olympus M.Zuiko ED 14-42mm f/3.5-5.6 EZ, Z3 camera, Z30 camera. For Zenmuse H20 Series, please use class Lens.
Input Parameters:
@NonNull ZoomDirection directionDirection to zoom.@NonNull final ZoomSpeed speedZoom speed.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodstopContinuousOpticalZoom
method stopContinuousOpticalZoom
void stopContinuousOpticalZoom(@Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.STOP_CONTINUOUS_OPTICAL_ZOOM
Description:
Called to stop focal length changing, when it currently is from calling startContinuousOpticalZoom. It is only supported by X5, X5R and X5S camera on Osmo with lens Olympus M.Zuiko ED 14-42mm f/3.5-5.6 EZ, Z3 camera, Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodisTapZoomSupported
method isTapZoomSupported
boolean isTapZoomSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_TAP_ZOOM_SUPPORTED
Description:
Determines whether the current camera supports TapZoom feature. TapZoom is only supported by Z30 camera. @return true if the camera supports TapZoom. In multiple lenses camera, if one of its lenses supports this feature, the camera and the lens that can supports both return true. User can only access the parameters through the lens object. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Return:
booleanA boolean value.
methodsetTapZoomEnabled
method setTapZoomEnabled
void setTapZoomEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.TAP_ZOOM_ENABLED
Description:
Enable/disable TapZoom. tapZoomAtTarget can only be called when TapZoom is enabled. It is only supported Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
boolean enabledThe execution callback with the returned execution result.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetTapZoomEnabled
method getTapZoomEnabled
void getTapZoomEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.TAP_ZOOM_ENABLED
Description:
Determines whether TapZoom is enabled. It is only supported by Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
methodsetTapZoomMultiplier
method setTapZoomMultiplier
void setTapZoomMultiplier(@IntRange(from = 1, to = 5) int multiplier,                                    @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.TAP_ZOOM_MULTIPLIER
Description:
TapZoom uses a multiplier to change the zoom scale when called. The final zoom scale for a TapZoom will be: Current Zoom Scale x Multiplier. The multiplier range is [1,5]. A multiplier of 1 will not change the zoom. When the multiplier is 1, the zoom scale will not change during TapZoom. It is only supported by Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@IntRange(from = 1, to = 5) int multiplierMultiplier of TapZoom.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetTapZoomMultiplier
method getTapZoomMultiplier
void getTapZoomMultiplier(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.TAP_ZOOM_MULTIPLIER
Description:
Gets the multiplier for TapZoom. It is only supported by Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
methodtapZoomAtTarget
method tapZoomAtTarget
void tapZoomAtTarget(@NonNull PointF target, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.TAP_ZOOM_AT_TARGET
Description:
TapZoom at the target. It can be called only when TapZoom is enabled.  When a new target is set, the gimbal will rotate and locate the target in the center of the screen. At the same time, the camera will zoom by multiplying the TapZoom multiplier. It is only supported Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull PointF targetThe CameraTapZoomTargetPoint to zoom. The range for x and y is from 0.0 to 1.0. The point [0.0, 0.0] represents the top-left corner of the screen.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
HybridZoommethodisHybridZoomSupported
method isHybridZoomSupported
boolean isHybridZoomSupported()
Package:dji.sdk.camera
Description:
Hybrid zoom is combining optical and digital zoom. Camera will automatically switch over to digital zoom when optical zoom range is exceeded. Check if camera supports hybrid zoom. It is only supported by Mavic 2 Zoom Camera and Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Return:
booleantrue if camera supports hybrid zoom.
Hybrid Zoom SpecmethodgetHybridZoomSpec
method getHybridZoomSpec
void getHybridZoomSpec(@NonNull final CompletionCallbackWith<HybridZoomSpec> callback)
Package:dji.sdk.camera
Description:
Hybrid zoom is combining optical and digital zoom. Camera will automatically switch over to digital zoom when optical zoom range is exceeded. Gets the specification of the zoom lens. It is only supported by Mavic 2 Zoom Camera and Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<HybridZoomSpec> callbackThe execution callback with the returned value(s).
Hybrid Zoom Focal LengthmethodsetHybridZoomFocalLength
method setHybridZoomFocalLength
void setHybridZoomFocalLength(int focalLength, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Hybrid zoom is combining optical and digital zoom. Camera will automatically switch over to digital zoom when optical zoom range is exceeded. Sets focal length of the zoom lens. It is only supported by Mavic 2 Zoom Camera and Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
int focalLengthFocal length of zoom lens. Valid range is [getMinHybridFocalLength, getMaxHybridFocalLength] and must be a multiple of getFocalLengthStep.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetHybridZoomFocalLength
method getHybridZoomFocalLength
void getHybridZoomFocalLength(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.camera
Description:
Hybrid zoom is combining optical and digital zoom. Camera will automatically switch over to digital zoom when optical zoom range is exceeded. Gets zoom lens focal length in units of 0.1mm. It is only supported by Mavic 2 Zoom Camera and Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
Tap Zoom StatemethodsetTapZoomStateCallback
method setTapZoomStateCallback
void setTapZoomStateCallback(@Nullable final TapZoomStateCallback callback)
Package:dji.sdk.camera
Description:
Sets the tap zoom state callback. The callback's onUpdate method will be called when the camera's zoom state is updated. It is only supported by Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@Nullable final TapZoomStateCallback callbackCompletion callback that receives the execution result.
FocusmethodisAdjustableFocalPointSupported
method isAdjustableFocalPointSupported
boolean isAdjustableFocalPointSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_ADJUSTABLE_FOCAL_POINT_SUPPORTED
Description:
Determines whether the camera supports an adjustable focal point. Currently, the adjustable focal point is supported by the X5, X5R, Z3, Mavic Pro camera, Z30, Phantom 4 Pro camera, X4S, X5S, Mavic 2 Pro, Mavic 2 Zoom Camera and and Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Return:
booleanA boolean value.
methodsetFocusMode
method setFocusMode
void setFocusMode(@NonNull SettingsDefinitions.FocusMode focusMode,                            @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FOCUS_MODE
Description:
Sets the lens focus mode. See FocusMode. It is available only when isAdjustableFocalPointSupported returns true. Supported by the X5, X5R, Z3 cameras (Z3 camera can only support AUTO), the Mavic Pro camera, Z30, Phantom 4 Pro camera, X4S, X5S, Mavic 2 Pro, Mavic 2 Zoom Camera and Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull SettingsDefinitions.FocusMode focusModeFocus mode to set. Check FocusMode for more detail.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetFocusMode
method getFocusMode
void getFocusMode(@NonNull final CompletionCallbackWith<FocusMode> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FOCUS_MODE
Description:
Gets the lens focus mode. Please check FocusMode. It is available only when isAdjustableFocalPointSupported returns true. Supported only by the X5, X5R, Z3 cameras, Mavic Pro camera, Z30, Phantom 4 Pro camera, X4S, X5S, Mavic 2 Pro, Mavic 2 Zoom Camera and Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<FocusMode> callbackThe execution callback with the returned value(s).
methodsetFocusTarget
method setFocusTarget
void setFocusTarget(@NonNull PointF focusTarget, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FOCUS_TARGET
Description:
Sets the lens focus target point. When the focus mode is auto, the target point is the focal point. When the focus mode is manual, the target point is the zoom out area if the focus assistant is enabled for the manual mode. It is available only when isAdjustableFocalPointSupported returns true. Supported only by the X5, X5R, Z3 cameras, Mavic Pro camera, Phantom 4 Pro camera, Mavic 2 Pro, Mavic 2 Zoom Camera, Mavic 2 Enterprise Camera, X4S and X5S. camera, X4S and X5S. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull PointF focusTargetThe focus target to set. The range for x and y is from 0.0 to 1.0. The point [0.0, 0.0] represents the top-left angle of the screen.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetFocusTarget
method getFocusTarget
void getFocusTarget(@NonNull final CompletionCallbackWith<PointF> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FOCUS_TARGET
Description:
Gets the lens focus target point. It is available only when isAdjustableFocalPointSupported returns true. Supported only by the X5, X5R, Z3 cameras, Mavic Pro camera and Phantom 4 Pro camera, X4S, X5S, Mavic 2 Pro, Mavic 2 Zoom Camera and Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<PointF> callbackThe execution callback with the returned value(s).
methodsetFocusAssistantSettings
method setFocusAssistantSettings
void setFocusAssistantSettings(FocusAssistantSettings settings,                                         @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FOCUS_ASSISTANT_SETTINGS
Description:
Used to enable/disable the lens focus assistant. When the focus assistant is enabled, the camera live view will digitally zoom into the focus target area so the user can see the quality of focus. Focus assistant can be used for both manual focus (MF) and auto focus (AF). It is available only when isAdjustableFocalPointSupported returns true. Supported only by the X5, X5R, Z3, Phantom 4 Pro camera, X4S and X5S. Because Z3 only supports AF mode, isEnabledMF will be ignored.
Input Parameters:
FocusAssistantSettings settingsSets whether the lens focus assistant for AF and MF mode is enabled.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetFocusAssistantSettings
method getFocusAssistantSettings
void getFocusAssistantSettings(@NonNull final CompletionCallbackWithTwoParam<Boolean, Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FOCUS_ASSISTANT_SETTINGS
Description:
Determines whether the lens focus assistant is enabled. When the focus assistant is enabled, the camera live view will digitally zoom into the focus target area so the user can see the quality of focus. Focus assistant can be used for both manual focus (MF) and auto focus (AF). It is available only when isAdjustableFocalPointSupported returns true. Supported only by the X5, X5R, Z3 cameras, Phantom 4 Pro, X4s and X5S. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWithTwoParam<Boolean, Boolean> callbackThe execution callback with the returned value(s).
methodgetFocusRingValueUpperBound
method getFocusRingValueUpperBound
void getFocusRingValueUpperBound(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FOCUS_RING_VALUE_UPPER_BOUND
Description:
Gets the lens focusing ring value's max value. It is available only when isAdjustableFocalPointSupported returns true. Supported only by the X5, X5R, Z3 cameras, Phantom 4 Pro camera, X4S, X5S, Mavic 2 Pro, Mavic 2 Zoom Camera and Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
methodsetFocusRingValue
method setFocusRingValue
void setFocusRingValue(@IntRange(from = 0) int value, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FOCUS_RING_VALUE
Description:
Set the focal distance by simulating the focus ring adjustment. Value can have a range of 0, getFocusRingValueUpperBound], which represents infinity and the closest possible focal distance. It is available only when isAdjustableFocalPointSupported returns true. For some lenses, the minimum focus ring value is larger than 0. For example the minimum of DJI MFT 15mm f/1.7 ASPH is 270. To retrieve the minimum value, perform the following steps: - Call setFocusMode with AUTO. - Call setFocusTarget with the furthest target (>30m). - Call getFocusRingValue to get the current focus ring value. This is the minimum value. The maximum value can be retrieved using getFocusRingValueUpperBound. Supported only by X5, X5R, Z3 cameras, Phantom 4 Pro, X4S, X5S, Mavic 2 Pro, Mavic 2 Zoom Camera and Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@IntRange(from = 0) int valueValue to adjust focus ring to. The minimum value is 0, the maximum value depends on the installed lens. Please use method getFocusRingValueUpperBound to ensure the input argument is valid.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetFocusRingValue
method getFocusRingValue
void getFocusRingValue(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FOCUS_RING_VALUE
Description:
Gets the lens focus ring value. It is available only when isAdjustableFocalPointSupported returns true. Supported only by the X5, X5R, Z3 cameras, Phantom 4 Pro, X4S, X5S, Mavic 2 Pro, Mavic 2 Zoom Camera, Mavic 2 Enterprise Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
Liveview Location
methodgetLiveviewLocationWithGPS
method getLiveviewLocationWithGPS
void getLiveviewLocationWithGPS(@NonNull LocationCoordinate3D pointPos, @NonNull PhysicalSource physicalSource, @NonNull CommonCallbacks.CompletionCallbackWith<PinPointInfo> callback)
Package:dji.sdk.camera
Description:
Gets the PinPoint information with GPS which is used to show PinPoint in the liveview. Supported by Zenmuse H20 Series.
Input Parameters:
@NonNull LocationCoordinate3D pointPosThe GPS location, you could get the location from getTargetLocation or get the location with map.@NonNull PhysicalSource physicalSourceThe physical source of a video feed.@NonNull CommonCallbacks.CompletionCallbackWith<PinPointInfo> callbackThe execution callback with the returned value(s).
LinkZoom
methodsetLinkZoomEnabled
method setLinkZoomEnabled
void setLinkZoomEnabled(@NonNull boolean enabled, @NonNull CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Enable or disable the link zoom function. After enabling the link zoom function,  call setThermalDigitalZoomFactor to achieve synchronous zooming of the infrared lens and the zoom lens.  In the split-screen mode PIP, the user can compare the images of the infrared lens and the zoom lens more efficiently.
Supported by Zenmuse H20 Series.
Input Parameters:
@NonNull boolean enabledTrue to enable link zoom.@NonNull CommonCallbacks.CompletionCallback callbackThe execution callback with the returned value(s).
methodgetLinkZoomEnabled
method getLinkZoomEnabled
void getLinkZoomEnabled(CommonCallbacks.CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.camera
Description:
Gets the link zoom status. Supported by Zenmuse H20 Series.
Input Parameters:
CommonCallbacks.CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Settings
Factory SettingsmethodrestoreFactorySettings
method restoreFactorySettings
void restoreFactorySettings(@Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.RESTORE_FACTORY_SETTINGS
Description:
Load the camera's factory settings.  Post condition: The camera will reboot itself.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
Custom SettingsmethodsaveSettingsToProfile
method saveSettingsToProfile
void saveSettingsToProfile(@NonNull CustomSettingsProfile profile,                                     @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SAVE_SETTINGS_TO_PROFILE
Description:
Saves the current camera settings permanently to the specified profile. See CustomSettingsProfile to view all possible camera users.
Input Parameters:
@NonNull CustomSettingsProfile profileCamera profile for which to store camera settings.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodloadSettingsFromProfile
method loadSettingsFromProfile
void loadSettingsFromProfile(@NonNull CustomSettingsProfile profile, final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.LOAD_SETTINGS_FROM_PROFILE
Description:
Load camera settings from the specified user.  Post condition: The camera will reboot itself.
Input Parameters:
@NonNull CustomSettingsProfile profileCamera profile to load camera settings from.final CompletionCallback callbackThe execution callback with the returned execution result.
Photo Settings
Aspect RatiomethodsetPhotoAspectRatio
method setPhotoAspectRatio
void setPhotoAspectRatio(@NonNull PhotoAspectRatio aspectRatio,                                   @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_ASPECT_RATIO
Description:
Sets the camera's aspect ratio for photos. See PhotoAspectRatio to view all possible ratios. Not supported by Z30 camera as the aspect ratio of Z30 is always RATIO_16_9. Not supported by XTS camera as the aspect ratio of XTS is always RATIO_4_3. For Zenmuse H20 and Zenmuse H20T, please use class Lens.
Input Parameters:
@NonNull PhotoAspectRatio aspectRatioAspect ratio for photos to be taken by camera.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetPhotoAspectRatio
method getPhotoAspectRatio
void getPhotoAspectRatio(@NonNull final CompletionCallbackWith<PhotoAspectRatio> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_ASPECT_RATIO
Description:
Gets the camera's aspect ratio for photos. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<PhotoAspectRatio> callbackThe execution callback with the returned value(s).
File FormatmethodsetPhotoFileFormat
method setPhotoFileFormat
void setPhotoFileFormat(@NonNull PhotoFileFormat format, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_FILE_FORMAT
Description:
Sets the camera's photo file format. See PhotoFileFormat to view all possible photo formats to which the camera can be set. Also supported by thermal imaging camera. Not supported by Z30 camera and Mavic 2 Enterprise Dual as the photo file format for Z30 is always JPEG. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull PhotoFileFormat formatPhoto file format used when the camera takes a photo. Check the enum PhotoFileFormat to find all possible photo formats the camera can be set to.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetPhotoFileFormat
method getPhotoFileFormat
void getPhotoFileFormat(@NonNull final CompletionCallbackWith<PhotoFileFormat> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_FILE_FORMAT
Description:
Gets the camera's photo file format. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<PhotoFileFormat> callbackThe execution callback with the returned value(s).
Burst CountmethodsetPhotoBurstCount
method setPhotoBurstCount
void setPhotoBurstCount(@NonNull PhotoBurstCount count, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_BURST_COUNT
Description:
Sets the burst shoot count for the camera when the user wants to use that feature. Check PhotoBurstCount to view all possible burst count values to which the camera can be set.
Input Parameters:
@NonNull PhotoBurstCount countThe number of photos to take in one  Burst shot. Please check the enum PhotoBurstCount to find all possible burst count values the camera can be set to.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetPhotoBurstCount
method getPhotoBurstCount
void getPhotoBurstCount(@NonNull final CompletionCallbackWith<PhotoBurstCount> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_BURST_COUNT
Description:
Gets the burst count type.
Input Parameters:
@NonNull final CompletionCallbackWith<PhotoBurstCount> callbackThe execution callback with the returned value(s).
RAW Burst CountmethodsetPhotoRAWBurstCount
method setPhotoRAWBurstCount
void setPhotoRAWBurstCount(@NonNull PhotoBurstCount count, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_RAW_BURST_COUNT
Description:
Sets the RAW image burst shoot count for the camera when the user wants to use that feature. See PhotoBurstCount to view all possible burst count values to which the camera can be set. It is only supported Inspire 2.
Input Parameters:
@NonNull PhotoBurstCount countThe number of photos to take in one RAW burst shoot.@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
methodgetPhotoRAWBurstCount
method getPhotoRAWBurstCount
void getPhotoRAWBurstCount(@NonNull final CompletionCallbackWith<PhotoBurstCount> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_RAW_BURST_COUNT
Description:
Gets the RAW image burst count. It is only supported Inspire 2.
Input Parameters:
@NonNull final CompletionCallbackWith<PhotoBurstCount> callbackThe execution callback with the returned value(s).
IntervalmethodsetPhotoTimeIntervalSettings
method setPhotoTimeIntervalSettings
void setPhotoTimeIntervalSettings(@NonNull PhotoTimeIntervalSettings settings,                                            @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_TIME_INTERVAL_SETTINGS
Description:
Sets the interval shoot parameters. The camera will capture a photo, wait a specified interval of time, take another photo, and continue in this manner until it has taken the required number of photos. Also supported by thermal imaging camera.
Input Parameters:
@NonNull PhotoTimeIntervalSettings settingsAn instance of PhotoTimeIntervalSettings.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetPhotoTimeIntervalSettings
method getPhotoTimeIntervalSettings
void getPhotoTimeIntervalSettings(       @NonNull final CompletionCallbackWith<PhotoTimeIntervalSettings> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_TIME_INTERVAL_SETTINGS
Description:
Gets the camera's interval shoot parameters. Also supported by thermal imaging camera.
Input Parameters:
@NonNull final CompletionCallbackWith<PhotoTimeIntervalSettings> callbackThe execution callback with the returned value(s).
Time LapsemethodsetPhotoTimeLapseSettings
method setPhotoTimeLapseSettings
void setPhotoTimeLapseSettings(@NonNull PhotoTimeLapseSettings settings,                                         @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_TIME_LAPSE_SETTINGS
Description:
Sets the TimeLapse parameters, including interval, duration and file format when saving. Precondition: Camera should be in TIME_LAPSE mode of ShootPhotoMode.
Input Parameters:
@NonNull PhotoTimeLapseSettings settingsThe time between image captures. An integer falls in the range, [10, 1000]. <br>The unit is 100ms. Please note that when the format is JPEG+Video,<br> the minimum interval is 20(2 seconds).@Nullable final CompletionCallback callbackThe execution block with the returned execution result.
methodgetPhotoTimeLapseSettings
method getPhotoTimeLapseSettings
void getPhotoTimeLapseSettings(@NonNull final CompletionCallbackWith<PhotoTimeLapseSettings> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_TIME_LAPSE_SETTINGS
Description:
Gets the TimeLapse parameters including interval, duration and file format when saving. Precondition: The camera must be in TIME_LAPSE mode of ShootPhotoMode.
Input Parameters:
@NonNull final CompletionCallbackWith<PhotoTimeLapseSettings> callbackThe execution callback with the returned value(s).
Panorama ModemethodsetPhotoPanoramaMode
method setPhotoPanoramaMode
void setPhotoPanoramaMode(@NonNull PhotoPanoramaMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_PANORAMA_MODE
Description:
Sets the panorama mode. It is used when setShootPhotoMode is called with PANORAMA.  It is supported by Spark, Mavic Air, Mavic 2, Mavic 2 Pro, Mavic 2 Zoom, Mavic 2 Eneterprise, Mavic 2 Enterprise Dual.
Input Parameters:
@NonNull PhotoPanoramaMode modeThe panorama mode to set.@Nullable final CompletionCallback callbackcompletion callback to receive the result.
methodgetPhotoPanoramaMode
method getPhotoPanoramaMode
void getPhotoPanoramaMode(@NonNull final CompletionCallbackWith<PhotoPanoramaMode> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_PANORAMA_MODE
Description:
Gets the panorama mode.  It is supported by Spark, Mavic Air, Mavic 2, Mavic 2 Pro, Mavic 2 Zoom, Mavic 2 Eneterprise, Mavic 2 Enterprise Dual.
Input Parameters:
@NonNull final CompletionCallbackWith<PhotoPanoramaMode> callbackcompletion callback to receive the result.
Panorama Photo SettingsmethodsetPanoOriginalPhotoSettings
method setPanoOriginalPhotoSettings
void setPanoOriginalPhotoSettings(@NonNull OriginalPhotoSettings settings,                                            @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Change the original image configuration when shooting panorama photos. CAUTION: enabling this may consume 500 MB in the SD card or the internal storage for each panorama. It is supported by Spark, Mavic Air, Mavic 2, Mavic 2 Pro, Mavic 2 Zoom, Mavic 2 Eneterprise, Mavic 2 Enterprise Dual. For Mavic Air, getFormat is not used and it will ignore the value.
Input Parameters:
@NonNull OriginalPhotoSettings settingsAn object of OriginalPhotoSettings.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetPanoOriginalPhotoSettings
method getPanoOriginalPhotoSettings
void getPanoOriginalPhotoSettings(       @NonNull final CompletionCallbackWith<OriginalPhotoSettings> callback)
Package:dji.sdk.camera
Description:
Gets the configuration, which determines the behavior for the original images when shooting panorama photos. CAUTION: If this is enabled, it may consume 500 MB in the SD card or the internal storage for each panorama. It is supported by Mavic Air and Mavic 2. However, Mavic Air cannot change the format to save the original images. getFormat will be ignored by Mavic Air.
Input Parameters:
@NonNull final CompletionCallbackWith<OriginalPhotoSettings> callbackThe execution callback with the returned execution result.
High Quality PreviewmethodsetHighQualityPreviewEnabled
method setHighQualityPreviewEnabled
void setHighQualityPreviewEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Enables this before photo capture to download high quality preview image. Only supported by Phantom 4 RTK.
Input Parameters:
boolean enabledtrue to enable the feature.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetHighQualityPreviewEnabled
method getHighQualityPreviewEnabled
void getHighQualityPreviewEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.camera
Description:
Gets if high quality preview image downloading is enabled. Only supported by Phantom 4 RTK.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Video Settings
Resolution & Frame RatemethodsetVideoResolutionAndFrameRate
method setVideoResolutionAndFrameRate
void setVideoResolutionAndFrameRate(@NonNull ResolutionAndFrameRate resolutionAndFrameRate,                                              @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.RESOLUTION_FRAME_RATE
Description:
Sets the camera's video resolution and frame rate. @warning The supported resolutions and frame rates for the two different analog television standards PAL and NTSC are below:  NTSC: Resolution_4096x2160, FrameRate_24fps Resolution_3840x2160, FrameRate_30fps Resolution_3840x2160, FrameRate_24fps Resolution_2704X1520, FrameRate_30fps Resolution_2704X1520, FrameRate_24fps Resolution_1920x1080, FrameRate_120fps (Slow Motion) Resolution_1920x1080, FrameRate_60fps Resolution_1920x1080, FrameRate_48fps Resolution_1920x1080, FrameRate_30fps Resolution_1920x1080, FrameRate_24fps Resolution_1280x720,  FrameRate_60fps Resolution_1280x720,  FrameRate_48fps Resolution_1280x720,  FrameRate_30fps Resolution_1280x720,  FrameRate_24fps  PAL: Resolution_4096x2160, FrameRate_25fps Resolution_4096x2160, FrameRate_24fps Resolution_3840x2160, FrameRate_25fps Resolution_3840x2160, FrameRate_24fps Resolution_2704X1520, FrameRate_25fps Resolution_2704X1520, FrameRate_24fps Resolution_1920x1080, FrameRate_120fps (Slow Motion) Resolution_1920x1080, FrameRate_50fps Resolution_1920x1080, FrameRate_48fps Resolution_1920x1080, FrameRate_25fps Resolution_1920x1080, FrameRate_24fps Resolution_1280x720, FrameRate_50fps Resolution_1280x720, FrameRate_48fps Resolution_1280x720, FrameRate_25fps Resolution_1280x720, FrameRate_24fps For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull ResolutionAndFrameRate resolutionAndFrameRateResolution to be set for the video.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetVideoResolutionAndFrameRate
method getVideoResolutionAndFrameRate
void getVideoResolutionAndFrameRate(       @NonNull final CompletionCallbackWith<ResolutionAndFrameRate> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.RESOLUTION_FRAME_RATE
Description:
Gets the camera's video resolution and frame rate values. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ResolutionAndFrameRate> callbackThe execution callback with the returned value(s).
File FormatmethodsetVideoFileFormat
method setVideoFileFormat
void setVideoFileFormat(@NonNull VideoFileFormat format, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.VIDEO_FILE_FORMAT
Description:
Sets the camera's video file format. The default value is MOV. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull VideoFileFormat formatVideo file format to be set for videos.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetVideoFileFormat
method getVideoFileFormat
void getVideoFileFormat(@NonNull final CompletionCallbackWith<VideoFileFormat> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.VIDEO_FILE_FORMAT
Description:
Gets the camera's video file format. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<VideoFileFormat> callbackThe execution callback with the returned value(s).
Analog StandardmethodsetVideoStandard
method setVideoStandard
void setVideoStandard(@NonNull VideoStandard videoStandard, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.VIDEO_STANDARD
Description:
Sets the camera's analog video standard. Setting the video standard to PAL or NTSC will limit the available resolutions and frame rates to those compatible with the chosen video standard.
Input Parameters:
@NonNull VideoStandard videoStandardVideo standard value to be set for the camera.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetVideoStandard
method getVideoStandard
void getVideoStandard(@NonNull final CompletionCallbackWith<VideoStandard> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.VIDEO_STANDARD
Description:
Gets the camera's video standard value.
Input Parameters:
@NonNull final CompletionCallbackWith<VideoStandard> callbackThe execution callback with the returned value(s).
CaptionmethodsetVideoCaptionEnabled
method setVideoCaptionEnabled
void setVideoCaptionEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.VIDEO_CAPTION_ENABLED
Description:
Enables recording position, time and camera information into a video caption file (.srt) saved on the SD card. The information is updated at 1Hz. Currently the .srt file can only be downloaded directly from the SD card.
Input Parameters:
boolean enabledtrue to enable video caption.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetVideoCaptionEnabled
method getVideoCaptionEnabled
void getVideoCaptionEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.VIDEO_CAPTION_ENABLED
Description:
Gets whether the video caption is enabled.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
HistogrammethodsetHistogramEnabled
method setHistogramEnabled
void setHistogramEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.HISTOGRAM_ENABLED
Description:
Enables the histogram.
Input Parameters:
boolean enabledTrue to enable histogram.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetHistogramEnabled
method getHistogramEnabled
void getHistogramEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.HISTOGRAM_ENABLED
Description:
Gets whether the histogram is enabled.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
CompressionmethodsetVideoFileCompressionStandard
method setVideoFileCompressionStandard
void setVideoFileCompressionStandard(@NonNull VideoFileCompressionStandard standard,                                               @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.VIDEO_FILE_COMPRESSION_STANDARD
Description:
Sets the video file compression standard. It is only supported X4S camera, X5S camera and Phantom 4 Pro. For all other products, H.264 is used.
Input Parameters:
@NonNull VideoFileCompressionStandard standardThe compression standard to use.@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
methodgetVideoFileCompressionStandard
method getVideoFileCompressionStandard
void getVideoFileCompressionStandard(       @NonNull final CompletionCallbackWith<VideoFileCompressionStandard> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.VIDEO_FILE_COMPRESSION_STANDARD
Description:
Gets the video file compression standard. It is only supported X4S camera, X5S camera and Phantom 4 Pro.
Input Parameters:
@NonNull final CompletionCallbackWith<VideoFileCompressionStandard> callbackThe execution callback with the returned value(s).
SSD RAWmethodsetSSDVideoRecordingEnabled
method setSSDVideoRecordingEnabled
void setSSDVideoRecordingEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SSD_VIDEO_RECORDING_ENABLED
Description:
Enables/disables the recording of RAW video. It is supported by X5S. User can use the other SSD interfaces only when it is enabled. For X5R, RAW recording is always enabled if there is SSD inserted.
Input Parameters:
boolean enabledtrue to enable the RAW video recording.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetSSDVideoRecordingEnabled
method getSSDVideoRecordingEnabled
void getSSDVideoRecordingEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SSD_VIDEO_RECORDING_ENABLED
Description:
Determines whether the recording of RAW video is enabled. It is supported by X5S.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
SSD RAW Resolution and Frame RatemethodsetSSDVideoResolutionAndFrameRate
method setSSDVideoResolutionAndFrameRate
void setSSDVideoResolutionAndFrameRate(@NonNull ResolutionAndFrameRate resolutionAndFrameRate,                                                 @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SSD_VIDEO_RESOLUTION_AND_FRAME_RATE
Description:
Set Raw Video Resolution and Frame Rate of the SSD. Note, only raw video is saved to the SSD. Compressed video, compressed pictures and raw pictures are all saved to the SD Card. During video capture, Raw video and compressed video are saved simultaneously to the SSD and SD Card respectively. @warning The supported resolutions and frame rates for SSD Raw Videos are shown below:  NTSC: Resolution_4096x2160, FrameRate_24fps Resolution_3840x2160, FrameRate_24fps Resolution_3840x2160, FrameRate_30fps Resolution_2704X1520, FrameRate_24fps Resolution_2704X1520, FrameRate_30fps Resolution_1920x1080, FrameRate_60fps Resolution_1920x1080, FrameRate_48fps Resolution_1920x1080, FrameRate_30fps Resolution_1920x1080, FrameRate_24fps  PAL: Resolution_4096x2160, FrameRate_25fps Resolution_4096x2160, FrameRate_24fps Resolution_3840x2160, FrameRate_25fps Resolution_3840x2160, FrameRate_24fps Resolution_2704X1520, FrameRate_25fps Resolution_2704X1520, FrameRate_24fps Resolution_1920x1080, FrameRate_50fps Resolution_1920x1080, FrameRate_48fps Resolution_1920x1080, FrameRate_25fps Resolution_1920x1080, FrameRate_24fps For X5S, the frame rate of SSD has to be the same as the video to be stored in SD card, so frameRate is ignored. The possible resolutions are determined by SD card video's frame rate and the SSD video license (CameraSSDVideoLicense) being used. The supported resolutions in the current configuration can be queried by using SSDVideoResolutionRange in Capabilities.
Input Parameters:
@NonNull ResolutionAndFrameRate resolutionAndFrameRateResolution and frame rate to be set for the video.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetSSDVideoResolutionAndFrameRate
method getSSDVideoResolutionAndFrameRate
void getSSDVideoResolutionAndFrameRate(       @NonNull final CompletionCallbackWith<ResolutionAndFrameRate> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SSD_VIDEO_RESOLUTION_AND_FRAME_RATE
Description:
Get Raw Video Format and Frame Rate of the SSD.
Input Parameters:
@NonNull final CompletionCallbackWith<ResolutionAndFrameRate> callbackThe execution callback with the returned value(s).
SSD RAW FiltermethodsetSSDLegacyColor
method setSSDLegacyColor
void setSSDLegacyColor(@NonNull SettingsDefinitions.SSDLegacyColor color,                                 @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SSD_LEGACY_COLOR
Description:
Sets the camera color for video that will be stored in SSD. It is only applied when the selected license key is either LicenseKeyTypeProRes422HQ or LicenseKeyTypeProRes4444XQ. This is the legacy version of SSD Color and it is only supported by Inspire 2 with firmware package versions (getFirmwarePackageVersion) lower than 01.0.0240. For newer firmware package versions, use setSSDColor instead.
Input Parameters:
@NonNull SettingsDefinitions.SSDLegacyColor colorSSD legacy color to set.@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
methodgetSSDLegacyColor
method getSSDLegacyColor
void getSSDLegacyColor(@NonNull final CompletionCallbackWith<SSDLegacyColor> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SSD_LEGACY_COLOR
Description:
Gets the camera color for video that will store in SSD. This is the legacy version of SSD Color and it is only supported by Inspire 2 with firmware package versions (getFirmwarePackageVersion) lower than 01.0.0240. For newer firmware package versions, use getSSDColor instead.
Input Parameters:
@NonNull final CompletionCallbackWith<SSDLegacyColor> callbackThe execution callback with the returned value(s).
SSD ColormethodsetSSDColor
method setSSDColor
void setSSDColor(final SettingsDefinitions.SSDColor color, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the color for videos that will be stored in SSD. It is only applied when the selected license key is either LicenseKeyTypeProRes422HQ or LicenseKeyTypeProRes4444XQ. For LicenseKeyTypeCinemaDNG, the color is always RAW_COLOR. It is only supported Inspire 2 with the firmware package version (getFirmwarePackageVersion) 01.0.0240 or later. For older firmware package versions, use setSSDLegacyColor instead.
Input Parameters:
final SettingsDefinitions.SSDColor colorVideo color to set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetSSDColor
method getSSDColor
void getSSDColor(@NonNull final CompletionCallbackWith<SettingsDefinitions.SSDColor> callback)
Package:dji.sdk.camera
Description:
Gets the color for videos that will be stored in SSD. It is only supported Inspire 2 with the firmware package version (getFirmwarePackageVersion) 01.0.0240 or later. For older firmware package versions, use getSSDLegacyColor instead.
Input Parameters:
@NonNull final CompletionCallbackWith<SettingsDefinitions.SSDColor> callbackThe execution callback with the returned SSDColor enum value.
SSD RAW LicensemethodgetSSDVideoLicenses
method getSSDVideoLicenses
void getSSDVideoLicenses(@NonNull final CompletionCallbackWith<CameraSSDVideoLicense[]> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SSD_VIDEO_LICENSES
Description:
Gets purchased license key(s). An Inspire 2 License Key activates the usage permission of CinemaDNG or Apple ProRes inside CineCore 2.0. User can purchase a license key on DJI's website. It is supported by Inspire 2. the digital filter for video that will store in SSD. It is only supported Inspire 2.
Input Parameters:
@NonNull final CompletionCallbackWith<CameraSSDVideoLicense[]> callbackThe execution callback with the returned value(s).
methodactivateSSDVideoLicense
method activateSSDVideoLicense
void activateSSDVideoLicense(@NonNull CameraSSDVideoLicense license,                                       @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.ACTIVATE_SSD_VIDEO_LICENSE
Description:
Sets the SSD video license to be used. If an unpurchased license is selected then only SD video will be recorded.
Input Parameters:
@NonNull CameraSSDVideoLicense licenseLicense to used.@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
methodgetSSDVideoLicense
method getSSDVideoLicense
void getSSDVideoLicense(@NonNull final CompletionCallbackWith<CameraSSDVideoLicense> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.ACTIVATE_SSD_VIDEO_LICENSE
Description:
Gets the license key being used. It is supported by Inspire 2.
Input Parameters:
@NonNull final CompletionCallbackWith<CameraSSDVideoLicense> callbackThe execution callback with the returned value(s).
Auto Lock Gimbal
methodsetAutoLockGimbalEnabled
method setAutoLockGimbalEnabled
void setAutoLockGimbalEnabled(final boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Enables this to lock the gimbal when the camera is shooting a photo. The gimbal will keep the attitude when starting to shoot the photo.
Input Parameters:
final boolean enabledtrue to enable the feature.@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
methodgetAutoLockGimbalEnabled
method getAutoLockGimbalEnabled
void getAutoLockGimbalEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.camera
Description:
Determines whether the gimbal will be locked automatically during shooting photos.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Watermark Settings
methodsetWatermarkSettings
method setWatermarkSettings
void setWatermarkSettings(WatermarkSettings config, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the watermark configuration. Enables this to add timestamp and location stamp to the newly generated photos or videos. It is only supported by Mavic 2 Enterprise series. For Mavic 2 Enterprise Dual, the watermark is only applied to photos and videos generated by the visual camera.
Input Parameters:
WatermarkSettings configThe watermark configuration to set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetWatermarkSettings
method getWatermarkSettings
void getWatermarkSettings(@NonNull final CompletionCallbackWith<WatermarkSettings> callback)
Package:dji.sdk.camera
Description:
Gets the watermark settings. If it is enabled, timestamp and location stamp will be added to the newly generated photos or videos. It is only supported by Mavic 2 Enterprise series. For Mavic 2 Enterprise Dual, the watermark is only applied to photos and videos generated by the visual camera.
Input Parameters:
@NonNull final CompletionCallbackWith<WatermarkSettings> callbackThe execution callback with the returned value(s).
Storage Settings
Custom Expand Directory NamemethodsetCustomExpandDirectoryName
method setCustomExpandDirectoryName
void setCustomExpandDirectoryName(@NonNull String name, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Custom expand directory name settings. After calling this interface, the newly generated media files (videos or photos) will be stored in the new folder, this new folder's name will be appended by your custom directory name. For example, the default folder name is "DJI_202001012359_01", you could append "Mission1" after it, so the new folder's name will be "DJI_202001012359_01_Mission1". In one flight, you can set multiple expand directory names to create multiple custom folders. Only Supported by Zenmuse P1, Zenmuse L1, Zenmuse H20 Series.
Input Parameters:
@NonNull String nameCustom directory name to set.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
methodgetCustomExpandDirectoryName
method getCustomExpandDirectoryName
void getCustomExpandDirectoryName(@NonNull final CompletionCallbackWith<String> callback)
Package:dji.sdk.camera
Description:
Gets custom expand directory name. Only Supported by Zenmuse P1, Zenmuse L1, Zenmuse H20 Series.
Input Parameters:
@NonNull final CompletionCallbackWith<String> callbackThe completion callback that receives the execution result.
Custom Expand File NamemethodsetCustomExpandFileName
method setCustomExpandFileName
void setCustomExpandFileName(@NonNull String name, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Custom expand file name settings. By calling this interface, the name of next media file (video or photo) which would be stored in camera will be appended by the custom file name you set. For example, the default photo name is "DJI_2020012091415_999_WIDE.JPG", you could append "Waypoint1" after the default photo name, so the new photo's name will be "DJI_2020012091415_999_WIDE_Waypoint1.JPG", This action will only take effect once. If you want to have the same name for all media files in one flight, you need to set this action before taking each photo. Only Supported by Zenmmuse P1, Zenmuse H20 Series.
Input Parameters:
@NonNull String nameCustom file name to set.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
methodgetCustomExpandFileName
method getCustomExpandFileName
void getCustomExpandFileName(@NonNull final CompletionCallbackWith<String> callback)
Package:dji.sdk.camera
Description:
Gets custom expand file name. Only Supported by Zenmuse P1, Zenmuse H20 Series.
Input Parameters:
@NonNull final CompletionCallbackWith<String> callbackThe completion callback that receives the execution result.
File Index ModemethodsetFileIndexMode
method setFileIndexMode
void setFileIndexMode(@NonNull FileIndexMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FILE_INDEX_MODE
Description:
Sets the camera's file index mode for the SD card. The default value of FileIndexMode is set to RESET.
Input Parameters:
@NonNull FileIndexMode modeFile index mode to be set for the camera's SD card. The default value of CameraFileIndexMode is set to Reset.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetFileIndexMode
method getFileIndexMode
void getFileIndexMode(@NonNull final CompletionCallbackWith<FileIndexMode> callback)
Package:dji.sdk.camera
Description:
Gets the camera's file index mode.
Input Parameters:
@NonNull final CompletionCallbackWith<FileIndexMode> callbackThe execution callback with the returned value(s).
SD CardmethodformatSDCard
method formatSDCard
void formatSDCard(@Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FORMAT_SD_CARD
Description:
Formats the SD card by deleting all the data on the SD card. This does not change any settings the user may have set on the SD card.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
StoragemethodformatStorage
method formatStorage
void formatStorage(@NonNull SettingsDefinitions.StorageLocation storage, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Formats the storage by deleting all the data on it. It is supported by Mavic 2 series, Mavic 2 enterprise series, Mavic air and Matrice 200 V2 series.
Input Parameters:
@NonNull SettingsDefinitions.StorageLocation storageThe storage (either SD card or the internal storage) to format. When it is SDCARD, this interface has the same effect as formatSDCard.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
SSDmethodisSSDSupported
method isSSDSupported
boolean isSSDSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_SSD_SUPPORTED
Description:
Determines whether the SSD is supported by the camera. Currently, the SSD is supported only by X5R, X4S and X5S camera. @return true if SSD is supported, otherwise false.
Return:
booleanA boolean value.
methodformatSSD
method formatSSD
void formatSSD(@Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.FORMAT_SSD
Description:
Formats the SSD by deleting all the data on the SSD. This does not change any settings the user may have set on the SSD.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Laser Sensor
Enable LasermethodsetLaserEnabled
method setLaserEnabled
void setLaserEnabled(boolean enabled, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the laser enabled. Laser sensor turns on ranging function. Set true to enable the laser distance sensor with measuring ranges to natural object. The laser sensor must be at least 3m from the target point. It is only supported for Zenmuse H20 series.
Input Parameters:
boolean enabledtrue to enable video caption.@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the returned value(s).
methodgetLaserEnabled
method getLaserEnabled
void getLaserEnabled(@NonNull final CommonCallbacks.CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.camera
Description:
Gets whether the laser is enabled. The laser sensor must be at least 3m from the target point. It is only supported for Zenmuse H20 series.
Input Parameters:
@NonNull final CommonCallbacks.CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Misc Settings
Anti-FlickermethodsetAntiFlickerFrequency
method setAntiFlickerFrequency
void setAntiFlickerFrequency(@NonNull AntiFlickerFrequency antiFlickerFrequency,                                       @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.ANTI_FLICKER_FREQUENCY
Description:
Sets the camera's anti-flicker frequency for video recording. Precondition: The exposure mode must be Program. Note: for the Z30 camera, changing anti-flicker will reboot the camera before the setting takes effect. It is not supported by Zenmuse H20 Series.
Input Parameters:
@NonNull AntiFlickerFrequency antiFlickerFrequencyAnti-flicker value to set for the camera. See AntiFlickerFrequency to view all the possible anti-flicker type settings for the camera.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetAntiFlickerFrequency
method getAntiFlickerFrequency
void getAntiFlickerFrequency(@NonNull final CompletionCallbackWith<AntiFlickerFrequency> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.ANTI_FLICKER_FREQUENCY
Description:
Gets the camera's anti-flicker. It is not supported by Zenmuse H20 Series.
Input Parameters:
@NonNull final CompletionCallbackWith<AntiFlickerFrequency> callbackThe execution callback with the returned value(s).
SharpnessmethodsetSharpness
method setSharpness
void setSharpness(@IntRange(from = -3, to = 3) int sharpness, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SHARPNESS
Description:
Sets the camera's sharpness. The default value is 0. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@IntRange(from = -3, to = 3) int sharpnessSharpness value to be set in the range of [-3, 3].@Nullable final CompletionCallback callbackAsynchronous execution result.
methodgetSharpness
method getSharpness
void getSharpness(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SHARPNESS
Description:
Gets the camera's sharpness. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value of sharpness with range [-3, 3].
ContrastmethodsetContrast
method setContrast
void setContrast(@IntRange(from = -3, to = 3) int contrast, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.CONTRAST
Description:
Sets the camera's contrast. The default saturation value is 0. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@IntRange(from = -3, to = 3) int contrastContrast value to be set in the range of [-3, 3].@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetContrast
method getContrast
void getContrast(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.CONTRAST
Description:
Gets the camera's contrast. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value of contrast with range [-3, 3].
methodsetDefogEnabled
method setDefogEnabled
void setDefogEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.DEFOG_ENABLED
Description:
Enable/disable defog feature. When defog feature is enabled, the contrast will be enhanced extraordinarily. It is only supported Z30.
Input Parameters:
boolean enabledtrue to enable defog feature.@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
methodgetDefogEnabled
method getDefogEnabled
void getDefogEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.DEFOG_ENABLED
Description:
Determines whether defog feature is enabled. It is only supported by Z30 camera.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
IR FiltermethodsetIRFilterEnabled
method setIRFilterEnabled
void setIRFilterEnabled(final boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Enables/disables the IR filter (infared filter). Disabling the IR filter can enhance the image in low light environments. Enabling the IR filter can reduce the color distortion caused by the infared light. It is only supported by Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
final boolean enabledtrue to enable IR-Cut filter.@Nullable final CompletionCallback callbackThe execution callback that receives the setter result.
methodgetIRFilterEnabled
method getIRFilterEnabled
void getIRFilterEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.camera
Description:
Determines whether IR filter (infared filter) is enabled. Disabling the IR filter can enhance the image in low light environments. Enabling the IR filter can reduce the color distortion caused by the infared light. It is only supported by Z30 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
SaturationmethodsetSaturation
method setSaturation
void setSaturation(@IntRange(from = -3, to = 3) int saturation,                             @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SATURATION
Description:
Sets the camera's saturation. The default saturation value is 0. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@IntRange(from = -3, to = 3) int saturationSaturation value to be set in the range of [-3, 3]. The default value of the saturation value is 0.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetSaturation
method getSaturation
void getSaturation(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.SATURATION
Description:
Gets the camera's saturation. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
Digital FiltermethodsetColor
method setColor
void setColor(@NonNull CameraColor color, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.CAMERA_COLOR
Description:
Sets the camera's color. The default value is NONE. For a list of all possible camera colors, see CameraColor. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull CameraColor colorCamera color to be applied to the camera.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetColor
method getColor
void getColor(@NonNull final CompletionCallbackWith<SettingsDefinitions.CameraColor> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.CAMERA_COLOR
Description:
Gets the camera's color. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<SettingsDefinitions.CameraColor> callbackThe execution callback with the returned value(s).
Camera OrientationmethodsetOrientation
method setOrientation
void setOrientation(@NonNull Orientation orientation, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.ORIENTATION
Description:
Sets the camera's orientation. The gimbal will rotate the roll axis based on the orientation. Supported only by Mavic Pro.
Input Parameters:
@NonNull Orientation orientationCamera's orientation.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetOrientation
method getOrientation
void getOrientation(@NonNull final CompletionCallbackWith<Orientation> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.ORIENTATION
Description:
Gets the camera's orientation. Supported only by Mavic Pro.
Input Parameters:
@NonNull final CompletionCallbackWith<Orientation> callbackThe execution callback with the returned value(s).
Vision StabilizationmethodsetVisionStabilizationEnabled
method setVisionStabilizationEnabled
void setVisionStabilizationEnabled(final boolean enable, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.VISION_STABILIZATION_ENABLED
Description:
Enables vision stabilization for Z30 camera on M200 series. The vision system in the M200 series of aircraft can be used to compensate for any drift in the gimbal by analyzing the live view when there is no gimbal movement. Drift in the gimbal will be most noticeable at higher zoom factors. It is only supported Z30 on M200 series.
Input Parameters:
final boolean enabletrue to enable the vision stabilization.@Nullable final CompletionCallback callbackcompletion callback to receive the result.
methodgetVisionStabilizationEnabled
method getVisionStabilizationEnabled
void getVisionStabilizationEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.VISION_STABILIZATION_ENABLED
Description:
Determines whether vision stabilization is enabled. It is only supported Z30 on M200 series.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackcompletion callback to receive the result.
Media File Custom InfomethodsetMediaFileCustomInformation
method setMediaFileCustomInformation
void setMediaFileCustomInformation(@NonNull String information, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.CUSTOM_INFORMATION
Description:
Custom information can be stored in media file's XMP meta data. The custom information is written to the media file automatically after the media file is created. This method defines the information to write. The same information will be written to all media files until the information is changed again by this method. Custom information written to each file can be retrieved through fetchCustomInformation or from the image itself when processed on a separate system. It is supported by Phantom 4 Pro, Phantom 4 Advanced, Phantom 4 Pro V2.0, Zenmuse P1, Zenmuse L1, Zenmuse X4S, Zenmuse X5S, Zenmuse X7, Mavic 2 Enterprise camera and Mavic 2 Enterprise Dual camera.
Input Parameters:
@NonNull String informationCustom information to set. Use UTF-8 encoding with a length equal to or less than 31 characters.@Nullable final CompletionCallback callbackThe execution callback to receive the result.
methodgetMediaFileCustomInformation
method getMediaFileCustomInformation
void getMediaFileCustomInformation(@NonNull final CompletionCallbackWith<String> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.CUSTOM_INFORMATION
Description:
Custom information can be stored in media file's XMP meta data. This method retrieves the information that will be written to future media files. The information written to individual files can be retrieved through fetchCustomInformation. It is only supported Phantom 4 Pro, Phantom 4 Advanced, Phantom 4 Pro V2.0, Zenmuse P1, Zenmse L1, Zenmuse X4S, Zenmuse X5S, Zenmuse X7, Mavic 2 Enterprise camera and Mavic 2 Enterprise Dual camera.
Input Parameters:
@NonNull final CompletionCallbackWith<String> callbackThe execution callback to receive the result.
Video Dewarping EnabledmethodsetDewarpingEnabled
method setDewarpingEnabled
void setDewarpingEnabled(final boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Enables/disables dewarping (lens distortion correction) for video recorded to SD card. Supported by Phantom 4 Pro camera, X4S, X5S and X7.
Input Parameters:
final boolean enabledtrue to enable video dewarping.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetDewarpingEnabled
method getDewarpingEnabled
void getDewarpingEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.camera
Description:
Determines whether dewarping (lens distortion correction) is enabled. Supported by Phantom 4 Pro camera, X4S, X5S and X7.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned Boolean value(s).
Sensor Cleaning ModemethodinitSensorCleaningMode
method initSensorCleaningMode
void initSensorCleaningMode(@Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Initiates the sensor cleaning mode. Calling this will change getSensorCleaningState from IDLE to INITIATING. To start the sensor dedusting operation, the workflow should be:  1. Call initSensorCleaningMode.  2. Remove the lens from the camera.  3. Call startSensorCleaning.  4. When getSensorCleaningState becomes WAITING_FOR_LENS_REMOUNT, mount the lens back to the camera.  It is only supported Zenmuse X7.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodstartSensorCleaning
method startSensorCleaning
void startSensorCleaning(@Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Starts cleaning the sensor. The sensor cleaning should only be started when the lens is removed from the camera. It is only supported Zenmuse X7.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodexitSensorCleaningMode
method exitSensorCleaningMode
void exitSensorCleaningMode(@Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Exits sensor cleaning mode. Calling this will stop the current executing operation and change getSensorCleaningState to IDLE.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
EI ModemethodisEIModeSupported
method isEIModeSupported
boolean isEIModeSupported()
Package:dji.sdk.camera
Description:
Determines whether the EI (exposure index) mode is supported by the camera. In this mode, the camera mimics the way a film camera works to help cinematographers capture as much information as possible while balancing the dynamic range and noise with different log curves. This mode only takes effect when the camera mode is in RECORD_VIDEO. The EI mode is supported by X4S, X5S and X7. In multiple lenses camera, if one of its lenses supports this feature, the camera and the lens that can supports both return true. User can only access the parameters through the lens object.
Return:
booleantrue if the EI mode is supported, otherwise false.
methodsetExposureSensitivityMode
method setExposureSensitivityMode
void setExposureSensitivityMode(final SettingsDefinitions.ExposureSensitivityMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the exposure sensitivity mode. It is only supported when isEIModeSupported returns true. It is supported by X4S, X5S and X7. For other cameras, only ISO mode is supported.
Input Parameters:
final SettingsDefinitions.ExposureSensitivityMode modeThe exposure sensitivity mode to set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetExposureSensitivityMode
method getExposureSensitivityMode
void getExposureSensitivityMode(@NonNull final CompletionCallbackWith<SettingsDefinitions.ExposureSensitivityMode> callback)
Package:dji.sdk.camera
Description:
Gets the exposure sensitivity mode. It is only supported when isEIModeSupported returns true. It is supported by X4S, X5S and X7. For other cameras, only ISO mode is supported.
Input Parameters:
@NonNull final CompletionCallbackWith<SettingsDefinitions.ExposureSensitivityMode> callbackThe execution callback with the returned ExposureSensitivityMode enum value.
methodsetEI
method setEI
void setEI(final int ei, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets EI value. The valid range can be fetched from getEIRange. It is only valid when exposure sensitivity mode is EI. It is only supported by X4S, X5S and X7.
Input Parameters:
final int eiThe EI value to set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetEI
method getEI
void getEI(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.camera
Description:
Gets EI value. It is only valid when exposure sensitivity mode is EI. It is only supported by X4S, X5S and X7.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned integer value.
methodgetRecommendedEI
method getRecommendedEI
void getRecommendedEI(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.camera
Description:
Gets the EI value recommended by the camera. It is only valid when exposure sensitivity mode is EI. It is only supported by X4S, X5S and X7.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned Integer value.
methodgetEIRange
method getEIRange
void getEIRange(@NonNull final CompletionCallbackWith<int[]> callback)
Package:dji.sdk.camera
Description:
Gets the valid range of EI values. It is only valid when exposure sensitivity mode is EI. It is only supported by X4S, X5S and X7.
Input Parameters:
@NonNull final CompletionCallbackWith<int[]> callbackThe execution callback with the returned int value.
methodsetEIColor
method setEIColor
void setEIColor(final SettingsDefinitions.EIColor color, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the camera color for EI mode. It is only valid when exposure sensitivity mode is EI. It is only supported by X4S, X5S and X7.
Input Parameters:
final SettingsDefinitions.EIColor colorThe camera color to set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetEIColor
method getEIColor
void getEIColor(@NonNull final CompletionCallbackWith<SettingsDefinitions.EIColor> callback)
Package:dji.sdk.camera
Description:
Gets the camera color for EI mode. It is only valid when exposure sensitivity mode is EI. It is only supported by X4S, X5S and X7.
Input Parameters:
@NonNull final CompletionCallbackWith<SettingsDefinitions.EIColor> callbackThe execution callback with the returned EIColor enum value.
Mechanical Shutter SpeedmethodisMechanicalShutterSupported
method isMechanicalShutterSupported
boolean isMechanicalShutterSupported()
Package:dji.sdk.camera
Description:
Determines whether the mechanical shutter speed is supported by the camera or the lens (for X7). The mechanical shutter is supported by Zenmuse P1, Phantom 4 Pro camera, X4S and X7 with DL lenses. In multiple lenses camera, if one of its lenses supports this feature, the camera and the lens that can supports both return true. User can only access the parameters through the lens object.
Return:
booleantrue if the mechanical shutter is supported, otherwise false.
methodsetMechanicalShutterEnabled
method setMechanicalShutterEnabled
void setMechanicalShutterEnabled(final boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Enables the mechanical shutter. It is only valid when isMechanicalShutterSupported returns true. For Zenmuse L1, this interface can not enabled in video mode.
Input Parameters:
final boolean enabledtrue to enable the mechanical shutter.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetMechanicalShutterEnabled
method getMechanicalShutterEnabled
void getMechanicalShutterEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.camera
Description:
Determines whether the mechanical shutter is enabled. It is only valid when isMechanicalShutterSupported returns true.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned boolean value.
ND Filter ModemethodisNDFilterModeSupported
method isNDFilterModeSupported
boolean isNDFilterModeSupported()
Package:dji.sdk.camera
Description:
Determines whether the ND filter mode is supported by the camera and the lens. Only the DL-S 16mm F2.8 ND ASPH lens for X7 has a built-in ND4 filter and supports changing the modes through an application. In multiple lenses camera, if one of its lenses supports this feature, the camera and the lens that can supports both return true. User can only access the parameters through the lens object.
Return:
booleantrue if the ND filter mode is supported, otherwise false.
methodsetNDFilterMode
method setNDFilterMode
void setNDFilterMode(final SettingsDefinitions.NDFilterMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the mode of ND filter. It is only valid when isNDFilterModeSupported returns true.
Input Parameters:
final SettingsDefinitions.NDFilterMode modeThe ND filter mode to set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetNDFilterMode
method getNDFilterMode
void getNDFilterMode(@NonNull final CompletionCallbackWith<SettingsDefinitions.NDFilterMode> callback)
Package:dji.sdk.camera
Description:
Gets the ND filter mode. It is only valid when isNDFilterModeSupported returns true.
Input Parameters:
@NonNull final CompletionCallbackWith<SettingsDefinitions.NDFilterMode> callbackThe execution callback with the returned NDFilterMode enum value.
Clip File NamemethodsetSSDClipFileName
method setSSDClipFileName
void setSSDClipFileName(final SettingsDefinitions.SSDClipFileName name, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the clip name for the video to be stored in SSD. The clip name will be applied to the next video file stored in SSD. After saving a video file, getClipID will increase by 1 automatically.  It is only supported by Inspire 2.
Input Parameters:
final SettingsDefinitions.SSDClipFileName nameThe clip name to set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetSSDClipFileName
method getSSDClipFileName
void getSSDClipFileName(@NonNull final CompletionCallbackWith<SettingsDefinitions.SSDClipFileName> callback)
Package:dji.sdk.camera
Description:
Gets the clip name for video to be stored in SSD. It is only supported by Inspire 2.
Input Parameters:
@NonNull final CompletionCallbackWith<SettingsDefinitions.SSDClipFileName> callbackThe execution callback with the returned SSDClipFileName class.
Quick ViewmethodisPhotoQuickViewSupported
method isPhotoQuickViewSupported
boolean isPhotoQuickViewSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_PHOTO_QUICK_VIEW_SUPPORTED
Description:
Determines whether the device supports the quick view. Quick view is the period of time a photo is shown as a preview after it is taken and before the camera returns to the live camera view. In multiple lenses camera, if one of its lenses supports this feature, the camera and the lens that can supports both return true. User can only access the parameters through the lens object.
Return:
booleanA boolean value.
methodsetPhotoQuickViewDuration
method setPhotoQuickViewDuration
void setPhotoQuickViewDuration(@IntRange(from = 0, to = 10) int duration,                                         @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_QUICK_VIEW_DURATION
Description:
Sets the camera's quick view duration. The valid range is [0, 10] seconds. When duration is 0, it means that the quick view is disabled. The default value is 0 second. Call isPhotoQuickViewSupported before using this method.
Input Parameters:
@IntRange(from = 0, to = 10) int durationQuick view duration to be set for the camera. This value defines the amount of time a photo is shown as a preview after it is taken before the camera returns back to the live camera view. This value must be set in the range of [0, 10] seconds. When the value is 0, quick view is disabled. The default value is 0 second.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetPhotoQuickViewDuration
method getPhotoQuickViewDuration
void getPhotoQuickViewDuration(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.PHOTO_QUICK_VIEW_DURATION
Description:
Gets the camera's quick view duration.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
HD Live ViewmethodsetHDLiveViewEnabled
method setHDLiveViewEnabled
void setHDLiveViewEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.HD_LIVE_VIEW_ENABLED
Description:
Enables HD (high-definition) live view. When it is enabled, the live view resolution is 1080p with frame rate 30 fps. The settings will only take effect when the camera is in record-video mode and the video resolution is either 1080p or 2.7k without slow-motion enabled. If recording video in 4k, then the live stream will be limited to 720p. Supported by Mavic Air 2, DJI Air 2S, Mavic Pro, Mavic 2 Pro, Mavic 2 Zoom and Phantom 4 Pro v2.0.
Input Parameters:
boolean enabledEnable or disable HD live view.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetHDLiveViewEnabled
method getHDLiveViewEnabled
void getHDLiveViewEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.HD_LIVE_VIEW_ENABLED
Description:
true if 1080p live view is enabled. This will return the value of the setter, and not necessarily the actual live view resolution. For example, if recording in 4K and HD live view has previously been set, then this will return true but the actual live view resolution will be 720p. Supported only by , DJI Air 2S, Mavic Pro, Mavic 2 Pro, Mavic 2 Zoom and Phantom 4 Pro V2.0.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
LEDmethodsetLEDAutoTurnOffEnabled
method setLEDAutoTurnOffEnabled
void setLEDAutoTurnOffEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.LED_AUTO_TURN_OFF_ENABLED
Description:
Enables the automatic control of the front-arm LEDs. The camera can turn off the front-arm LEDs automatically when it shoots photos or records videos. The LEDs will be turned on after the shooting or recording is finished. Supported only by Mavic Pro, Mavic Air, and Mavic 2 series.
Input Parameters:
boolean enabledEnable the automatic control of the front-arm LEDs.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetLEDAutoTurnOffEnabled
method getLEDAutoTurnOffEnabled
void getLEDAutoTurnOffEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.LED_AUTO_TURN_OFF_ENABLED
Description:
Determines whether the automatic control of the front-arm LEDs is Enabled. Supported only by Mavic Pro, Mavic Air, and Mavic 2 series.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
BeaconmethodsetBeaconAutoTurnOffEnabled
method setBeaconAutoTurnOffEnabled
void setBeaconAutoTurnOffEnabled(boolean enabled, @NonNull final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Enables the automatic control of the beacon. The camera can turn off the beacon automatically when it shoots photos or records videos. The LEDs will be turned on after the shooting or recording is finished. Only Supported by Matrice 200 series V2 and Zenmuse H20 Series mounted on Matrice 300 RTK.
Input Parameters:
boolean enabledEnable the automatic control of the beacon.@NonNull final CompletionCallback callbackThe execution callback with the returned value(s).
methodgetBeaconAutoTurnOffEnabled
method getBeaconAutoTurnOffEnabled
void getBeaconAutoTurnOffEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.camera
Description:
Determines whether the automatic control of the beacon is Enabled. Only Supported by M200 series v2 and Zenmuse H20 Series mounted on Matrice 300 RTK.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Storage Location
methodisInternalStorageSupported
method isInternalStorageSupported
boolean isInternalStorageSupported()
Package:dji.sdk.camera
Description:
Determines if the camera supports the internal storage or not. When it is supported, the camera shoot photos or record videos without SD card. The newly generated photos or videos will be stored in the internal storage.
Return:
booleantrue if internal storage is supported.
methodsetStorageLocation
method setStorageLocation
void setStorageLocation(@NonNull SettingsDefinitions.StorageLocation location,                                  @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the storage location for the newly generated photos or videos. It is only supported when isInternalStorageSupported returns true. Not supported by Mavic Mini, DJI Mini 2, DJI Mini SE.
Input Parameters:
@NonNull SettingsDefinitions.StorageLocation locationThe storage location to set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetStorageLocation
method getStorageLocation
void getStorageLocation(@NonNull final CompletionCallbackWith<SettingsDefinitions.StorageLocation> callback)
Package:dji.sdk.camera
Description:
Gets the storage location for the newly generated photos or videos. When isInternalStorageSupported returns false, this setting is always SDCARD.
Input Parameters:
@NonNull final CompletionCallbackWith<SettingsDefinitions.StorageLocation> callbackThe execution callback with the returned execution result.
Audio Settings
RecordingmethodisAudioRecordingSupported
method isAudioRecordingSupported
boolean isAudioRecordingSupported()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_AUDIO_RECORDING_SUPPORTED
Description:
Determines whether the current device supports audio recording. Currently audio recording is supported only by the Osmo camera.
Return:
booleanThe boolean value.
methodsetAudioRecordingEnabled
method setAudioRecordingEnabled
void setAudioRecordingEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.AUDIO_RECORDING_ENABLED
Description:
Enables audio recording when capturing video. Supported only by Osmo camera.
Input Parameters:
boolean enabledEnable or disable audio recording.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetAudioRecordingEnabled
method getAudioRecordingEnabled
void getAudioRecordingEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.AUDIO_RECORDING_ENABLED
Description:
Determines whether the audio record is enabled.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Microphone GainmethodsetAudioGain
method setAudioGain
void setAudioGain(@IntRange(from = 0, to = 100) int value, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.AUDIO_GAIN
Description:
Sets the microphone recording gain.
Input Parameters:
@IntRange(from = 0, to = 100) int valueRecording gain with range [0, 100].@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetAudioGain
method getAudioGain
void getAudioGain(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.AUDIO_GAIN
Description:
Gets the microphone recording gain.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
FanmethodsetTurnOffFanWhenPossible
method setTurnOffFanWhenPossible
void setTurnOffFanWhenPossible(boolean turnOffWhenPossible, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.TURN_OFF_FAN_WHEN_POSSIBLE
Description:
This method will turn off the camera's cooling fan whenever the camera is cool enough to do so. This allows better audio recording from the internal microphone in the camera.
Input Parameters:
boolean turnOffWhenPossibletrue to turn fan off whenever possible.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetTurnOffFanWhenPossible
method getTurnOffFanWhenPossible
void getTurnOffFanWhenPossible(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.TURN_OFF_FAN_WHEN_POSSIBLE
Description:
Determines whether the fan will turn off whenever it is cool enough to do so to enable better audio recordings from the camera's internal microphone.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Thermal
CheckmethodisThermalCamera
method isThermalCamera
boolean isThermalCamera()
Package:dji.sdk.cameraSDK Key:CameraKey.IS_THERMAL_CAMERA
Description:
true if the current connected device is a thermal imaging camera. @return BOOL true if current connected device is thermal imaging camera. For Zenmuse H20T and H20N, please use class Lens.
Return:
booleanA boolean value.
Region of Interest (ROI)methodsetThermalROI
method setThermalROI
void setThermalROI(@NonNull ThermalROI roi, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ROI
Description:
Sets the Region of Interest (ROI). Used to manage color range distribution across the screen to maximize contrast for regions of highest interest. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull ThermalROI roiAn enum type of the Region of Interest to be used. Please refer to ThermalROI.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalROI
method getThermalROI
void getThermalROI(@NonNull final CompletionCallbackWith<ThermalROI> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ROI
Description:
Gets the Region of Interest. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ThermalROI> callbackThe execution callback with the returned value(s).
Color PalettemethodsetThermalPalette
method setThermalPalette
void setThermalPalette(@NonNull ThermalPalette palette, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_PALETTE
Description:
Sets the Palette. Each palette is a unique look-up table that maps 8-bit temperature values to different colors. Different palettes can be used to help the user better visualize temperature contrast or specific temperature bands. The valid range can be fetched from thermalPaletteRange. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull ThermalPalette paletteAn enum type of the ThermalPalette to be used.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalPalette
method getThermalPalette
void getThermalPalette(@NonNull final CompletionCallbackWith<ThermalPalette> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_PALETTE
Description:
Gets the Palette. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ThermalPalette> callbackThe execution callback with the returned value(s).
ScenemethodsetThermalScene
method setThermalScene
void setThermalScene(@NonNull ThermalScene scene, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_SCENE
Description:
Sets the scene to instantly enhance your image. In all modes except Manual and User modes, the DDE, ACE, SSO,  brightness and contrast are set automatically to obtain the best result. In User modes, the contrast and brightness are set automatically to obtain the best results. Any settings that are made in these modes are retained if the scene is changed. In Manual mode, DDE, contrast and brightness are set manually. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull ThermalScene sceneAn enum type for the ThermalScene to be used.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalScene
method getThermalScene
void getThermalScene(@NonNull final CompletionCallbackWith<ThermalScene> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_SCENE
Description:
Gets current scene. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ThermalScene> callbackThe execution callback with the returned value(s).
Digital Data Enhancement (DDE)methodsetThermalDDE
method setThermalDDE
void setThermalDDE(@IntRange(from = -20, to = 100) int value, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_DDE
Description:
Sets the Digital Data Enhancement index (for DDE dynamic mode). DDE can be used to enhance image details (sharpen, higher index) and/or suppress fixed pattern noise (soften, lower index). It can be set manually only when the Scene mode is Manual, User1, User2 or User3. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@IntRange(from = -20, to = 100) int valueInteger in range [-20, 100]. Values less than 0 soften the image and filter fixed pattern noise. Values greater than 0 sharpen the details in the image. Value of 0 results in no enhancement.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalDDE
method getThermalDDE
void getThermalDDE(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_DDE
Description:
Gets the value of Digital Data Enhancement. The value is available only when the Scene mode is Manual, User1, User2 or User3. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
Active Contrast Enhancement (ACE)methodsetThermalACE
method setThermalACE
void setThermalACE(@IntRange(from = -8, to = 8) int value, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ACE
Description:
Set the value of Active Contrast Enhancement. Active contrast enhancement allows for a contrast trade-off between hotter and colder scenes when using 8-bit pixel data. It can be set manually only when the Scene mode is User1, User2 or User3. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@IntRange(from = -8, to = 8) int valueInteger in range [-8, 8]. <br> value > 0: more contrast in hotter scene content and less contrast in colder scene content (sky, ocean etc.). <br> value < 0: more contrast in colder scene content and less contrast in hotter scene content. <br> value = 0: neutral <br> value = 3: recommended for generic use@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalACE
method getThermalACE
void getThermalACE(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ACE
Description:
Gets the value of Active Contrast Enhancement. The value is available only when the Scene mode is Manual, User1, User2 or User3. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
Smart Scene Optimization (SSO)methodsetThermalSSO
method setThermalSSO
void setThermalSSO(@IntRange(from = 0, to = 100) int value, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_SSO
Description:
Sets the value of Smart Scene Optimization. When using non-linear histogram equalization to map the 14-bit sensor pixel values to 8-bit pixel values, it can become difficult to determine the difference in temperature of two objects from their different shades of gray. SSO allows a percentage of the 14-bit histogram to be mapped linearly to the 8-bit histogram, which will compromise local contrast, but allow for more accurate visual radiometric measurements. This is particularly useful for bi-modal scenes. It can be set manually only when the Scene mode is User1, User2 or User3. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@IntRange(from = 0, to = 100) int valuePercentage of histogram to map linearly [0, 100].@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalSSO
method getThermalSSO
void getThermalSSO(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_SSO
Description:
Gets the value of Smart Scene Optimization. The value is available only when the Scene mode is Manual, User1, User2 or User3. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
BrightnessmethodsetThermalBrightness
method setThermalBrightness
void setThermalBrightness(@IntRange(from = 0, to = 16383) int brightness,                                    @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_BRIGHTNESS
Description:
Sets the brightness of the image. It can be set manually only when the Scene mode is Manual. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@IntRange(from = 0, to = 16383) int brightnessThe integer value falls in [0, 16383].@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalBrightness
method getThermalBrightness
void getThermalBrightness(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_BRIGHTNESS
Description:
Gets the value of brightness. The value is available only when the Scene mode is Manual, User1, User2 or User3. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
ContrastmethodsetThermalContrast
method setThermalContrast
void setThermalContrast(@IntRange(from = 0, to = 255) int contrast,                                  @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_CONTRAST
Description:
Sets the value of contrast, with larger values having higher contrast. It can be set manually only when the Scene mode is Manual. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@IntRange(from = 0, to = 255) int contrastContrast value as an integer with range [0, 255].@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalContrast
method getThermalContrast
void getThermalContrast(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_CONTRAST
Description:
Gets contrast value. The value is available only when the Scene mode is Manual, User1, User2 or User3. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
IsothermsmethodsetThermalIsothermEnabled
method setThermalIsothermEnabled
void setThermalIsothermEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ISOTHERM_ENABLED
Description:
Enable or disable Isotherms. Isotherms can be used to highlight specific temperature ranges: When disabled, all 256 values (8-bits) are dedicated to the temperature histogram of the scene. When enabled, only 128 values (0-127) are mapped linearly to temperature. Then three bands 128-175, 176-223 and 224-255 can be mapped to the user defined temperatures to highlight them to the user. Using some of the false color palettes (like RainbowIso) results in a thermal image that is grey scale except for three specific bands highlighted by either reds, blues or greens. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
boolean enabledtrue if isotherms are enabled.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalIsothermEnabled
method getThermalIsothermEnabled
void getThermalIsothermEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ISOTHERM_ENABLED
Description:
Determines whether Isotherms are enabled. true if Isotherms are enabled. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
methodsetThermalIsothermUnit
method setThermalIsothermUnit
void setThermalIsothermUnit(@NonNull ThermalIsothermUnit unit, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ISOTHERM_UNIT
Description:
Sets the unit of the Isotherm ranges to either Celsius or percent. Different units results in different value ranges for Isotherms. Supported only by thermal imaging cameras except Mavic 2 Enterprise Dual thermal camera. For Mavic 2 Enterprise Dual, the Isotherm unit is always CELSIUS. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull ThermalIsothermUnit unitAn enum type of the CameraThermalIsothermUnit to be used. Please refer to DJICameraThermalIsothermUnit.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalIsothermUnit
method getThermalIsothermUnit
void getThermalIsothermUnit(@NonNull final CompletionCallbackWith<ThermalIsothermUnit> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ISOTHERM_UNIT
Description:
Gets the units for Isotherm ranges. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Mavic 2 Enterprise Dual, the Isotherm unit is always CELSIUS. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ThermalIsothermUnit> callbackThe execution callback with the returned value(s).
methodsetThermalIsothermUpperValue
method setThermalIsothermUpperValue
void setThermalIsothermUpperValue(@IntRange(from = 0, to = 100) int value,                                            @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ISOTHERM_UPPER_VALUE
Description:
Sets the upper threshold value for Isotherm. All temperature values above this will use colors 224-255 from the palette. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@IntRange(from = 0, to = 100) int valueIf the unit is percentage, the allowed range is [0,100]. If the unit is Celsius, for Mavic 2 Enterprise Dual thermal camera, the value range is [-10, 400]. For other thermal imaging cameras, the value range is [-40, 500]. The value can only be equal or larger than middle Isotherm threshold.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalIsothermUpperValue
method getThermalIsothermUpperValue
void getThermalIsothermUpperValue(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ISOTHERM_UPPER_VALUE
Description:
Gets the upper threshold value for Isotherm. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
methodsetThermalIsothermMiddleValue
method setThermalIsothermMiddleValue
void setThermalIsothermMiddleValue(@IntRange(from = 0, to = 100) int value,                                             @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ISOTHERM_MIDDLE_VALUE
Description:
Sets the middle threshold value for Isotherm. Temperature values between the middle and upper Isotherm threshold will be displayed with colors 176-223 from the palette. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@IntRange(from = 0, to = 100) int valueIf the unit is percentage, the value falls in [0,100]. If the unit is Celsius, the value range is [-40, 550]. The value can only be equal or larger than lower threshold and equal or smaller than upper threshold.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalIsothermMiddleValue
method getThermalIsothermMiddleValue
void getThermalIsothermMiddleValue(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ISOTHERM_MIDDLE_VALUE
Description:
Gets the middle threshold value for Isotherm. Supported only by thermal imaging cameras, except Mavic 2 Enterprise Dual thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
methodsetThermalIsothermLowerValue
method setThermalIsothermLowerValue
void setThermalIsothermLowerValue(@IntRange(from = 0, to = 100) int value,                                            @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ISOTHERM_LOWER_VALUE
Description:
Sets the lower threshold value for Isotherm. Temperature values between the lower and middle Isotherm threshold will be displayed with colors 128-175 from the palette. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@IntRange(from = 0, to = 100) int valueIf the unit is percentage, the value falls in [0,100]. If the unit is Celsius, for Mavic 2 Enterprise Dual thermal camera, the value range is [-10, 400], for other thermal imaging cameras, the value range is [-40, 500]. The value can only be equal or smaller than upper threshold.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalIsothermLowerValue
method getThermalIsothermLowerValue
void getThermalIsothermLowerValue(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ISOTHERM_LOWER_VALUE
Description:
Gets the lower threshold value for Isotherm. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
GainmethodsetThermalGainMode
method setThermalGainMode
void setThermalGainMode(@NonNull ThermalGainMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_GAIN_MODE
Description:
Sets the gain mode. Low gain mode can be used for scenes with temperatures ranging from -40 to 550 degrees Celsius. For higher contrast, the high gain mode can be used by for temperatures between -25 to 135 degrees Celsius for the 640x512 camera and -25 to 100 degrees Celsius for 324 x 256 camera. Mavic 2 Enterprise Dual has different temperature range from other thermal imaging cameras. Therefore, for Mavic 2 Enterprise Dual, the low gain mode can be used from -10 to 140 degrees Celsius. The high gain mode can be used from -10 to 400 degree Celsius. Supported by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull ThermalGainMode modeAn enum type of the ThermalGainMode to be used.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalGainMode
method getThermalGainMode
void getThermalGainMode(@NonNull final CompletionCallbackWith<ThermalGainMode> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_GAIN_MODE
Description:
Gets the gain mode. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ThermalGainMode> callbackThe execution callback with the returned value(s).
Measurement ModemethodsetThermalMeasurementMode
method setThermalMeasurementMode
void setThermalMeasurementMode(@NonNull ThermalMeasurementMode mode, @Nullable CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_MEASUREMENT_MODE
Description:
Sets the mode for thermal measurement. Use callback method  onUpdate to receive the measurement result. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull ThermalMeasurementMode modeThe desired measurement mode.@Nullable CompletionCallback callbackExecution callback that receives the getter execution result.
methodgetThermalMeasurementMode
method getThermalMeasurementMode
void getThermalMeasurementMode(@NonNull CompletionCallbackWith<ThermalMeasurementMode> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_MEASUREMENT_MODE
Description:
Gets the mode for thermal measurement. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull CompletionCallbackWith<ThermalMeasurementMode> callbackThe execution callback with the returned value(s).
Digital ZoommethodsetThermalDigitalZoomFactor
method setThermalDigitalZoomFactor
void setThermalDigitalZoomFactor(@NonNull ThermalDigitalZoomFactor factor,                                           @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_DIGITAL_ZOOM_FACTOR
Description:
Adjusts the digital zoom. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull ThermalDigitalZoomFactor factorFor resolution 640 x 512, x1,x2,x4,x8 can be set. For resolution 336 x 256, only x1,x2,x4 can be set. Please refer to CameraThermalDigitalZoomScale in DJICameraSettingsDef.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalDigitalZoomFactor
method getThermalDigitalZoomFactor
void getThermalDigitalZoomFactor(@NonNull final CompletionCallbackWith<ThermalDigitalZoomFactor> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_DIGITAL_ZOOM_FACTOR
Description:
Gets current digital zoom. Supported only by thermal imaging cameras. For Zenmuse H20T, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ThermalDigitalZoomFactor> callbackThe execution callback with the returned value(s).
ProfilemethodgetThermalProfile
method getThermalProfile
void getThermalProfile(@NonNull final CompletionCallbackWith<SettingsDefinitions.ThermalProfile> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_PROFILE
Description:
Gets the thermal imaging camera profile. The profile includes information about resolution, frame rate and focal length. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<SettingsDefinitions.ThermalProfile> callbackThe execution callback with the returned value(s).
MeteringmethodsetThermalSpotMeteringTargetPoint
method setThermalSpotMeteringTargetPoint
void setThermalSpotMeteringTargetPoint(@NonNull PointF targetPoint,                                                 @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_SPOT_METERING_TARGET_POINT
Description:
Sets the spot metering target point which then invoke the callback from setThermalTemperatureCallback with the temperature at a specific coordinate in the scene. This method requires a relative point that is proportional to the dimension of the camera video dimension, the x, and y values must all be between 0 and 1.0. Supported only by XT2, Mavic 2 Enterprise Dual and Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull PointF targetPointThe desired target point.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalSpotMeteringTargetPoint
method getThermalSpotMeteringTargetPoint
void getThermalSpotMeteringTargetPoint(       @NonNull final CompletionCallbackWith<PointF> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_SPOT_METERING_TARGET_POINT
Description:
Gets the spot metering target point if one is set, if not then returns CGPointZero. Supported only by XT2, Mavic 2 Enterprise Dual and Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<PointF> callbackThe execution callback with the returned value(s).
methodsetThermalMeteringArea
method setThermalMeteringArea
void setThermalMeteringArea(@NonNull RectF area, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_METERING_AREA
Description:
Set the metering area for a rectangle inside the thermal image scene, which allows the camera to transmit aggregate temperature computations via the onUpdate callback method. See ThermalAreaTemperatureAggregations for the statistical values that are available. This method requires a relative rect that is proportional to the rect of the thermal scene, the x, y, width, and height values must all be between 0 and 1.0. Supported only by XT2, Mavic 2 Enterprise Dual and Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T, please use class Lens.
Input Parameters:
@NonNull RectF areaThe desired thermal metering area.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalMeteringArea
method getThermalMeteringArea
void getThermalMeteringArea(@NonNull final CompletionCallbackWith<RectF> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_METERING_AREA
Description:
Get a rect representing the currently set metering area for the thermal scene. Supported only by XT2, Mavic 2 Enterprise Dual and Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<RectF> callbackThe execution callback with the returned value(s).
Flat-field Correction (FFC)methodsetThermalFFCMode
method setThermalFFCMode
void setThermalFFCMode(@NonNull ThermalFFCMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_FFC_MODE
Description:
Set the flat-field correction (FFC) mode. Supported only by thermal imaging cameras. For Mavic 2 Enterprise Dual thermal camera, the ThermalFFCMode is always AUTO. For Mavic 2 Enterprise Advanced camera, support AUTO and MANUAL. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull ThermalFFCMode modeThe desired FFC mode.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalFFCMode
method getThermalFFCMode
void getThermalFFCMode(@NonNull final CompletionCallbackWith<ThermalFFCMode> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_FFC_MODE
Description:
Get the currently set flat-field correction (FFC) mode. Supported only by thermal imaging cameras with installed firmware version of 1.15.1.60 or higher. For Mavic 2 Enterprise Dual thermal camera, the DJICamera_DJICameraThermalFFCMode is always DJICamera_DJICameraThermalFFCMode_Auto. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ThermalFFCMode> callbackThe execution callback with the returned value(s).
methodtriggerThermalFFC
method triggerThermalFFC
void triggerThermalFFC(@Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.TRIGGER_THERMAL_FFC
Description:
Trigger flat-field correction. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with result of the trigger action.
Scene ProfilemethodsetThermalCustomExternalSceneSettingsProfile
method setThermalCustomExternalSceneSettingsProfile
void setThermalCustomExternalSceneSettingsProfile(@NonNull ThermalCustomExternalSceneSettingsProfile profile,                                                            @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_CUSTOM_EXTERNAL_SCENE_SETTINGS_PROFILE
Description:
Set the custom user profile. This profile represents user-set external scene parameters for the thermal scene. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull ThermalCustomExternalSceneSettingsProfile profileThe desired user profile setting.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalCustomExternalSceneSettingsProfile
method getThermalCustomExternalSceneSettingsProfile
void getThermalCustomExternalSceneSettingsProfile(       @NonNull final CompletionCallbackWith<ThermalCustomExternalSceneSettingsProfile> callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_CUSTOM_EXTERNAL_SCENE_SETTINGS_PROFILE
Description:
Get the currently set custom user profile. This profile represents user-set external scene parameters for the thermal scene. Supported only by thermal imaging cameras. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<ThermalCustomExternalSceneSettingsProfile> callbackThe execution callback with the returned value(s).
AtmospheremethodsetThermalAtmosphericTemperature
method setThermalAtmosphericTemperature
void setThermalAtmosphericTemperature(float temperature, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ATMOSPHERIC_TEMPERATURE
Description:
Set the temperature of the atmosphere between the scene and the camera. Supported only by Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
float temperatureThe assumed temperature of the atmosphere between the camera and the scene, can be between -50 and 327.67 degrees Celsius.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodsetThermalAtmosphericTransmissionCoefficient
method setThermalAtmosphericTransmissionCoefficient
void setThermalAtmosphericTransmissionCoefficient(final float coefficient,                                                            @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_ATMOSPHERIC_TEMPERATURE
Description:
Set the transmission coefficient of the atmosphere between the scene and the camera. Supported only by Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
final float coefficientThe desired atmospheric temperature, can be between 50 and 100.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Background TemperaturemethodsetThermalBackgroundTemperature
method setThermalBackgroundTemperature
void setThermalBackgroundTemperature(final float temperature, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_BACKGROUND_TEMPERATURE
Description:
Set the assumed temperature reflected by the background of the scene, can be between -50 and 327.67 degrees Celsius. Supported only by Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
final float temperatureThe desired background reflected temperature.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Scene EmissivitymethodsetThermalSceneEmissivity
method setThermalSceneEmissivity
void setThermalSceneEmissivity(final float emissivity, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_SCENE_EMISSIVITY
Description:
Set the emissivity of the thermal scene, can be between 50 and 100. Supported only by Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
final float emissivityThe desired scene emissivity.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
WindowsmethodsetThermalWindowReflection
method setThermalWindowReflection
void setThermalWindowReflection(final float reflection, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_WINDOW_REFLECTION
Description:
Set assumed window reflection coefficient, can be between 0 and X where X is the window transmission coefficient parameter. Supported only by Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
final float reflectionThe desired window reflection coefficient.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodsetThermalWindowReflectedTemperature
method setThermalWindowReflectedTemperature
void setThermalWindowReflectedTemperature(final float temperature,                                                    @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_WINDOW_REFLECTED_TEMPERATURE
Description:
Set the temperature reflected in the window, can be between -50 and 327.67 degrees Celsius. Supported only by Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
final float temperatureThe desired window reflected temperature.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodsetThermalWindowTemperature
method setThermalWindowTemperature
void setThermalWindowTemperature(final float temperature, @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_WINDOW_TEMPERATURE
Description:
Set the window temperature, can be between -50 and 327.67 degrees Celsius. Supported only by Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
final float temperatureThe desired window temperature.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodsetThermalWindowTransmissionCoefficient
method setThermalWindowTransmissionCoefficient
void setThermalWindowTransmissionCoefficient(final float coefficient,                                                       @Nullable final CompletionCallback callback)
Package:dji.sdk.cameraSDK Key:CameraKey.THERMAL_WINDOW_TRANSMISSION_COEFFICIENT
Description:
Set the window transmission coefficient, can be between 50 and 100-X where X is the window reflection. Supported only by Zenmuse XT containing Advanced Radiometry capabilities. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
final float coefficientThe desired window transmission coefficient.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Temperature UnitmethodsetThermalTemperatureUnit
method setThermalTemperatureUnit
void setThermalTemperatureUnit(final SettingsDefinitions.TemperatureUnit temperatureUnit, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the temperature unit. Only supported by XT2 and Mavic 2 Enterprise Dual. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
final SettingsDefinitions.TemperatureUnit temperatureUnitAn enum value of TemperatureUnit.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetThermalTemperatureUnit
method getThermalTemperatureUnit
void getThermalTemperatureUnit(final CompletionCallbackWith<SettingsDefinitions.TemperatureUnit> callback)
Package:dji.sdk.camera
Description:
Gets the temperature unit. Only supported by XT2 and Mavic 2 Enterprise Dual Thermal camera. For Zenmuse H20T and H20N, please use class Lens.
Input Parameters:
final CompletionCallbackWith<SettingsDefinitions.TemperatureUnit> callbackThe execution callback with the returned execution result.
Display ModemethodsetDisplayMode
method setDisplayMode
void setDisplayMode(final SettingsDefinitions.DisplayMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the display mode to coordinate the video feeds from both the visual camera and the thermal camera. Only supported by XT2 camera and Mavic 2 Enterprise Dual Thermal Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
final SettingsDefinitions.DisplayMode modeThe display mode to set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetDisplayMode
method getDisplayMode
void getDisplayMode(@NonNull final CompletionCallbackWith<SettingsDefinitions.DisplayMode> callback)
Package:dji.sdk.camera
Description:
Gets the display mode. The display mode determine the way to coordinate the video feeds from both the visual camera and the thermal camera. Only supported by XT2 camera and Mavic 2 Enterprise Dual Thermal Camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<SettingsDefinitions.DisplayMode> callbackThe execution callback with the returned execution result.
PIP PositionmethodsetPIPPosition
method setPIPPosition
void setPIPPosition(final SettingsDefinitions.PIPPosition position, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Set the Picture in picture mode of XT2 camera.For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
final SettingsDefinitions.PIPPosition positionCould be one of the Enum "SettingsDefinitions.PIPPosition"@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetPIPPosition
method getPIPPosition
void getPIPPosition(@NonNull final CompletionCallbackWith<SettingsDefinitions.PIPPosition> callback)
Package:dji.sdk.camera
Description:
Get picture in picture mode of XT2 camera. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<SettingsDefinitions.PIPPosition> callbackThe execution callback with the returned execution result.
MSX LevelmethodsetMSXLevel
method setMSXLevel
void setMSXLevel(@IntRange(from = 0, to = 100) int level, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the level for MSX display mode. The range for level is [0, 100]. When it is 0, the visible spectrum definition is invisible. When it is 100, the visual spectrum definition is the most obvious. Only supported by XT2 camera and Mavic 2 Enterprise Dual. Mavic 2 Enterprise Dual does not support with firmware version lower than 01.01.0520. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@IntRange(from = 0, to = 100) int levelThe MSX level to set with range [0, 100].@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetMSXLevel
method getMSXLevel
void getMSXLevel(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.camera
Description:
Gets the level for MSX display mode. The range for level is [0, 100]. When it is 0, the visible spectrum definition is invisible. When it is 100, the visual spectrum definition is the most obvious. Only supported by XT2 camera and Mavic 2 Enterprise Dual. Mavic 2 Enterprise Dual does not support with firmware version lower than 01.01.0520. For Zenmuse H20 Series and Mavic 2 Enterprise Advanced, please use class Lens.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned execution result.
Dual Feed Vertical AlignmentmethodsetDualFeedVerticalAlignmentOffset
method setDualFeedVerticalAlignmentOffset
void setDualFeedVerticalAlignmentOffset(@IntRange(from = -40, to = 40) int offset, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the vertical alignment offset between the video feeds from both the visual camera and the thermal camera. The alignment is applied to the MSX display mode. Different camera results in different value ranges. For XT2 camera, the valid range is [-8, 8]. For Mavic 2 Enterprise Dual, the valid range is [-40, 40]. Positive value will move the thermal window up. Use this setting to fine-tune the performance of MSX display mode and the align PIP mode. Only supported by XT2 camera and Mavic 2 Enterprise Dual.
Input Parameters:
@IntRange(from = -40, to = 40) int offsetRange from -8 to 8 for XT2, from -40 to 40 for Mavic 2 Enterprise Dual.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetDualFeedVerticalAlignmentOffset
method getDualFeedVerticalAlignmentOffset
void getDualFeedVerticalAlignmentOffset(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.camera
Description:
Gets the vertical alignment offset between the video feeds from both the visual camera and the thermal camera. The alignment is applied to the MSX display mode. Different camera results in different value ranges. For XT2 camera, the valid range is [-8, 8]. For Mavic 2 Enterprise Dual, the valid range is [-40, 40]. Positive value will move the thermal window up. Only supported by XT2 camera and Mavic 2 Enterprise Dual camera.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned execution result.
Dual Feed Horizontal AlignmentmethodsetDualFeedHorizontalAlignmentOffset
method setDualFeedHorizontalAlignmentOffset
void setDualFeedHorizontalAlignmentOffset(@IntRange(from = -100, to = 100) int offset, @Nullable final CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the horizontal alignment offset between the video feeds from both the visual camera and the thermal camera. The alignment is applied to the MSX display mode. Different camera results in different value ranges. For XT2 camera, the valid range is [-100, 100]. For Mavic 2 Enterprise Dual, the valid range is [-40, 40]. Positive value will move the thermal window to the right. Use this setting to fine-tune the performance of MSX display mode and the align PIP mode. Only supported by XT2 camera and Mavic 2 Enterprise Dual.
Input Parameters:
@IntRange(from = -100, to = 100) int offsetRange from -100 to 100 for XT2, from -40 to 40 for Mavic 2 Enterprise Dual.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetDualFeedHorizontalAlignmentOffset
method getDualFeedHorizontalAlignmentOffset
void getDualFeedHorizontalAlignmentOffset(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.camera
Description:
Gets the horizontal alignment offset between the video feeds from both the visual camera and the thermal camera. The alignment is applied to the MSX display mode. Different camera results in different value ranges. For XT2 camera, the valid range is [-100, 100]. For Mavic 2 Enterprise Dual, the valid range is [-40, 40]. Positive value will move the thermal window to the right. Only supported by XT2 camera and Mavic 2 Enterprise Dual.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned execution result.
Multi Lenses
Check MultiLens Camera SupportedmethodisMultiLensCameraSupported
method isMultiLensCameraSupported
boolean isMultiLensCameraSupported()
Package:dji.sdk.camera
Description:
Determines if the camera supports the multiple lens.
Return:
booleantrue if the multiple lens is supported.
Check Support Multi Video Stream SourcemethodisMultiVideoStreamSourceSupported
method isMultiVideoStreamSourceSupported
boolean isMultiVideoStreamSourceSupported()
Package:dji.sdk.camera
Description:
Determines whether the camera supports multi video stream source or not.
Return:
booleanA boolean value.
Set Camera Video Stream SourcemethodsetCameraVideoStreamSource
method setCameraVideoStreamSource
void setCameraVideoStreamSource(@NonNull CameraVideoStreamSource cameraVideoStreamSource, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the camera video stream source. For multi-lens cameras, the camera stream has different sources. CameraVideoStreamSource is used to represents the camera video stream source. When the source of the camera video stream is set, the current live view stream will also been changed to corresponding source. It is only supported by Zenmuse H20 Series.
Input Parameters:
@NonNull CameraVideoStreamSource cameraVideoStreamSourceThe camera video stream source.@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the returned value(s).
Get Camera Video Stream SourcemethodgetCameraVideoStreamSource
method getCameraVideoStreamSource
void getCameraVideoStreamSource(@NonNull final CommonCallbacks.CompletionCallbackWith<CameraVideoStreamSource> callback)
Package:dji.sdk.camera
Description:
Gets the camera video stream source. For multi-lens cameras, the camera stream has different sources. CameraVideoStreamSource is used to represents the camera video stream source. When the source of the camera video stream is set, the image transmission will also been changed to corresponding source. It is only supported by Zenmuse H20 series.
Input Parameters:
@NonNull final CommonCallbacks.CompletionCallbackWith<CameraVideoStreamSource> callbackThe execution callback with the returned value(s).
Capture Camera Stream SettingsmethodsetCaptureCameraStreamSettings
method setCaptureCameraStreamSettings
void setCaptureCameraStreamSettings(@NonNull CameraStreamSettings streamSettings, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
By default, all lenses of this camera will take photos. by using this interface, you can select your interested lens to take photos. Before calling this interface, you should set the camera mode to photo mode. Only supported by Zenmuse H20 series.
Input Parameters:
@NonNull CameraStreamSettings streamSettingsAn object of CameraStreamSettings.@Nullable final CommonCallbacks.CompletionCallback callbackCallback that receives the setter execution result.
methodgetCaptureCameraStreamSettings
method getCaptureCameraStreamSettings
void getCaptureCameraStreamSettings(@NonNull final CommonCallbacks.CompletionCallbackWith<CameraStreamSettings> callback)
Package:dji.sdk.camera
Description:
Gets the capture camera stream settings for taking photo. Only supported by Zenmuse H20 series.
Input Parameters:
@NonNull final CommonCallbacks.CompletionCallbackWith<CameraStreamSettings> callbackCallback to receive the result.
Record Camera Stream SettingsmethodsetRecordCameraStreamSettings
method setRecordCameraStreamSettings
void setRecordCameraStreamSettings(@NonNull CameraStreamSettings streamSettings, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the camera stream settings for recording video. When recording video, it will been determined whether if current screen is recorded and which camera stream sources are recorded according the camera settings. The class of CameraStreamSettings is used to set the camera stream settings. Before calling this interface, you should set the camera mode to video mode. Only supported by Zenmuse H20 series.
Input Parameters:
@NonNull CameraStreamSettings streamSettingsAn object of CameraStreamSettings.@Nullable final CommonCallbacks.CompletionCallback callbackCallback that receives the setter execution result.
methodgetRecordCameraStreamSettings
method getRecordCameraStreamSettings
void getRecordCameraStreamSettings(@NonNull final CommonCallbacks.CompletionCallbackWith<CameraStreamSettings> callback)
Package:dji.sdk.camera
Description:
Gets the capture camera stream settings for recording video. Only supported by Zenmuse H20 series.
Input Parameters:
@NonNull final CommonCallbacks.CompletionCallbackWith<CameraStreamSettings> callbackCallback to receive the result.
Multispectral Camera
Multispectral Display ModemethodsetMultispectralDisplayMode
method setMultispectralDisplayMode
void setMultispectralDisplayMode(SettingsDefinitions.MultispectralDisplayMode displayMode, @Nullable CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the display mode to coordinate the video feeds from both the RGB sensor and single-band sensors. Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
SettingsDefinitions.MultispectralDisplayMode displayModeThe display mode to set.@Nullable CommonCallbacks.CompletionCallback callbackCallback that receives the setter execution result.
methodgetMultispectralDisplayMode
method getMultispectralDisplayMode
void getMultispectralDisplayMode(@NonNull CommonCallbacks.CompletionCallbackWith<SettingsDefinitions.MultispectralDisplayMode> callback)
Package:dji.sdk.camera
Description:
Gets the display mode. The display mode determines the way to coordinate the video feeds from both the RGB sensor and single-band sensors. Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
@NonNull CommonCallbacks.CompletionCallbackWith<SettingsDefinitions.MultispectralDisplayMode> callbackCallback to receive the result.
Multispectral Storage Photo SettingsmethodsetMultispectralStoragePhotoSettings
method setMultispectralStoragePhotoSettings
void setMultispectralStoragePhotoSettings(MultispectralStoragePhotoSettings settings, @Nullable CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the storage settings for the multispectral camera. The settings control if the photos created by different sensors will be saved or not. Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
MultispectralStoragePhotoSettings settingsAn object of MultispectralStoragePhotoSettings.@Nullable CommonCallbacks.CompletionCallback callbackCallback to receive the setter result.
methodgetMultispectralStoragePhotoSettings
method getMultispectralStoragePhotoSettings
void getMultispectralStoragePhotoSettings(@NonNull CommonCallbacks.CompletionCallbackWith<MultispectralStoragePhotoSettings> callback)
Package:dji.sdk.camera
Description:
Gets the storage settings for the multispectral camera. Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
@NonNull CommonCallbacks.CompletionCallbackWith<MultispectralStoragePhotoSettings> callbackCallback to receive the getter result.
Multispectral Metering ModemethodsetMultispectralMeteringMode
method setMultispectralMeteringMode
void setMultispectralMeteringMode(SettingsDefinitions.MeteringMode mode, @Nullable CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the metering mode for the single-band sensors on the multispectral camera. The same metering mode will be applied to all single-band sensors (sensors except the RGB one). Only CENTER and AVERAGE mode to be set. Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
SettingsDefinitions.MeteringMode modeExposure metering to set.@Nullable CommonCallbacks.CompletionCallback callbackCallback to receive the result.
methodgetMultispectralMeteringMode
method getMultispectralMeteringMode
void getMultispectralMeteringMode(@NonNull CommonCallbacks.CompletionCallbackWith<SettingsDefinitions.MeteringMode> callback)
Package:dji.sdk.camera
Description:
Gets the metering mode for all single-band sensors (sensors except the RGB one). Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
@NonNull CommonCallbacks.CompletionCallbackWith<SettingsDefinitions.MeteringMode> callbackCallback to receive the result.
Multispectral Exposure ModemethodsetMultispectralExposureMode
method setMultispectralExposureMode
void setMultispectralExposureMode(SettingsDefinitions.ExposureMode mode, @Nullable CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the exposure mode for the single-band sensors on the multispectral camera. The same exposure mode will be applied to all single-band sensors (sensors except the RGB one). Exposure mode must be PROGRAM or SHUTTER_PRIORITY. Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
SettingsDefinitions.ExposureMode modeCamera exposure mode to set.@Nullable CommonCallbacks.CompletionCallback callbackRemote execution result error block.
methodgetMultispectralExposureMode
method getMultispectralExposureMode
void getMultispectralExposureMode(@NonNull CommonCallbacks.CompletionCallbackWith<SettingsDefinitions.ExposureMode> callback)
Package:dji.sdk.camera
Description:
Gets the exposure mode for all single-band sensors (sensors except the RGB one). Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
@NonNull CommonCallbacks.CompletionCallbackWith<SettingsDefinitions.ExposureMode> callbackCallback to receive the result.
methodsetMultispectralExposureCompensation
method setMultispectralExposureCompensation
void setMultispectralExposureCompensation(SettingsDefinitions.ExposureCompensation compensation, @Nullable CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the exposure compensation for the single-band sensors on the multispectral camera. The same exposure compensation will be applied to all single-band sensors (sensors except the RGB one). See ExposureCompensation to view all possible exposure compensations to which the single-band sensors can be set. In order to use this function, set the camera exposure mode to PROGRAM or SHUTTER_PRIORITY Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
SettingsDefinitions.ExposureCompensation compensationExposure compensation value to be set for the single-band sensors's.@Nullable CommonCallbacks.CompletionCallback callbackCallback to receive the result.
Multispectral Exposure CompensationmethodgetMultispectralExposureCompensation
method getMultispectralExposureCompensation
void getMultispectralExposureCompensation(@NonNull CommonCallbacks.CompletionCallbackWith<SettingsDefinitions.ExposureCompensation> callback)
Package:dji.sdk.camera
Description:
Gets the exposure compensation for all single-band sensors (sensors except the RGB one). Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
@NonNull CommonCallbacks.CompletionCallbackWith<SettingsDefinitions.ExposureCompensation> callbackCallback to receive the result.
Multispectral Shutter SpeedmethodsetMultispectralShutterSpeed
method setMultispectralShutterSpeed
void setMultispectralShutterSpeed(SettingsDefinitions.ShutterSpeed shutterSpeed, @Nullable CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Sets the shutter speed for the single-band sensors on the multispectral camera. The same shutter speed will be applied to all single-band sensors (sensors except the RGB one). To see all available shutter speed value settings, see ShutterSpeed. The shutter speed should not be set slower than the video frame rate when the camera's mode is RECORD_VIDEO. For example, if the video frame rate is 30fps, the shutter speed must be <= 1/30. Precondition: The shutter speed can be set only when the camera exposure mode is SHUTTER_PRIORITY mode. Only supported by multispectral camera of P4 Multispectral.
Input Parameters:
SettingsDefinitions.ShutterSpeed shutterSpeedShutter speed value to be set for the single-band sensors. For all available values shutterSpeed can be set to, please check ShutterSpeed. <br> The shutter speed should not be set slower than the video frame rate when the camera's mode is RECORD_VIDEO. For example, if the video frame rate = 30fps, then the shutterSpeed must be <= 1/30.@Nullable CommonCallbacks.CompletionCallback callbackRemote execution result error block.
methodgetMultispectralShutterSpeed
method getMultispectralShutterSpeed
void getMultispectralShutterSpeed(@NonNull CommonCallbacks.CompletionCallbackWith<SettingsDefinitions.ShutterSpeed> callback)
Package:dji.sdk.camera
Description:
Gets the shutter speed for all single-band sensors (sensors except the RGB one). The shutter speed is only available when the camera exposure mode is SHUTTER_PRIORITY mode.
Input Parameters:
@NonNull CommonCallbacks.CompletionCallbackWith<SettingsDefinitions.ShutterSpeed> callbackCallback to receive the result.
Multispectral AE LockmethodsetMultispectralAELock
method setMultispectralAELock
void setMultispectralAELock(boolean isLocked, @Nullable CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Locks or unlocks the single-band sensors on the multispectral camera AELock AE (auto exposure). The same lock state will be applied to all single-band sensors (sensors except the RGB one).
Input Parameters:
boolean isLockedtrue if the the single-band sensors AE is locked, false if it is unlocked.@Nullable CommonCallbacks.CompletionCallback callbackThe execution callback with the returned execution result.
methodgetMultispectralAELock
method getMultispectralAELock
void getMultispectralAELock(@NonNull CommonCallbacks.CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.camera
Description:
Determines if all the single-band (sensors except the RGB one) sensors on the multispectral camera AE (auto exposure) is locked.
Input Parameters:
@NonNull CommonCallbacks.CompletionCallbackWith<Boolean> callbackCallback to receive the result.
Camera Calibration
Camera Calibrate StateenumDJICameraCalibrateState
enum DJICameraCalibrateState
enum DJICameraCalibrateState
Package:dji.common.camera
Description:
The calibration status of the camera's lens.
Enum Members:
NOT_CALIBRATEIf the camera lenses are not calibrated. Focusing action will be influenced. Please use calibration interface if you need.CALIBRATEDCamera lens calibrated. Do not need to calibrate.CALIBRATINGCalibration is in progress.WAITING_FOR_CALIBRATEWaiting for the calibration.OTHERThe camera lens's state is unknown.
Class Members:
Camera Calibrate ResultenumDJICameraCalibrateResult
enum DJICameraCalibrateResult
enum DJICameraCalibrateResult
Package:dji.common.camera
Description:
The calibration result of the camera's lens.
Enum Members:
IDLENo calibration.COMPLETEDThe calibration is successful.FAIL_NORMALThe calibration is failed. Please retry.DATA_ERRORThe calibration is failed because of the data error. Please retry.OTHERThe calibration is failed with the unknown error.
Class Members:
Calibration callbackclassCalibrationCallbackStart CalibarationmethodstartCalibration
method startCalibration
void startCalibration(@NonNull CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
If you encounter the following situation, please call this interface for camera calibration. Only supported by Zemmuse P1. 1. Zemmuse P1 supports the replacement of a variety of fixed focus lenses, so when the lens is replaced, it is recommended that you recalibrate.  2. Please listen the OnStateUpdate, if the status is NOT_CALIBRATE, please recalibrate.  3. Please listen the hms error code, If you listen to the following error code, please recalibrate.  ¬†¬†¬†¬†¬†¬† hms_0x1C000D02: The camera calibration file failed to load, please perform infinity calibration. ¬†¬†¬†¬†¬†¬† hms_0x1C000D03: Infinity focus calibration data expired. Recalibrate.  ¬†¬†¬†¬†¬†¬† hms_0x1C000D04: Infinity focus calibration data expired. Recalibrate.  The following are the calibration steps:  1. Take off and ascend to 102 meters (335ft) or higher to start calibration. Fly with caution.  2. Call startCalibration interface. The state will change to WAITING_FOR_CALIBRATE. 3. Set gimbal angle as -90 degrees(perpendicular to the ground). Call setFocusTarget interface to set the object with multiple distinct visual patterns at the center of the camera view as focus. Then the state will change to CALIBRATING.  4. After finish the calibration, the state will change to CALIBRATED. You can use DJICameraCalibrateResult to listen the calibration result.
Input Parameters:
@NonNull CommonCallbacks.CompletionCallback callbackThe execution callback with the returned value(s).
Stop CalibarationmethodstopCalibration
method stopCalibration
void stopCalibration(@NonNull CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Stop camera calibraion.
Input Parameters:
@NonNull CommonCallbacks.CompletionCallback callbackThe execution callback with the returned value(s).
Infinity FocusmethodcalibratedInfinityFocus
method calibratedInfinityFocus
void calibratedInfinityFocus(@NonNull CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.camera
Description:
Make sure you have calibrated the lens' infinity focusing with startCalibration. When in use, the lens uses infinity focus as calibrated. To help ensure focusing accuracy, recalibrate the infinity focus when there is a large temperature difference between the mission environment and the calibration environment (>15 degrees Celsius).
Input Parameters:
@NonNull CommonCallbacks.CompletionCallback callbackThe execution callback with the returned value(s).
Inherited Methods:
dji.sdk.base.BaseComponentmethodsetComponentListener
method setComponentListener
void setComponentListener(ComponentListener listener)
Package:dji.sdk.base
Description:
Sets the listener for the DJI component.
Input Parameters:
ComponentListener listenerThe callback of ComponentListener.
methodgetIndex
method getIndex
int getIndex()
Package:dji.sdk.base
Description:
Returns the component index. Index is zero based. A component will have an index greater than zero when there  are multiple components of the same type on the DJI product, and one of the components already has the index 0.  For instance, M210 can have two gimbal mounted cameras, and will therefore have two gimbal components with indices  0 and 1, and two camera components with indices 0 and 1. For Matrice 600, there are printed numbers on the battery  boxes. The Battery component instance with index 0 corresponds to battery compartment number 1. For Inspire 2  and M200 series, Battery with index 0 corresponds to the battery on the port (left hand) side of the aircraft.  For M210, M210 RTK, M300 RTK and M350 RTK, Camera and Gimbal with index 0 corresponds to the camera and gimbal on the port  (left hand) side of the aircraft. Lidar with index 0 corresponds to the lidar(Zenmuse L1) on the port  (left hand) side of the aircraft.
Return:
intAn int value of index.
methodisConnected
method isConnected
boolean isConnected()
Package:dji.sdk.base
Description:
true if the component is connected.
Return:
booleantrue if the component is connected.
methodgetSerialNumber
method getSerialNumber
void getSerialNumber(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Gets the serial number of the component. Depending on the component, this serial number might not match the serial number found  on the physical component.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value returned.
methodgetFirmwareVersion
method getFirmwareVersion
void getFirmwareVersion(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Returns the firmware version of the component. Each component will  have a different firmware version, the combination of which will  form the package firmware version getFirmwarePackageVersion found in BaseProduct.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value(s) returned.
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ voidgetWatermarkSettings
  ‚Ä¢ getISO
  ‚Ä¢ voidgetAudioGain
  ‚Ä¢ getShootPhotoMode
  ‚Ä¢ voidgetFocusRingValue
  ‚Ä¢ getDigitalZoomFactor
  ‚Ä¢ setHybridZoomFocalLength
  ‚Ä¢ getThermalMeteringArea
  ‚Ä¢ voidloadSettingsFromProfile
  ‚Ä¢ setPhotoAspectRatio
  ‚Ä¢ voidsetHDLiveViewEnabled
  ‚Ä¢ setStorageStateCallBack
  ‚Ä¢ setExposureCompensation
  ‚Ä¢ isDigitalZoomSupported
  ‚Ä¢ files
  ‚Ä¢ voidsetAutoAEUnlockEnabled
  ‚Ä¢ voidsetThermalMeteringArea
  ‚Ä¢ setMeteringMode
  ‚Ä¢ versions
  ‚Ä¢ voidsetLinkZoomEnabled
  ‚Ä¢ triggerThermalFFC
  ‚Ä¢ voidgetVideoFileFormat
  ‚Ä¢ correction
  ‚Ä¢ voidgetAudioRecordingEnabled
  ‚Ä¢ setRecordCameraStreamSettings
  ‚Ä¢ stopShootPhoto
  ‚Ä¢ voidsetStorageStateCallBack
  ‚Ä¢ setVideoStandard
  ‚Ä¢ getOpticalZoomSpec
  ‚Ä¢ voidstartShootPhoto
  ‚Ä¢ setSSDColor
  ‚Ä¢ voidsetPhotoAEBCount
  ‚Ä¢ getVisionStabilizationEnabled
  ‚Ä¢ bracketing
  ‚Ä¢ isMechanicalShutterSupported
  ‚Ä¢ voidsetDefogEnabled
  ‚Ä¢ voidgetSSDClipFileName
  ‚Ä¢ voidsetThermalDDE
  ‚Ä¢ setAutoAEUnlockEnabled
  ‚Ä¢ setComponentListener
  ‚Ä¢ setEIColor
  ‚Ä¢ booleanisFlatCameraModeSupported
  ‚Ä¢ voidgetPIPPosition
  ‚Ä¢ voidsetThermalBackgroundTemperature
  ‚Ä¢ setMultispectralExposureStateCallback
  ‚Ä¢ getThermalContrast
  ‚Ä¢ booleanisConnected
  ‚Ä¢ voidsetTimeLapsePreviewCallback
  ‚Ä¢ voidgetPhotoPanoramaMode
  ‚Ä¢ booleanisEIModeSupported
  ‚Ä¢ voidsetFocusTarget
  ‚Ä¢ voidgetExposureSensitivityMode
  ‚Ä¢ voidgetPhotoRAWBurstCount
  ‚Ä¢ setPhotoPanoramaMode
  ‚Ä¢ voidsetDewarpingEnabled
  ‚Ä¢ setThermalIsothermEnabled
  ‚Ä¢ voidsetMultispectralExposureCompensation
  ‚Ä¢ Optimization
  ‚Ä¢ voidgetFileIndexMode
  ‚Ä¢ voidsetThermalIsothermEnabled
  ‚Ä¢ booleanisMultiVideoStreamSourceSupported
  ‚Ä¢ setPhotoFileFormat
  ‚Ä¢ voidgetSSDColor
  ‚Ä¢ voidsetExposureSettingsCallback
  ‚Ä¢ voidsetWatermarkSettings
  ‚Ä¢ voidsetAperture
  ‚Ä¢ voidgetThermalProfile
  ‚Ä¢ setThermalMeasurementMode
  ‚Ä¢ voidstopShootPhoto
  ‚Ä¢ getThermalIsothermMiddleValue
  ‚Ä¢ voidgetHighQualityPreviewEnabled
  ‚Ä¢ setMultispectralDisplayMode
  ‚Ä¢ setFlatMode
  ‚Ä¢ voidsetMediaFileCallback
  ‚Ä¢ setAntiFlickerFrequency
  ‚Ä¢ activateSSDVideoLicense
  ‚Ä¢ voidgetTapZoomMultiplier
  ‚Ä¢ file
  ‚Ä¢ band
  ‚Ä¢ setThermalMeteringArea
  ‚Ä¢ getThermalSSO
  ‚Ä¢ getEIRange
  ‚Ä¢ voidgetThermalIsothermMiddleValue
  ‚Ä¢ voidgetThermalIsothermEnabled
  ‚Ä¢ setThermalWindowTemperature
  ‚Ä¢ picture
  ‚Ä¢ voidsetFocusStateCallback
  ‚Ä¢ booleanisSSDSupported
  ‚Ä¢ voidexitPlayback
  ‚Ä¢ setFocusRingValue
  ‚Ä¢ voidgetFocusAssistantSettings
  ‚Ä¢ getMultispectralStoragePhotoSettings
  ‚Ä¢ getLinkZoomEnabled
  ‚Ä¢ setAutoLockGimbalEnabled
  ‚Ä¢ setDisplayMode
  ‚Ä¢ stopRecordVideo
  ‚Ä¢ setSDCardStateCallBack
  ‚Ä¢ environment
  ‚Ä¢ voidgetHDLiveViewEnabled
  ‚Ä¢ setIRFilterEnabled
  ‚Ä¢ voidgetAutoAEUnlockEnabled
  ‚Ä¢ voidsetOpticalZoomFocalLength
  ‚Ä¢ setMode
  ‚Ä¢ dewarping
  ‚Ä¢ setPhotoAEBCount
  ‚Ä¢ setVideoCaptionEnabled
  ‚Ä¢ voidgetDigitalZoomFactor
  ‚Ä¢ isCaptureInVideoSupported
  ‚Ä¢ tapZoomAtTarget
  ‚Ä¢ getRecommendedEI
  ‚Ä¢ getHistogramEnabled
  ‚Ä¢ IntRange
  ‚Ä¢ voidgetPhotoFileFormat
  ‚Ä¢ voidsetEIColor
  ‚Ä¢ FloatRange
  ‚Ä¢ voidgetSSDLegacyColor
  ‚Ä¢ booleanisPlaybackSupported
  ‚Ä¢ setThermalBrightness
  ‚Ä¢ setMechanicalShutterEnabled
  ‚Ä¢ getSpotMeteringTarget
  ‚Ä¢ voidgetTapZoomEnabled
  ‚Ä¢ formatSDCard
  ‚Ä¢ voidsetComponentListener
  ‚Ä¢ balance
  ‚Ä¢ voidstopRecordVideo
  ‚Ä¢ voidgetPhotoQuickViewDuration
  ‚Ä¢ voidgetThermalMeasurementMode
  ‚Ä¢ setMediaFileCustomInformation
  ‚Ä¢ setSaturation
  ‚Ä¢ getPhotoTimeIntervalSettings
  ‚Ä¢ voidgetVideoStandard
  ‚Ä¢ voidsetShutterSpeed
  ‚Ä¢ sensors
  ‚Ä¢ getPIPPosition
  ‚Ä¢ setOpticalZoomFocalLength
  ‚Ä¢ setMultispectralExposureMode
  ‚Ä¢ voidsetMultispectralStoragePhotoSettings
  ‚Ä¢ voidgetThermalSSO
  ‚Ä¢ Enhancement
  ‚Ä¢ getAutoAEUnlockEnabled
  ‚Ä¢ getEI
  ‚Ä¢ getOpticalZoomFocalLength
  ‚Ä¢ getMultispectralMeteringMode
  ‚Ä¢ voidgetFocusRingValueUpperBound
  ‚Ä¢ setExposureMode
  ‚Ä¢ voidsetPIPPosition
  ‚Ä¢ setThermalSpotMeteringTargetPoint
  ‚Ä¢ voidgetNDFilterMode
  ‚Ä¢ voidgetAntiFlickerFrequency
  ‚Ä¢ voidsetNewGeneratedMediaFileInfoCallback
  ‚Ä¢ setPhotoRAWBurstCount
  ‚Ä¢ getEIColor
  ‚Ä¢ getFocusRingValue
  ‚Ä¢ voidgetShootPhotoMode
  ‚Ä¢ voidgetPhotoBurstCount
  ‚Ä¢ voidgetEIRange
  ‚Ä¢ voidsetThermalIsothermUnit
  ‚Ä¢ setThermalAtmosphericTemperature
  ‚Ä¢ getExposureMode
  ‚Ä¢ getThermalFFCMode
  ‚Ä¢ isSSDSupported
  ‚Ä¢ setAperture
  ‚Ä¢ voidsetThermalGainMode
  ‚Ä¢ MediaManagergetMediaManager
  ‚Ä¢ getSSDClipFileName
  ‚Ä¢ setWatermarkSettings
  ‚Ä¢ voidsetDigitalZoomFactor
  ‚Ä¢ getCustomExpandDirectoryName
  ‚Ä¢ voidsetTurnOffFanWhenPossible
  ‚Ä¢ lidar
  ‚Ä¢ voidsetThermalWindowReflection
  ‚Ä¢ getCustomExpandFileName
  ‚Ä¢ setTapZoomStateCallback
  ‚Ä¢ palettes
  ‚Ä¢ getIndex
  ‚Ä¢ getExposureCompensation
  ‚Ä¢ getSSDVideoResolutionAndFrameRate
  ‚Ä¢ stopCalibration
  ‚Ä¢ getThermalROI
  ‚Ä¢ setDewarpingEnabled
  ‚Ä¢ voidformatSDCard
  ‚Ä¢ setSuperResolutionInfoCallback
  ‚Ä¢ voidsetOrientation
  ‚Ä¢ getAELock
  ‚Ä¢ voidgetOpticalZoomFactor
  ‚Ä¢ getContrast
  ‚Ä¢ voidstopContinuousOpticalZoom
  ‚Ä¢ getPhotoTimeLapseSettings
  ‚Ä¢ booleanisTimeLapseSupported
  ‚Ä¢ voidsetMechanicalShutterEnabled
  ‚Ä¢ setSystemStateCallback
  ‚Ä¢ getThermalTemperatureUnit
  ‚Ä¢ setExposureSensitivityMode
  ‚Ä¢ setStorageLocation
  ‚Ä¢ voidsetFlatMode
  ‚Ä¢ booleanisMediaDownloadModeSupported
  ‚Ä¢ initSensorCleaningMode
  ‚Ä¢ setThermalSSO
  ‚Ä¢ voidgetFocusMode
  ‚Ä¢ loadSettingsFromProfile
  ‚Ä¢ getLensInformation
  ‚Ä¢ getBeaconAutoTurnOffEnabled
  ‚Ä¢ setLaserEnabled
  ‚Ä¢ setFocusStateCallback
  ‚Ä¢ setISO
  ‚Ä¢ Correction
  ‚Ä¢ getAperture
  ‚Ä¢ isHybridZoomSupported
  ‚Ä¢ voidsetThermalContrast
  ‚Ä¢ voidsetThermalWindowTemperature
  ‚Ä¢ voidsetCameraVideoStreamSource
  ‚Ä¢ isTimeLapseSupported
  ‚Ä¢ getMediaFileCustomInformation
  ‚Ä¢ focus
  ‚Ä¢ voidexitSensorCleaningMode
  ‚Ä¢ voidsetCaptureCameraStreamSettings
  ‚Ä¢ setTapZoomMultiplier
  ‚Ä¢ voidsetAudioRecordingEnabled
  ‚Ä¢ voidsetThermalACE
  ‚Ä¢ voidgetMechanicalShutterEnabled
  ‚Ä¢ getIRFilterEnabled
  ‚Ä¢ version
  ‚Ä¢ getThermalIsothermUnit
  ‚Ä¢ voidsetThermalSceneEmissivity
  ‚Ä¢ getDualFeedHorizontalAlignmentOffset
  ‚Ä¢ voidgetVisionStabilizationEnabled
  ‚Ä¢ getPhotoAEBCount
  ‚Ä¢ voidgetLiveviewLocationWithGPS
  ‚Ä¢ CapabilitiesgetCapabilities
  ‚Ä¢ voidgetEI
  ‚Ä¢ booleanisInternalStorageSupported
  ‚Ä¢ voidstartRecordVideo
  ‚Ä¢ voidsetThermalBrightness
  ‚Ä¢ setAELock
  ‚Ä¢ booleanisMechanicalShutterSupported
  ‚Ä¢ getThermalMeasurementMode
  ‚Ä¢ voidgetExposureCompensation
  ‚Ä¢ voidsetAudioGain
  ‚Ä¢ getWhiteBalance
  ‚Ä¢ voidsetTapZoomEnabled
  ‚Ä¢ voidgetCameraVideoStreamSource
  ‚Ä¢ voidgetHybridZoomSpec
  ‚Ä¢ voidtapZoomAtTarget
  ‚Ä¢ voidgetSSDVideoLicenses
  ‚Ä¢ getThermalIsothermUpperValue
  ‚Ä¢ parameters
  ‚Ä¢ enterPlayback
  ‚Ä¢ getPhotoAspectRatio
  ‚Ä¢ getCameraVideoStreamSource
  ‚Ä¢ getMediaManager
  ‚Ä¢ getThermalSpotMeteringTargetPoint
  ‚Ä¢ voidgetSSDVideoLicense
  ‚Ä¢ change
  ‚Ä¢ isNDFilterModeSupported
  ‚Ä¢ voidsetSSDStateCallback
  ‚Ä¢ voidgetHistogramEnabled
  ‚Ä¢ stopContinuousOpticalZoom
  ‚Ä¢ voidgetMultispectralExposureCompensation
  ‚Ä¢ voidgetThermalDigitalZoomFactor
  ‚Ä¢ setPhotoBurstCount
  ‚Ä¢ setThermalCustomExternalSceneSettingsProfile
  ‚Ä¢ voidgetSerialNumber
  ‚Ä¢ setSuperResolutionCaptureArea
  ‚Ä¢ shots
  ‚Ä¢ setShootPhotoMode
  ‚Ä¢ formatSSD
  ‚Ä¢ setExposureSettingsCallback
  ‚Ä¢ voidgetLEDAutoTurnOffEnabled
  ‚Ä¢ voidgetMultispectralShutterSpeed
  ‚Ä¢ setTimeLapsePreviewCallback
  ‚Ä¢ voidgetThermalGainMode
  ‚Ä¢ isPhotoQuickViewSupported
  ‚Ä¢ voidsetBeaconAutoTurnOffEnabled
  ‚Ä¢ values
  ‚Ä¢ getSSDVideoLicense
  ‚Ä¢ voidsetThermalSSO
  ‚Ä¢ voidsetThermalIsothermUpperValue
  ‚Ä¢ voidgetThermalTemperatureUnit
  ‚Ä¢ setDefogEnabled
  ‚Ä¢ FrameRate_120fps
  ‚Ä¢ isMultiLensCameraSupported
  ‚Ä¢ voidsetSSDColor
  ‚Ä¢ getPhotoRAWBurstCount
  ‚Ä¢ voidsetCustomExpandFileName
  ‚Ä¢ setCameraVideoStreamSource
  ‚Ä¢ voidsetEI
  ‚Ä¢ voidsetShootPhotoMode
  ‚Ä¢ voidsetThermalROI
  ‚Ä¢ setVideoResolutionAndFrameRate
  ‚Ä¢ getHDLiveViewEnabled
  ‚Ä¢ setThermalDigitalZoomFactor
  ‚Ä¢ voidsetThermalScene
  ‚Ä¢ voidgetMultispectralAELock
  ‚Ä¢ voidgetThermalROI
  ‚Ä¢ voidgetSpotMeteringTarget
  ‚Ä¢ port
  ‚Ä¢ voidgetThermalScene
  ‚Ä¢ voidsetMultispectralExposureStateCallback
  ‚Ä¢ voidstartSensorCleaning
  ‚Ä¢ voidsetPhotoQuickViewDuration
  ‚Ä¢ getMultispectralExposureMode
  ‚Ä¢ voidgetTurnOffFanWhenPossible
  ‚Ä¢ getSerialNumber
  ‚Ä¢ voidtriggerThermalFFC
  ‚Ä¢ setSSDStateCallback
  ‚Ä¢ setMediaFileCallback
  ‚Ä¢ getHybridZoomFocalLength
  ‚Ä¢ getAudioRecordingEnabled
  ‚Ä¢ voidgetAperture
  ‚Ä¢ getMultispectralExposureCompensation
  ‚Ä¢ getPhotoQuickViewDuration
  ‚Ä¢ getDefogEnabled
  ‚Ä¢ setNewGeneratedMediaFileInfoCallback
  ‚Ä¢ setFocusAssistantSettings
  ‚Ä¢ voidgetThermalFFCMode
  ‚Ä¢ cameras
  ‚Ä¢ setAudioRecordingEnabled
  ‚Ä¢ voidgetThermalPalette
  ‚Ä¢ voidsetFocusRingValue
  ‚Ä¢ voidsetVisionStabilizationEnabled
  ‚Ä¢ setThermalFFCMode
  ‚Ä¢ voidgetHybridZoomFocalLength
  ‚Ä¢ setSpotMeteringTarget
  ‚Ä¢ voidsetDisplayMode
  ‚Ä¢ getWatermarkSettings
  ‚Ä¢ voidsetIRFilterEnabled
  ‚Ä¢ voidsetCustomExpandDirectoryName
  ‚Ä¢ voidgetThermalIsothermUnit
  ‚Ä¢ voidgetFlatMode
  ‚Ä¢ setHighQualityPreviewEnabled
  ‚Ä¢ getFirmwareVersion
  ‚Ä¢ voidsetThermalTemperatureUnit
  ‚Ä¢ setThermalAreaTemperatureAggregationsCallback
  ‚Ä¢ setLinkZoomEnabled
  ‚Ä¢ voidgetWhiteBalance
  ‚Ä¢ storage
  ‚Ä¢ voidsetCameraVideoStreamSourceCallback
  ‚Ä¢ voidgetPhotoAEBCount
  ‚Ä¢ voidsetHistogramCallback
  ‚Ä¢ setThermalScene
  ‚Ä¢ setDigitalZoomFactor
  ‚Ä¢ getSSDVideoRecordingEnabled
  ‚Ä¢ voidsetVideoStandard
  ‚Ä¢ getPhotoBurstCount
  ‚Ä¢ voidsetDualFeedHorizontalAlignmentOffset
  ‚Ä¢ voidsetSpotMeteringTarget
  ‚Ä¢ intgetIndex
  ‚Ä¢ pitch
  ‚Ä¢ setPIPPosition
  ‚Ä¢ isFlatCameraModeSupported
  ‚Ä¢ value
  ‚Ä¢ getSSDColor
  ‚Ä¢ voidgetCustomExpandFileName
  ‚Ä¢ voidsetPhotoFileFormat
  ‚Ä¢ booleanisSuperResolutionSupported
  ‚Ä¢ setThermalGainMode
  ‚Ä¢ voidsetPhotoPanoramaMode
  ‚Ä¢ getFocusRingValueUpperBound
  ‚Ä¢ exitPlayback
  ‚Ä¢ startCalibration
  ‚Ä¢ voidgetThermalIsothermUpperValue
  ‚Ä¢ setMultispectralAELock
  ‚Ä¢ voidsetMultispectralMeteringMode
  ‚Ä¢ setDualFeedVerticalAlignmentOffset
  ‚Ä¢ setOrientation
  ‚Ä¢ setThermalExternalSceneSettingsCallback
  ‚Ä¢ getThermalProfile
  ‚Ä¢ voidsetColor
  ‚Ä¢ getAntiFlickerFrequency
  ‚Ä¢ restoreFactorySettings
  ‚Ä¢ voidstartCalibration
  ‚Ä¢ LensgetLens
  ‚Ä¢ voidinitSensorCleaningMode
  ‚Ä¢ voidgetMode
  ‚Ä¢ setTapZoomEnabled
  ‚Ä¢ isThermalCamera
  ‚Ä¢ setMultispectralShutterSpeed
  ‚Ä¢ voidgetOrientation
  ‚Ä¢ setVideoFileCompressionStandard
  ‚Ä¢ getLenses
  ‚Ä¢ setLEDAutoTurnOffEnabled
  ‚Ä¢ setMSXLevel
  ‚Ä¢ booleanisThermalCamera
  ‚Ä¢ voidsetRecordCameraStreamSettings
  ‚Ä¢ isAdjustableApertureSupported
  ‚Ä¢ voidsetContrast
  ‚Ä¢ voidsetLaserEnabled
  ‚Ä¢ voidsetSSDVideoRecordingEnabled
  ‚Ä¢ voidgetMediaFileCustomInformation
  ‚Ä¢ voidsetSSDClipFileName
  ‚Ä¢ getFocusAssistantSettings
  ‚Ä¢ voidsetSDCardStateCallBack
  ‚Ä¢ setWhiteBalance
  ‚Ä¢ getDisplayMode
  ‚Ä¢ getLiveviewLocationWithGPS
  ‚Ä¢ isAudioRecordingSupported
  ‚Ä¢ setHistogramCallback
  ‚Ä¢ setHistogramEnabled
  ‚Ä¢ filter
  ‚Ä¢ lens
  ‚Ä¢ formatStorage
  ‚Ä¢ setThermalWindowReflectedTemperature
  ‚Ä¢ booleanisNDFilterModeSupported
  ‚Ä¢ getMSXLevel
  ‚Ä¢ getPanoOriginalPhotoSettings
  ‚Ä¢ setCameraVideoStreamSourceCallback
  ‚Ä¢ voidgetBeaconAutoTurnOffEnabled
  ‚Ä¢ setThermalContrast
  ‚Ä¢ setThermalPalette
  ‚Ä¢ getFocusTarget
  ‚Ä¢ setPhotoTimeIntervalSettings
  ‚Ä¢ isMediaDownloadModeSupported
  ‚Ä¢ getSSDVideoLicenses
  ‚Ä¢ booleanisMultiLensCameraSupported
  ‚Ä¢ isSuperResolutionSupported
  ‚Ä¢ voidsetMultispectralExposureMode
  ‚Ä¢ voidsetHistogramEnabled
  ‚Ä¢ key
  ‚Ä¢ getFileIndexMode
  ‚Ä¢ voidgetCaptureCameraStreamSettings
  ‚Ä¢ voidsetSuperResolutionCaptureArea
  ‚Ä¢ getMode
  ‚Ä¢ startRecordVideo
  ‚Ä¢ voidsetAutoLockGimbalEnabled
  ‚Ä¢ voidgetLaserEnabled
  ‚Ä¢ meters
  ‚Ä¢ voidrestoreFactorySettings
  ‚Ä¢ setSSDVideoRecordingEnabled
  ‚Ä¢ voidsetPhotoRAWBurstCount
  ‚Ä¢ booleanisPhotoQuickViewSupported
  ‚Ä¢ voidsetLEDAutoTurnOffEnabled
  ‚Ä¢ voidgetThermalBrightness
  ‚Ä¢ license
  ‚Ä¢ setThermalWindowTransmissionCoefficient
  ‚Ä¢ voidgetEIColor
  ‚Ä¢ setThermalBackgroundTemperature
  ‚Ä¢ voidgetThermalMeteringArea
  ‚Ä¢ voidsetThermalMeasurementMode
  ‚Ä¢ voidsetPhotoBurstCount
  ‚Ä¢ setThermalDDE
  ‚Ä¢ setSSDLegacyColor
  ‚Ä¢ setTurnOffFanWhenPossible
  ‚Ä¢ voidgetISO
  ‚Ä¢ voidsetTapZoomStateCallback
  ‚Ä¢ voidgetMultispectralExposureMode
  ‚Ä¢ noise
  ‚Ä¢ booleanisAudioRecordingSupported
  ‚Ä¢ setPhotoQuickViewDuration
  ‚Ä¢ voidsetWhiteBalance
  ‚Ä¢ setThermalIsothermUpperValue
  ‚Ä¢ voidgetMeteringMode
  ‚Ä¢ setShutterSpeed
  ‚Ä¢ details
  ‚Ä¢ voidsetMultispectralDisplayMode
  ‚Ä¢ content
  ‚Ä¢ getThermalBrightness
  ‚Ä¢ setCustomExpandDirectoryName
  ‚Ä¢ getFocusMode
  ‚Ä¢ voidgetThermalDDE
  ‚Ä¢ voidsetThermalIsothermLowerValue
  ‚Ä¢ getLens
  ‚Ä¢ getThermalIsothermEnabled
  ‚Ä¢ voidsetMediaFileCustomInformation
  ‚Ä¢ voidgetThermalContrast
  ‚Ä¢ Bracketing
  ‚Ä¢ setFileIndexMode
  ‚Ä¢ getDewarpingEnabled
  ‚Ä¢ getHighQualityPreviewEnabled
  ‚Ä¢ getVideoCaptionEnabled
  ‚Ä¢ photo
  ‚Ä¢ setVideoFileFormat
  ‚Ä¢ voidsetMultispectralAELock
  ‚Ä¢ setFocusMode
  ‚Ä¢ setCaptureCameraStreamSettings
  ‚Ä¢ getCaptureCameraStreamSettings
  ‚Ä¢ voidsetMeteringMode
  ‚Ä¢ exitSensorCleaningMode
  ‚Ä¢ voidsetExposureMode
  ‚Ä¢ saveSettingsToProfile
  ‚Ä¢ setThermalTemperatureCallback
  ‚Ä¢ voidgetDewarpingEnabled
  ‚Ä¢ voidcalibratedInfinityFocus
  ‚Ä¢ startShootPhoto
  ‚Ä¢ setContrast
  ‚Ä¢ getSSDLegacyColor
  ‚Ä¢ setThermalSceneEmissivity
  ‚Ä¢ voidsetHybridZoomFocalLength
  ‚Ä¢ voidgetSharpness
  ‚Ä¢ setMultispectralExposureCompensation
  ‚Ä¢ voidsetSystemStateCallback
  ‚Ä¢ booleanisInterchangeableLensSupported
  ‚Ä¢ voidsetExposureSensitivityMode
  ‚Ä¢ isInterchangeableLensSupported
  ‚Ä¢ Interest
  ‚Ä¢ setThermalIsothermLowerValue
  ‚Ä¢ getThermalIsothermLowerValue
  ‚Ä¢ voidsetHighQualityPreviewEnabled
  ‚Ä¢ voidgetVideoCaptionEnabled
  ‚Ä¢ voidgetDualFeedHorizontalAlignmentOffset
  ‚Ä¢ setDualFeedHorizontalAlignmentOffset
  ‚Ä¢ getSaturation
  ‚Ä¢ voidsetMSXLevel
  ‚Ä¢ voidsetMode
  ‚Ä¢ isPlaybackSupported
  ‚Ä¢ startContinuousOpticalZoom
  ‚Ä¢ setThermalIsothermMiddleValue
  ‚Ä¢ voidgetThermalACE
  ‚Ä¢ getFlatMode
  ‚Ä¢ startSensorCleaning
  ‚Ä¢ PlaybackManagergetPlaybackManager
  ‚Ä¢ setAudioGain
  ‚Ä¢ voidgetFocusTarget
  ‚Ä¢ voidgetDefogEnabled
  ‚Ä¢ getShutterSpeed
  ‚Ä¢ booleanisAdjustableApertureSupported
  ‚Ä¢ Exposure
  ‚Ä¢ booleanisDigitalZoomSupported
  ‚Ä¢ isEIModeSupported
  ‚Ä¢ voidgetExposureMode
  ‚Ä¢ getThermalDigitalZoomFactor
  ‚Ä¢ getDualFeedVerticalAlignmentOffset
  ‚Ä¢ voidsetMultispectralShutterSpeed
  ‚Ä¢ voidgetCustomExpandDirectoryName
  ‚Ä¢ setHDLiveViewEnabled
  ‚Ä¢ getSharpness
  ‚Ä¢ voidsetSaturation
  ‚Ä¢ voidgetStorageLocation
  ‚Ä¢ getAudioGain
  ‚Ä¢ getThermalGainMode
  ‚Ä¢ getMultispectralShutterSpeed
  ‚Ä¢ setEI
  ‚Ä¢ getPhotoPanoramaMode
  ‚Ä¢ voidsetThermalAtmosphericTemperature
  ‚Ä¢ getThermalDDE
  ‚Ä¢ index
  ‚Ä¢ setThermalWindowReflection
  ‚Ä¢ booleanisCaptureInVideoSupported
  ‚Ä¢ booleanisAdjustableFocalPointSupported
  ‚Ä¢ getDisplayName
  ‚Ä¢ calibratedInfinityFocus
  ‚Ä¢ voidsetSuperResolutionInfoCallback
  ‚Ä¢ setThermalACE
  ‚Ä¢ getThermalACE
  ‚Ä¢ voidsetThermalFFCMode
  ‚Ä¢ voidgetMultispectralDisplayMode
  ‚Ä¢ voidstopCalibration
  ‚Ä¢ isMultiVideoStreamSourceSupported
  ‚Ä¢ voidgetMultispectralStoragePhotoSettings
  ‚Ä¢ voidgetAutoLockGimbalEnabled
  ‚Ä¢ getExposureSensitivityMode
  ‚Ä¢ voidsetThermalIsothermMiddleValue
  ‚Ä¢ getMeteringMode
  ‚Ä¢ voidgetShutterSpeed
  ‚Ä¢ voidsetSharpness
  ‚Ä¢ getNDFilterMode
  ‚Ä¢ isTapZoomSupported
  ‚Ä¢ voidgetOpticalZoomFocalLength
  ‚Ä¢ setSSDClipFileName
  ‚Ä¢ degrees
  ‚Ä¢ voidgetFirmwareVersion
  ‚Ä¢ StringgetDisplayName
  ‚Ä¢ voidgetThermalIsothermLowerValue
  ‚Ä¢ voidgetPhotoTimeLapseSettings
  ‚Ä¢ setSharpness
  ‚Ä¢ getOrientation
  ‚Ä¢ voidsetThermalTemperatureCallback
  ‚Ä¢ voidsetTapZoomMultiplier
  ‚Ä¢ getThermalScene
  ‚Ä¢ modes
  ‚Ä¢ voidgetRecordCameraStreamSettings
  ‚Ä¢ getOpticalZoomFactor
  ‚Ä¢ booleanisHybridZoomSupported
  ‚Ä¢ getLEDAutoTurnOffEnabled
  ‚Ä¢ getVideoFileCompressionStandard
  ‚Ä¢ voidgetSSDVideoRecordingEnabled
  ‚Ä¢ getThermalPalette
  ‚Ä¢ isOpticalZoomSupported
  ‚Ä¢ voidgetMSXLevel
  ‚Ä¢ voidsetDualFeedVerticalAlignmentOffset
  ‚Ä¢ setCustomExpandFileName
  ‚Ä¢ getPlaybackManager
  ‚Ä¢ voidformatStorage
  ‚Ä¢ getMechanicalShutterEnabled
  ‚Ä¢ getAutoLockGimbalEnabled
  ‚Ä¢ isInternalStorageSupported
  ‚Ä¢ voidgetPhotoAspectRatio
  ‚Ä¢ getColor
  ‚Ä¢ isConnected
  ‚Ä¢ voidsetISO
  ‚Ä¢ getRecordCameraStreamSettings
  ‚Ä¢ voidgetColor
  ‚Ä¢ setPanoOriginalPhotoSettings
  ‚Ä¢ getTurnOffFanWhenPossible
  ‚Ä¢ setThermalROI
  ‚Ä¢ getVideoStandard
  ‚Ä¢ setColor
  ‚Ä¢ target
  ‚Ä¢ voidgetSaturation
  ‚Ä¢ setFocusTarget
  ‚Ä¢ setVisionStabilizationEnabled
  ‚Ä¢ booleanisOpticalZoomSupported
  ‚Ä¢ voidgetMultispectralMeteringMode
  ‚Ä¢ voidgetContrast
  ‚Ä¢ voidsetFileIndexMode
  ‚Ä¢ getTapZoomMultiplier
  ‚Ä¢ voidgetLinkZoomEnabled
  ‚Ä¢ setMultispectralStoragePhotoSettings
  ‚Ä¢ voidgetRecommendedEI
  ‚Ä¢ setMultispectralMeteringMode
  ‚Ä¢ isAdjustableFocalPointSupported
  ‚Ä¢ getVideoResolutionAndFrameRate
  ‚Ä¢ setNDFilterMode
  ‚Ä¢ booleanisTapZoomSupported
  ‚Ä¢ voidgetDisplayMode
  ‚Ä¢ voidsetThermalPalette
  ‚Ä¢ getStorageLocation
  ‚Ä¢ coordinate
  ‚Ä¢ voidsetVideoFileFormat
  ‚Ä¢ voidgetDualFeedVerticalAlignmentOffset
  ‚Ä¢ setPhotoTimeLapseSettings
  ‚Ä¢ getPhotoFileFormat
  ‚Ä¢ voidsetAELock
  ‚Ä¢ getMultispectralDisplayMode
  ‚Ä¢ getCapabilities
  ‚Ä¢ voidenterPlayback
  ‚Ä¢ getThermalCustomExternalSceneSettingsProfile
  ‚Ä¢ getLaserEnabled
  ‚Ä¢ setBeaconAutoTurnOffEnabled
  ‚Ä¢ voidformatSSD
  ‚Ä¢ getMultispectralAELock
  ‚Ä¢ setThermalTemperatureUnit
  ‚Ä¢ voidgetIRFilterEnabled
  ‚Ä¢ voidgetAELock
  ‚Ä¢ setThermalIsothermUnit
  ‚Ä¢ getHybridZoomSpec
  ‚Ä¢ getTapZoomEnabled
  ‚Ä¢ setSSDVideoResolutionAndFrameRate
  ‚Ä¢ voidsetVideoCaptionEnabled
  ‚Ä¢ voidsetNDFilterMode
  ‚Ä¢ voidgetOpticalZoomSpec
  ‚Ä¢ voidgetLensInformation
  ‚Ä¢ getVideoFileFormat
  ‚Ä¢ setThermalAtmosphericTransmissionCoefficient


================================================================================
P√ÅGINA 3: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/Camera/DJIMediaManager.html
M√©todos encontrados: 38
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class MediaManager
class MediaManager implements DJIParamAccessListener
Package:dji.sdk.media
Description:
The media manager is used to interact with the file system on the SD card or the internal storage. By using the media manager, the user can get the metadata for all the multimedia files, and has access to each individual multimedia file.
Class Members:
State UpdatesmethodaddMediaUpdatedVideoPlaybackStateListener
method addMediaUpdatedVideoPlaybackStateListener
void addMediaUpdatedVideoPlaybackStateListener(VideoPlaybackStateListener callback)
Package:dji.sdk.media
Description:
Sets the callback object for updating the video playback state of the media manager.
Input Parameters:
VideoPlaybackStateListener callbackcallback object of updating the vision detection state.
methodgetScheduler
method getScheduler
FetchMediaTaskScheduler getScheduler()
Package:dji.sdk.media
Description:
Fetch media task scheduler. This can be used to queue the download of the previews, thumbnails and XML custom data from multiple media files.
Return:
FetchMediaTaskSchedulerAn object of FetchMediaTaskScheduler.
methodgetSDCardFileListState
method getSDCardFileListState
@NonNull FileListState getSDCardFileListState()
Package:dji.sdk.media
Description:
The file list state of the SD card.
Return:
FileListStateAn enum value of FileListState.
methodgetSDCardFileListSnapshot
method getSDCardFileListSnapshot
@Nullable List<MediaFile> getSDCardFileListSnapshot()
Package:dji.sdk.media
Description:
Returns a copy of the current file list on the SD card after you call refreshFileListOfStorageLocation. Returns null if getSDCardFileListState is reset.
Return:
List<MediaFile>An array of MediaFile objects.
methodgetInternalStorageFileListState
method getInternalStorageFileListState
@NonNull FileListState getInternalStorageFileListState()
Package:dji.sdk.media
Description:
The file list state of the internal storage.
Return:
FileListStateAn enum value of FileListState.
methodgetInternalStorageFileListSnapshot
method getInternalStorageFileListSnapshot
@Nullable List<MediaFile> getInternalStorageFileListSnapshot()
Package:dji.sdk.media
Description:
Returns a copy of the current file list on the internal storage after you call refreshFileListOfStorageLocation. Returns nil if getInternalStorageFileListState is reset or unknown.
Return:
List<MediaFile>An array of MediaFile objects.
methodrefreshFileListOfStorageLocation
method refreshFileListOfStorageLocation
void refreshFileListOfStorageLocation(SettingsDefinitions.StorageLocation storageLocation,                                                CompletionCallback callback)
Package:dji.sdk.media
Description:
Refreshes the file list of the storage. If the current state is RESET, the media manager will try to fetch the complete file list. If the current state  is INCOMPLETE, the media manager will only fetch the missing list of files. If the file list is refreshed successfully, the corresponding file list state (either getSDCardFileListState or getInternalStorageFileListState) will become UP_TO_DATE.
Input Parameters:
SettingsDefinitions.StorageLocation storageLocationThe storage location of the file list to refresh.CompletionCallback callbackCompletion callback to receive the result.
methoddeleteFiles
method deleteFiles
void deleteFiles(@NonNull final List<MediaFile> files,                           final CompletionCallbackWithTwoParam<List<MediaFile>, DJICameraError> callback)
Package:dji.sdk.media
Description:
Delete media files from storages. If the operation is started successfully, FileListState will become  DELETING. If there is error or  "failedFiles" is not empty, FileListState will become RESET.
Input Parameters:
@NonNull final List<MediaFile> filesA list of MediaFile objects.final CompletionCallbackWithTwoParam<List<MediaFile>, DJICameraError> callbackA completion callback of CompletionCallbackWithTwoParam<List<MediaFile>.
DownloadmethodexitMediaDownloading
method exitMediaDownloading
void exitMediaDownloading()
Package:dji.sdk.media
Description:
This will entirely stop the downloading process and of course clean the downloading thread pool. The camera will exit the MEDIA_DOWNLOAD mode and enter the SHOOT_PHOTO mode.  Precondition: The camera enters the MediaDownload mode.  Post Condition: After this function invoked, the camera mode will shift to TAKEPHOTO mode.
Add listenermethodaddUpdateFileListStateListener
method addUpdateFileListStateListener
void addUpdateFileListStateListener(@NonNull FileListStateListener listener)
Package:dji.sdk.media
Description:
Start listen to the update of file list state.
Input Parameters:
@NonNull FileListStateListener listenerA FileListStateListener interface.
methodaddUpdateStorageLocationListener
method addUpdateStorageLocationListener
void addUpdateStorageLocationListener(@NonNull SettingsDefinitions.StorageLocation storageLocation,                                                @NonNull FileListStateListener listener)
Package:dji.sdk.media
Description:
Start listen to the update of file list state.
Input Parameters:
@NonNull SettingsDefinitions.StorageLocation storageLocationThe storage location of the file list.@NonNull FileListStateListener listenerA FileListStateListener interface.
Remove listenermethodremoveFileListStateCallback
method removeFileListStateCallback
void removeFileListStateCallback(@NonNull FileListStateListener listener)
Package:dji.sdk.media
Description:
Stop listen to the update of file list state.
Input Parameters:
@NonNull FileListStateListener listenerA FileListStateListener interface.
Video PlaybackmethodisVideoPlaybackSupported
method isVideoPlaybackSupported
boolean isVideoPlaybackSupported()
Package:dji.sdk.media
Description:
Checks if the media manager supports video playback or not. @return true if the media manager supports video playback.
Return:
booleantrue if the media manager supports video playback.
methodplayVideoMediaFile
method playVideoMediaFile
void playVideoMediaFile(@NonNull MediaFile videoMediaFile, @Nullable final CompletionCallback callback)
Package:dji.sdk.media
Description:
Start video playback through MediaManager. When the media manager is playing a video,  playback state received from onUpdate. Video playback through MediaManager is fixed at 720p.
Input Parameters:
@NonNull MediaFile videoMediaFileThe video to play.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodresume
method resume
void resume(@Nullable final CompletionCallback callback)
Package:dji.sdk.media
Description:
The media manager resumes the paused video.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodpause
method pause
void pause(@Nullable final CompletionCallback callback)
Package:dji.sdk.media
Description:
The media manager pauses the playing video.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodstop
method stop
void stop(@Nullable final CompletionCallback callback)
Package:dji.sdk.media
Description:
The media manager stops the playing video.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodmoveToPosition
method moveToPosition
void moveToPosition(@FloatRange(from = 0) float position, @Nullable final CompletionCallback callback)
Package:dji.sdk.media
Description:
Video playback is skipped to the new position in seconds from the start of the video.
Input Parameters:
@FloatRange(from = 0) float positionNew position to play in seconds from start of video. Input with precision of greater than 3 decimal places, will be rounded to 3.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Check Customize DCF File SupportmethodisCustomizeDCFFileSupported
method isCustomizeDCFFileSupported
protected boolean isCustomizeDCFFileSupported()
Package:dji.sdk.media
Description:
Checks if the media manager supports customize DCF file naming rule or not. It is Only supported by Zenmuse H20 series.
Return:
protected booleantrue if the camera supports customize DCF file.
Download MediamethodfetchThumbnail
method fetchThumbnail
void fetchThumbnail(@Nullable final CompletionCallback callback)
Package:dji.sdk.media
Description:
Fetches this media's thumbnail with a resolution (99 x 99) from the SD card. This method can be used to fetch either a photo or a video, where the first frame of the video is the thumbnail that is fetched. It is not available if the media type is Panorama.  Precondition: The camera mode is MediaDownload mode.  Post Condition: This method will start to download the media thumbnail in the SD card. The content can be videos or images.
Input Parameters:
@Nullable final CompletionCallback callbackThe completion callback with the returned execution result.
Related:
enumFileListState
enum FileListState
enum FileListState
Package:dji.sdk.media
Description:
States of the file list in MediaManager.
Enum Members:
UP_TO_DATEThe file list is up-to-date: it is synchronized with the SD card in the aircraft.INCOMPLETENew files have been generated since the last call of refreshFileListOfStorageLocation. Calling refreshFileListOfStorageLocation can synchronize the newly generated files and append them to the end of the file list.RESETThe file list is reset. The file list will be reset in one of the following cases:  - Camera is disconnected.  - SD card is formatted.  - SD card is not inserted.  - Error occurs when deleting files from SD card.  In this state, getSDCardFileListSnapshot will return null.DELETINGdeleteFiles has been called and the operation is still in progress.RENAMINGA renaming operation is in progress.SYNCINGThe media manager is synchronizing the file list from the SD card.UNKNOWNUnknown.
Class Members:
classFetchMediaTaskSchedulerState UpdatesclassVideoPlaybackStateListenerclassDownloadListenerclassFileListStateListenerMediaclassMediaFileclassMediaFileInfoVideo PlaybackclassVideoPlaybackState
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ voidexitMediaDownloading
  ‚Ä¢ voidfetchThumbnail
  ‚Ä¢ voidremoveFileListStateCallback
  ‚Ä¢ getSDCardFileListState
  ‚Ä¢ state
  ‚Ä¢ isCustomizeDCFFileSupported
  ‚Ä¢ deleteFiles
  ‚Ä¢ booleanisVideoPlaybackSupported
  ‚Ä¢ addUpdateStorageLocationListener
  ‚Ä¢ pause
  ‚Ä¢ playVideoMediaFile
  ‚Ä¢ fetchThumbnail
  ‚Ä¢ resume
  ‚Ä¢ voidstop
  ‚Ä¢ FileListStategetInternalStorageFileListState
  ‚Ä¢ refreshFileListOfStorageLocation
  ‚Ä¢ voidaddUpdateFileListStateListener
  ‚Ä¢ addUpdateFileListStateListener
  ‚Ä¢ voidresume
  ‚Ä¢ voidplayVideoMediaFile
  ‚Ä¢ resolution
  ‚Ä¢ voidaddMediaUpdatedVideoPlaybackStateListener
  ‚Ä¢ getSDCardFileListSnapshot
  ‚Ä¢ FileListStategetSDCardFileListState
  ‚Ä¢ FloatRange
  ‚Ä¢ getScheduler
  ‚Ä¢ protectedbooleanisCustomizeDCFFileSupported
  ‚Ä¢ stop
  ‚Ä¢ getInternalStorageFileListState
  ‚Ä¢ removeFileListStateCallback
  ‚Ä¢ addMediaUpdatedVideoPlaybackStateListener
  ‚Ä¢ voidpause
  ‚Ä¢ moveToPosition
  ‚Ä¢ FetchMediaTaskSchedulergetScheduler
  ‚Ä¢ isVideoPlaybackSupported
  ‚Ä¢ voidmoveToPosition
  ‚Ä¢ getInternalStorageFileListSnapshot
  ‚Ä¢ exitMediaDownloading


================================================================================
P√ÅGINA 4: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/Camera/DJIPlaybackManager.html
M√©todos encontrados: 44
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class PlaybackManager
class PlaybackManager
Package:dji.sdk.camera
Description:
The playback manager is used to interact with the playback system of the camera. By using the playback manager, the user can control the playback system.
Class Members:
State Updates
PlaybackmethodsetPlaybackStateCallback
method setPlaybackStateCallback
void setPlaybackStateCallback(PlaybackState.CallBack cameraPlayBackStateCB)
Package:dji.sdk.camera
Description:
Sets the camera's playback state callback. Called according to the camera's update timer.   Precondition:   You must first define a Callback object to pass in as a parameter.   Post  Condition:  Every time the playback state changes, the Callback interface that was passed  in as a parameter will call its onResult function.  The onResult function takes in a DJICameraPlayBackState  object, which provides playback information such as the number of photos currently selected, the video playback  progress (if a video is being played), and much more.
Input Parameters:
PlaybackState.CallBack cameraPlayBackStateCBThe Callback object to set as the callback interface for when the playback state changes.  <br> The Callback interface implements an onResult function, which takes in a  DJICameraPlayBackState object from the aircraft. <br>
Single Preview Mode
Mode ControlmethodenterSinglePreviewModeWithIndex
method enterSinglePreviewModeWithIndex
DJIError enterSinglePreviewModeWithIndex(int index)
Package:dji.sdk.camera
Description:
Enters single file preview mode for a file at the specified index. In order for this method to be called,  the camera work mode must be PLAYBACK.   @return  DJICameraError Shows the possible error during the execution. If there is no error, it returns null.
Input Parameters:
int indexFile to be previewed at the specified index. The value falls in [1,8].
Return:
DJIErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
Page ControlmethodproceedToNextSinglePreviewPage
method proceedToNextSinglePreviewPage
DJICameraError proceedToNextSinglePreviewPage()
Package:dji.sdk.camera
Description:
Goes to the next page.   Precondition: The camera must enter Single File Preview Mode.   Special case: If it is the last image, it will go to the first image. @return DJICameraError  Shows the possible error during the execution. If there is no error, it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
methodproceedToPreviousSinglePreviewPage
method proceedToPreviousSinglePreviewPage
DJICameraError proceedToPreviousSinglePreviewPage()
Package:dji.sdk.camera
Description:
Goes back to the previous page.   Precondition: The camera must enter Single File Preview Mode.   Special case: If it is the first image, it will go to the last image. @return DJICameraError  Shows the possible error during the execution. If there is no error, it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
Video PlaybackmethodplayVideo
method playVideo
DJICameraError playVideo()
Package:dji.sdk.camera
Description:
Starts video playback. The selected file must be a video file.  Precondition: The camera must enter  Single Preview Mode.  Post condition: If the video finishes playing, it will stop and go back to the  beginning of the file. @return DJICameraError Shows the possible error during the execution. If there is no error,  it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
methodpauseVideo
method pauseVideo
DJICameraError pauseVideo()
Package:dji.sdk.camera
Description:
Pauses a video during playback.   Precondition: The video is being played. @return  DJICameraError Shows the possible error during the execution. If there is no error, it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
methodstopVideo
method stopVideo
DJICameraError stopVideo()
Package:dji.sdk.camera
Description:
Stops a video during playback.   Precondition: The video is being played.  Post condition:  The file will stop and go back to the beginning of the file. @return DJICameraError Shows the possible error during  the execution. If there is no error, it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
methodplayVideoFromPositionInPercent
method playVideoFromPositionInPercent
DJIError playVideoFromPositionInPercent(int location)
Package:dji.sdk.camera
Description:
Plays a video from the specified location. The selected file must be a video file.  Precondition:  The camera must enter Single File Preview Mode.  Post condition: The file will play from a specific location immediately. This command can only be called if the video is currently playing or is paused. If paused, the playback position will be updated and playing will resume.
@return DJICameraError Shows the possible error during the execution. If there is no error, it returns null.
Input Parameters:
int locationLocation from which to play the video must be in the range of [0, 100]. This value  represents at what percent of the entire video it should start playing.
Return:
DJIErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
Delete FilemethoddeleteCurrentPreviewFile
method deleteCurrentPreviewFile
DJICameraError deleteCurrentPreviewFile()
Package:dji.sdk.camera
Description:
Deletes the current file being previewed.   Precondition: The camera must enter single file preview  mode.  Post condition: The image will be deleted from the SD card. @return DJICameraError Shows the  possible error during the execution. If there is no error, it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
Multi Preview Mode
Mode ControlmethodenterMultiplePreviewMode
method enterMultiplePreviewMode
DJICameraError enterMultiplePreviewMode()
Package:dji.sdk.camera
Description:
Enables the user to preview multiple files when the camera is in Playback mode.   Precondition: The  camera work mode should be set to Playback mode.  Post condition: There will be 8 images on one page.  @return DJICameraError Shows the possible error during the execution. If there is no error, it returns  null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
Page ControlmethodproceedToNextMultiplePreviewPage
method proceedToNextMultiplePreviewPage
DJICameraError proceedToNextMultiplePreviewPage()
Package:dji.sdk.camera
Description:
Goes to the next page when there are multiple pages.   Precondition: The camera must enter Multiple  Preview Mode.  Special case: If it is the last page, it will stay at the last page.  @return DJICameraErrorr Shows the possible error during the execution. If there is no error, it  returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
methodproceedToPreviousMultiplePreviewPage
method proceedToPreviousMultiplePreviewPage
DJICameraError proceedToPreviousMultiplePreviewPage()
Package:dji.sdk.camera
Description:
Goes back to the previous page when there are multiple pages.   Precondition:  The camera must enter Multiple Preview Mode.  Special case: If it is the first page, it will  stay at the first page. @return DJICameraError Shows the possible error during the execution. If there is  no error, it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
Multi Edit Mode
Mode ControlmethodenterMultipleEditMode
method enterMultipleEditMode
DJICameraError enterMultipleEditMode()
Package:dji.sdk.camera
Description:
This enables the user to select, download, or delete multiple media files when the camera is in Playback mode.  Precondition: The camera work mode must be set to Camera Play back mode and then Multiple Preview Mode.  Post condition: Multiple photos can be selected to be downloaded or deleted. @return DJICameraError Shows the  possible error during the execution. If there is no error, it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
methodexitMultipleEditMode
method exitMultipleEditMode
DJICameraError exitMultipleEditMode()
Package:dji.sdk.camera
Description:
Exits multiple edit mode. @return DJICameraError Shows the possible error during the execution. If there is no error, it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
SelectionmethodtoggleFileSelectionAtIndex
method toggleFileSelectionAtIndex
DJIError toggleFileSelectionAtIndex(int index)
Package:dji.sdk.camera
Description:
Selects or unselects a file at the specified index of the current page. This index is unrelated to the filename,  and is used in multiple edit mode.   Precondition: The camera must enter Multiple Edit Mode.   @return DJICameraError Shows the possible error during the execution. If there is no error, it returns  null.
Input Parameters:
int indexIndex at which to select a file. The value falls in [1,8]. However, the exact range should depends on how many photos totally in current page.
Return:
DJIErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
methodselectAllFiles
method selectAllFiles
DJICameraError selectAllFiles()
Package:dji.sdk.camera
Description:
Selects all the files on the SD card.   Precondition: The camera must enter Multi Edit Mode.  @return DJICameraError Shows the possible error during the execution. If there is no error, it  returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
methodunselectAllFiles
method unselectAllFiles
DJICameraError unselectAllFiles()
Package:dji.sdk.camera
Description:
Unselects all the files on the SD card.  Precondition: The camera must enter Multiple Edit Mode.  @return DJICameraError Shows the possible error during the execution. If there is no error,  it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
methodselectAllFilesInPage
method selectAllFilesInPage
DJICameraError selectAllFilesInPage()
Package:dji.sdk.camera
Description:
Selects all the file(s) on the current page.   Precondition: The camera must enter Multiple Edit Mode.   @return DJICameraError Shows the possible error during the execution. If there is no error, it returns  null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
methodunselectAllFilesInPage
method unselectAllFilesInPage
DJICameraError unselectAllFilesInPage()
Package:dji.sdk.camera
Description:
Unselects all the file(s) on the current page.   Precondition: The camera must enter Multiple Edit  Mode. @return DJICameraError Shows the possible error during the execution. If there is no error, it  returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
Delete FilesmethoddeleteAllSelectedFiles
method deleteAllSelectedFiles
DJICameraError deleteAllSelectedFiles()
Package:dji.sdk.camera
Description:
Deletes all selected files from the SD card.   Precondition: The camera must enter Multiple Edit Mode.   Post condition: The images will be deleted from the SD card.  @return DJICameraError Shows  the possible error during the execution. If there is no error, it returns null.
Return:
DJICameraErrorDJICameraError shows the possible error during the execution. If there is no error, it returns null.
Download FilesmethoddownloadSelectedFiles
method downloadSelectedFiles
void downloadSelectedFiles(final File destDir, final FileDownloadCallback callback)
Package:dji.sdk.camera
Description:
Downloads the currently selected media files.   Precondition: The camera must enter multiple preview mode.
Input Parameters:
final File destDirThe destination file directory, e.g., SDCardPath/folder/final FileDownloadCallback callbackThe execution callback.
Related:
CallbackclassFileDownloadCallbackStateclassPlaybackState
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ deleteCurrentPreviewFile
  ‚Ä¢ DJICameraErrorproceedToNextMultiplePreviewPage
  ‚Ä¢ exitMultipleEditMode
  ‚Ä¢ DJICameraErrorproceedToPreviousSinglePreviewPage
  ‚Ä¢ unselectAllFiles
  ‚Ä¢ DJICameraErrorselectAllFilesInPage
  ‚Ä¢ selectAllFilesInPage
  ‚Ä¢ downloadSelectedFiles
  ‚Ä¢ DJICameraErrorenterMultipleEditMode
  ‚Ä¢ proceedToNextMultiplePreviewPage
  ‚Ä¢ setPlaybackStateCallback
  ‚Ä¢ enterMultipleEditMode
  ‚Ä¢ voidsetPlaybackStateCallback
  ‚Ä¢ progress
  ‚Ä¢ DJICameraErrordeleteCurrentPreviewFile
  ‚Ä¢ selectAllFiles
  ‚Ä¢ DJICameraErrorstopVideo
  ‚Ä¢ enterSinglePreviewModeWithIndex
  ‚Ä¢ proceedToNextSinglePreviewPage
  ‚Ä¢ stopVideo
  ‚Ä¢ pauseVideo
  ‚Ä¢ DJICameraErrorenterMultiplePreviewMode
  ‚Ä¢ DJICameraErrorexitMultipleEditMode
  ‚Ä¢ enterMultiplePreviewMode
  ‚Ä¢ DJICameraErrorplayVideo
  ‚Ä¢ proceedToPreviousMultiplePreviewPage
  ‚Ä¢ DJICameraErrorproceedToPreviousMultiplePreviewPage
  ‚Ä¢ toggleFileSelectionAtIndex
  ‚Ä¢ voiddownloadSelectedFiles
  ‚Ä¢ DJIErrortoggleFileSelectionAtIndex
  ‚Ä¢ DJICameraErrorproceedToNextSinglePreviewPage
  ‚Ä¢ proceedToPreviousSinglePreviewPage
  ‚Ä¢ unselectAllFilesInPage
  ‚Ä¢ playVideoFromPositionInPercent
  ‚Ä¢ DJICameraErrorunselectAllFiles
  ‚Ä¢ DJIErrorplayVideoFromPositionInPercent
  ‚Ä¢ DJICameraErrordeleteAllSelectedFiles
  ‚Ä¢ deleteAllSelectedFiles
  ‚Ä¢ DJIErrorenterSinglePreviewModeWithIndex
  ‚Ä¢ playVideo
  ‚Ä¢ DJICameraErrorpauseVideo
  ‚Ä¢ DJICameraErrorselectAllFiles
  ‚Ä¢ DJICameraErrorunselectAllFilesInPage
  ‚Ä¢ file


================================================================================
P√ÅGINA 5: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/FlightController/DJIFlightController.html
M√©todos encontrados: 244
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class FlightController
class FlightController extends BaseComponent
Package:dji.sdk.flightcontrollerInherits From:BaseComponent
Description:
This class contains components of the flight controller and provides methods to send different commands to the flight controller. This object is available from the Aircraft object which is a subclass of BaseProduct.
Class Members:
State Updates
CallbacksmethodsetStateCallback
method setStateCallback
void setStateCallback(@Nullable FlightControllerState.Callback callback)
Package:dji.sdk.flightcontroller
Description:
Sets the callback function that updates the flight controller's current state data. This method is called 10 times per second.
Input Parameters:
@Nullable FlightControllerState.Callback callbackThe execution callback with the execution result returned.
methodsetIMUStateCallback
method setIMUStateCallback
void setIMUStateCallback(@Nullable IMUState.Callback callback)
Package:dji.sdk.flightcontroller
Description:
Sets the IMU State callback, which will receive the changed state of the IMU.
Input Parameters:
@Nullable IMUState.Callback callbackThe callback for receiving the changed state of IMU.
methodsetASBInformationCallback
method setASBInformationCallback
void setASBInformationCallback(@Nullable AirSenseSystemInformation.Callback callback)
Package:dji.sdk.flightcontroller
Description:
Sets the AirSenseSystemInformation callback, which will receive the AirSenseSystemInformation.
Input Parameters:
@Nullable AirSenseSystemInformation.Callback callbackThe callback for receiving the AirSenseSystemInformation.
methodsetOnboardSDKDeviceDataCallback
method setOnboardSDKDeviceDataCallback
void setOnboardSDKDeviceDataCallback(       @Nullable OnboardSDKDeviceDataCallback callback)
Package:dji.sdk.flightcontroller
Description:
Sets the callback function that updates the data received from an external device (e.g. the onboard device).
Input Parameters:
@Nullable OnboardSDKDeviceDataCallback callbackThe execution callback with the execution result returned.
Get State
Current StatemethodgetState
method getState
@NonNull FlightControllerState getState()
Package:dji.sdk.flightcontroller
Description:
Returns the current state of flight controller.
Return:
FlightControllerStateAn instance of FlightControllerState.
Sensors
CompassmethodgetCompass
method getCompass
Compass getCompass()
Package:dji.sdk.flightcontroller
Description:
Compass object.
Return:
CompassAn instance of Compass.
Compass CountmethodgetCompassCount
method getCompassCount
int getCompassCount()
Package:dji.sdk.flightcontroller
Description:
Number of Compass modules in the flight controller.
Return:
intAn int value.
RTK PositioningmethodgetRTK
method getRTK
@Nullable RTK getRTK()
Package:dji.sdk.flightcontroller
Description:
RTK positioning object.
Return:
RTKAn instance of RTK.
IMUmethodgetIMUCount
method getIMUCount
int getIMUCount()
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.IMU_COUNT
Description:
Number of IMU modules in the flight controller. Most products have one IMU.   Exceptions:   Phantom 4, Phantom 4 Pro, Mavic Pro, and Inspire 2 each have two IMUs A3, Matrice 600, and Matrice 600 Pro each have one inner IMU and can have at most two external IMUs. N3 has two inner IMUs and can have one external IMU.
Return:
intAn int value.
methodstartIMUCalibration
method startIMUCalibration
void startIMUCalibration(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.START_IMU_CALIBRATION
Description:
Starts IMU calibration. For aircraft with multiple IMUs, this method will start the calibration of all IMUs. Keep the aircraft stationary and horizontal during calibration, which will take 5 to 10 minutes. The completion block will be called once the calibration is started. Use the onUpdate method to check the execution status of the IMU calibration. It is recommended to reboot the device after IMU calibration. It is recommended to invoke reboot after IMU calibration.
Input Parameters:
@Nullable CompletionCallback callbackCompletion callback.
methodstartIMUCalibration
method startIMUCalibration
void startIMUCalibration(@IntRange(from = 0, to = 2) int index,                                            @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.START_IMU_CALIBRATION_WITH_ID
Description:
Starts the calibration for IMU with a specific ID. Keep the aircraft stationary and horizontal during calibration, which will take 5 to 10 minutes. The completion block will be called once the calibration is started. Use the onUpdate method to check the execution status of the IMU calibration. It is recommended to reboot the device after IMU calibration.
Input Parameters:
@IntRange(from = 0, to = 2) int indexThe IMU with the specific ID to calibrate.@Nullable CompletionCallback callbackCompletion callback to check if the calibration starts successfully.
Gravity Center CalibrationmethodstartGravityCenterCalibration
method startGravityCenterCalibration
void startGravityCenterCalibration(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Starts gravity center calibration. Keep the aircraft hover without wind during calibration. The completion block will be called once the calibration is started.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned value(s).
methodstopGravityCenterCalibration
method stopGravityCenterCalibration
void stopGravityCenterCalibration(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Stop gravity center calibration.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned value(s).
PipeLines
Save pipeline LogmethodsavePipelinesLog
method savePipelinesLog
void savePipelinesLog(boolean enabled)
Package:dji.sdk.flightcontroller
Description:
Sets true to save log for pipelines. In order to improve developer's experience on SDK interconnectivity, Pipeline is designed to save log files locally when files are transferred, during which the speed is 475KB per minute. Please be careful with the device storage.
Input Parameters:
boolean enabledtrue to save log files.
Get pipelinemethodgetPipelines
method getPipelines
Pipelines getPipelines()
Package:dji.sdk.flightcontroller
Description:
The pipelines to transmit data between onboard device and DJI mobile SDK. It's only supported by Matrice 300 RTK.
Return:
PipelinesAn instance of Pipelines.
Sub Components
Landing GearmethodgetLandingGear
method getLandingGear
LandingGear getLandingGear()
Package:dji.sdk.flightcontroller
Description:
Landing Gear object. For products with movable landing gear only.
Return:
LandingGearAn instance of LandingGear.
methodisLandingGearMovable
method isLandingGearMovable
boolean isLandingGearMovable()
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.IS_LANDING_GEAR_MOVABLE
Description:
true if landing gear is supported for the connected aircraft.
Return:
booleanA boolean value.
SimulatormethodgetSimulator
method getSimulator
Simulator getSimulator()
Package:dji.sdk.flightcontroller
Description:
Simulator object.
Return:
SimulatorAn instance of Simulator.
Onboard SDK DevicemethodisOnboardSDKDeviceAvailable
method isOnboardSDKDeviceAvailable
boolean isOnboardSDKDeviceAvailable()
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.IS_ON_BOARD_SDK_AVAILABLE
Description:
Returns if the Onboard SDK feature is available on the connected product.
Return:
booleanA boolean value.
methodsendDataToOnboardSDKDevice
method sendDataToOnboardSDKDevice
void sendDataToOnboardSDKDevice(@Size(min = 1, max = 100) byte[] data,                                                   @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.SEND_DATA_TO_ON_BOARD_SDK_DEVICE
Description:
If there is a device connected to the aircraft using the Onboard SDK, this method will send data to that device. The size of the data cannot be greater than 100 bytes, and will be sent in 40 byte increments every 14ms. This method is only supported on products that support the Onboard SDK (Matrice 210 V1, Matrice 210 V2, Matrice 300 RTK, Matrice 100, Matrice 600, Matrice 600 Pro, A3, A3 Pro, and N3).
Input Parameters:
@Size(min = 1, max = 100) byte[] dataData to be sent to the external device. The size of the data should not be larger than 100 bytes.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
Flight Actions
MotorsmethodturnOnMotors
method turnOnMotors
void turnOnMotors(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.TURN_ON_MOTORS
Description:
Turns on the aircraft's motors. Supported by flight controller firmware 3.1.0.0 or above.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodturnOffMotors
method turnOffMotors
void turnOffMotors(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.TURN_OFF_MOTORS
Description:
Turns off the aircraft's motors. The method can only be called when the aircraft is on the ground.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
Urgent Stop ModemethodsetUrgentStopModeEnabled
method setUrgentStopModeEnabled
void setUrgentStopModeEnabled(boolean enabled, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Enables urgent stop mode. When urgent stop mode is enabled, the motor can be stopped by pushing sticks inner/outer simultaneously at any time. Use with caution. Supported only by Phantom 4 RTK.
Input Parameters:
boolean enabledtrue to enable urgent stop mode.@Nullable CompletionCallback callbackCallback that receives the setter execution result.
methodgetUrgentStopModeEnabled
method getUrgentStopModeEnabled
void getUrgentStopModeEnabled(       @NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Gets if urgent stop mode is enabled or not. Supported only by Phantom 4 RTK.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackCompletion callback that receives the execution result.
ESC BeepmethodsetESCBeepEnabled
method setESCBeepEnabled
void setESCBeepEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Enables ESC beeping.
Input Parameters:
boolean enabledtrue to enable ESC beeping.@Nullable final CompletionCallback callbackThe execution callback with the execution result returned.
methodgetESCBeepEnabled
method getESCBeepEnabled
void getESCBeepEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Determines if ESC beeping is enabled.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
CallbackmethodsetGravityCenterStateCallback
method setGravityCenterStateCallback
void setGravityCenterStateCallback(@Nullable GravityCenterState.Callback callback)
Package:dji.sdk.flightcontroller
Description:
Sets the callback function that updates the gravity calibration's current state data.
Input Parameters:
@Nullable GravityCenterState.Callback callbackThe execution callback with the execution result returned.
Take OffmethodstartTakeoff
method startTakeoff
void startTakeoff(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.TAKE_OFF
Description:
Starts aircraft takeoff. Takeoff is considered complete when the aircraft is hovering 1.2 meters (4 feet) above the ground. Completion block is called when aircraft crosses 0.5 meters (1.6 feet). If the motors are already on, this command cannot be executed.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodstartPrecisionTakeoff
method startPrecisionTakeoff
void startPrecisionTakeoff(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Starts aircraft precision takeoff. Precision Takeoff is considered complete when the aircraft is hovering 6 meters (20 feet) above the ground. Completion block is called when aircraft crosses 0.5 meters (1.6 feet). If the motors are already on, this command cannot be executed.  This feature need vision assisted positioning enabled on.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodcancelTakeoff
method cancelTakeoff
void cancelTakeoff(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.CANCEL_TAKE_OFF
Description:
Stops aircraft takeoff. If called before startTakeoff is complete, the aircraft will cancel takeoff (startTakeoff completion block will return an error) and hover at the current height.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
LandmethodstartLanding
method startLanding
void startLanding(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.START_LANDING
Description:
Starts auto-landing of the aircraft. Returns completion block once aircraft begins to descend for auto-land.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodcancelLanding
method cancelLanding
void cancelLanding(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.CANCEL_LANDING
Description:
Stops auto-landing of the aircraft. If called before startLanding is complete, then the auto landing will be canceled (startLanding completion block will return an error) and the aircraft will hover at its current location.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodconfirmLanding
method confirmLanding
void confirmLanding(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.CONFIRM_LANDING
Description:
Confirms continuation of landing action. When the clearance between the aircraft and the ground is less than 0.3m, the aircraft will pause landing and wait for user's confirmation. Can use isLandingConfirmationNeeded in FlightControllerState to check if confirmation is needed. It is supported by flight controller firmware 3.2.0.0 and above.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned value(s).
Reboot Dronemethodreboot
method reboot
void reboot(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Reboot the core component of the aircraft. It is recommended to invoke this method after IMU calibration.  For Matrice 300 RTK, reboot the aircraft. For Mavic Mini, DJI Mini SE, reboot the airlink.  For Maivc Air 2, reboot the battery.  Others, reboot the flight controller.
Input Parameters:
@Nullable CompletionCallback callbackCompletion callback that receives the execution result.
LED Settings
Enable LEDmethodsetLEDsEnabledSettings
method setLEDsEnabledSettings
void setLEDsEnabledSettings(LEDsSettings ledsSettings, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.LEDS_ENABLED_SETTINGS
Description:
Turns on/off different sets of LEDs on the aircraft. All the LEDs are on by default.
Input Parameters:
LEDsSettings ledsSettingsSettings to control LEDs.@Nullable CompletionCallback callbackCompletion callback that receives the setter execution result.
methodgetLEDsEnabledSettings
method getLEDsEnabledSettings
void getLEDsEnabledSettings(@NonNull CompletionCallbackWith<LEDsSettings> callback)
Package:dji.sdk.flightcontroller
Description:
Determines the status of LEDs on the aircraft.
Input Parameters:
@NonNull CompletionCallbackWith<LEDsSettings> callbackThe execution callback with the returned value(s).
Virtual Sticks
SetupmethodisVirtualStickControlModeAvailable
method isVirtualStickControlModeAvailable
boolean isVirtualStickControlModeAvailable()
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.IS_VIRTUAL_STICK_CONTROL_MODE_AVAILABLE
Description:
Indicates whether the virtual stick control interface can be used. Virtual stick mode is only available when all of the follow requirements are met:  Virtual stick mode is enabled. No waypoint, hotpoint, or follow-me mission is running. FlightOrientationMode is set to AIRCRAFT_HEADING Terrain-follow is disabled if the aircraft supports this feature. Tripod mode is disabled if the aircraft supports this feature.
Return:
booleantrue if virtual stick mode is available.
methodsetVirtualStickModeEnabled
method setVirtualStickModeEnabled
void setVirtualStickModeEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.VIRTUAL_STICK_CONTROL_MODE_ENABLED
Description:
Enables/disables virtual stick control mode. By enabling virtual stick control mode, the aircraft can be controlled using sendVirtualStickFlightControlData. Not supported by Mavic Pro when using the WiFi connection.
Input Parameters:
boolean enabledtrue to enable virtual stick mode.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetVirtualStickModeEnabled
method getVirtualStickModeEnabled
void getVirtualStickModeEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.VIRTUAL_STICK_CONTROL_MODE_ENABLED
Description:
Gets virtual stick mode status (enabled/disabled). Not supported by Mavic Pro when using the WiFi connection.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned execution result.
methodisVirtualStickAdvancedModeEnabled
method isVirtualStickAdvancedModeEnabled
boolean isVirtualStickAdvancedModeEnabled()
Package:dji.sdk.flightcontroller
Description:
true if Virtual Stick advanced mode is enabled. By default, it is false. Assuming GPS signal is good, advanced mode will allow aircraft to compensate for wind when hovering. For the Phantom 4, collision avoidance can be enabled for virtual stick control if advanced mode is on, and collision avoidance is enabled in FlightAssistant. Only supported by flight controller firmware versions 3.1.x.x or above. CAUTION: It will be reset to false when the flight controller is reconnected.
Return:
booleanA boolean value.
methodsetVirtualStickAdvancedModeEnabled
method setVirtualStickAdvancedModeEnabled
void setVirtualStickAdvancedModeEnabled(boolean virtualStickAdvancedModeEnabled)
Package:dji.sdk.flightcontroller
Description:
Set true to enable Virtual Stick advanced mode. By default, it is false. Assuming GPS signal is good, advanced mode will allow aircraft to compensate for wind when hovering.
For the Phantom 4, collision avoidance can be enabled for virtual stick
control if advanced mode is on, and collision avoidance is enabled in FlightAssistant.
Only supported by flight controller firmware versions 3.1.0.0 or above.
Input Parameters:
boolean virtualStickAdvancedModeEnabled<code>True</code> for enabling advanced mode.
Control ModesmethodgetVerticalControlMode
method getVerticalControlMode
VerticalControlMode getVerticalControlMode()
Package:dji.sdk.flightcontroller
Description:
The vertical control mode for virtual stick. CAUTION: It will be reset to VELOCITY when the flight controller is reconnected.
Return:
VerticalControlModeAn enum value of VerticalControlMode.
methodsetVerticalControlMode
method setVerticalControlMode
void setVerticalControlMode(@NonNull VerticalControlMode verticalControlMode)
Package:dji.sdk.flightcontroller
Description:
Sets whether virtual stick vertical controller changes aircraft's altitude or vertical velocity.
Input Parameters:
@NonNull VerticalControlMode verticalControlModeA specific DJIVirtualStickVerticalControlMode object.
methodgetRollPitchControlMode
method getRollPitchControlMode
RollPitchControlMode getRollPitchControlMode()
Package:dji.sdk.flightcontroller
Description:
The roll and pitch control mode for virtual stick. CAUTION: It will be reset to ANGLE when the flight controller is reconnected.
Return:
RollPitchControlModeAn enum value of RollPitchControlMode.
methodsetRollPitchControlMode
method setRollPitchControlMode
void setRollPitchControlMode(@NonNull RollPitchControlMode rollPitchControlMode)
Package:dji.sdk.flightcontroller
Description:
Sets whether roll/pitch virtual controllers change aircraft's angle relative to level orientation, or aircraft's velocity on horizontal axes.
Input Parameters:
@NonNull RollPitchControlMode rollPitchControlModeA specific DJIVirtualStickRollPitchControlMode object.
methodgetYawControlMode
method getYawControlMode
YawControlMode getYawControlMode()
Package:dji.sdk.flightcontroller
Description:
The yaw control mode for virtual stick. CAUTION: It will be reset to ANGLE when the flight controller is reconnected.
Return:
YawControlModeAn enum value of YawControlMode.
methodsetYawControlMode
method setYawControlMode
void setYawControlMode(@NonNull YawControlMode yawControlMode)
Package:dji.sdk.flightcontroller
Description:
Sets whether virtual stick yaw controller changes aircraft's heading by angle or by angular velocity.
Input Parameters:
@NonNull YawControlMode yawControlModeA specific DJIVirtualStickYawControlMode object.
Coordinate SystemmethodgetRollPitchCoordinateSystem
method getRollPitchCoordinateSystem
FlightCoordinateSystem getRollPitchCoordinateSystem()
Package:dji.sdk.flightcontroller
Description:
The coordinate system for virtual stick. CAUTION: It will be reset to GROUND when the flight controller is reconnected.
Return:
FlightCoordinateSystemCoordinate system object.
methodsetRollPitchCoordinateSystem
method setRollPitchCoordinateSystem
void setRollPitchCoordinateSystem(@NonNull FlightCoordinateSystem rollPitchCoordinateSystem)
Package:dji.sdk.flightcontroller
Description:
Sets whether horizontal axes are fixed relative to the ground or to the aircraft.
Input Parameters:
@NonNull FlightCoordinateSystem rollPitchCoordinateSystemA specific rollPitchCoordinateSystem object.
Send CommandmethodsendVirtualStickFlightControlData
method sendVirtualStickFlightControlData
void sendVirtualStickFlightControlData(@NonNull FlightControlData controlData,                                                          @Nullable final CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.SEND_VIRTUAL_STICK_FLIGHT_CONTROL_DATA
Description:
Sends flight control data using virtual stick commands. The isVirtualStickControlModeAvailable method must return true to use virtual stick commands. Virtual stick commands should be sent to the aircraft between 5 Hz and 25 Hz. If virtual stick commands are not sent frequently enough, the aircraft may regard the connection as broken, which will cause the aircraft to hover in place until the next command comes through.
Input Parameters:
@NonNull FlightControlData controlDataFlight control data@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Flight Assistance
Collision Avoidance and Vision PositioningmethodisFlightAssistantSupported
method isFlightAssistantSupported
boolean isFlightAssistantSupported()
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.IS_FLIGHT_ASSISTANT_SUPPORTED
Description:
true if the product supports IntelligentFlightAssistant.
Return:
booleanA boolean value.
methodgetFlightAssistant
method getFlightAssistant
@Nullable FlightAssistant getFlightAssistant()
Package:dji.sdk.flightcontroller
Description:
Intelligent flight assistant.
Return:
FlightAssistantAn instance of FlightAssistant.
Access LockermethodgetAccessLocker
method getAccessLocker
AccessLocker getAccessLocker()
Package:dji.sdk.flightcontroller
Description:
Gets the instance of the access locker. It is used to encapsulate the access protection features on the aircraft.
Return:
AccessLockerInstance of the access locker. null if it is not supported by the aircraft.
Check Access Locker SupportedmethodisAccessLockerSupported
method isAccessLockerSupported
boolean isAccessLockerSupported()
Package:dji.sdk.flightcontroller
Description:
true if the product supports AccessLocker.
Return:
booleanA boolean value.
Flight Orientation ModemethodsetFlightOrientationMode
method setFlightOrientationMode
void setFlightOrientationMode(@NonNull FlightOrientationMode type,                                                 @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.ORIENTATION_MODE
Description:
Sets the aircraft flight orientation relative to the Aircraft Heading, Course Lock, or Home Lock. See the Flight Controller User Guide for more information about flight orientation. Not supported by Mavic Mini, DJI Mini 2, DJI Mini SE and Mavic Air 2, DJI Air 2S.
Input Parameters:
@NonNull FlightOrientationMode typeThe orientation mode.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodlockCourseUsingCurrentHeading
method lockCourseUsingCurrentHeading
void lockCourseUsingCurrentHeading(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.LOCK_COURSE_USING_CURRENT_HEADING
Description:
Locks the current heading of the aircraft as the Course Lock. Used when Flight Orientation Mode is COURSE_LOCK.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result. Please refer to DJIBaseComponent for more information about the block
Tripod ModemethodsetTripodModeEnabled
method setTripodModeEnabled
void setTripodModeEnabled(boolean enabled,                                             @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Enables/disables tripod mode. Tripod Mode drops the aircraft's maximum speed to 2.2mph (3.6kph), and significantly reduces the control stick sensitivity of the remote controller to give the user the precision needed for accurate framing. When tripod mode is enabled, missions, terrain follow mode, course lock, and home lock are not allowed. Tripod mode is not allowed if the aircraft is running a mission. If GPS or vision positioning aren't available, tripod mode cannot be enabled. If the GPS and/or the vision system is providing the flight controller with velocity information, the aircraft will be able to automatically compensate for wind. If however, position information is not available, manual intervention will be required. User should beware that any manual compensation will be limited due to the reduced maximum velocity and sensitivity. If GPS and vision position become unavailable while in tripod mode, it is advisable to alert the user and disable Tripod Mode. Not supported by Mavic 2 Enterprise Advanced.
Input Parameters:
boolean enabledtrue to enable tripod mode.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetTripodModeEnabled
method getTripodModeEnabled
void getTripodModeEnabled(@NonNull CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Gets tripod mode status (enabled/disabled). It is supported by Mavic Pro, Mavic Mini, DJI Mini 2, DJI Mini SE.
Input Parameters:
@NonNull CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Cinematic ModemethodsetCinematicModeEnabled
method setCinematicModeEnabled
void setCinematicModeEnabled(boolean enabled,                                             @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Enables/disables cinematic mode. In Cinematic Mode, you can shoot more stable and smooth photos and videos. Aircraft yaw speed will be lower and braking distance will be longer. It's only supported by Mavic Pro, Spark, Mavic 2 Zoom and Mavic 2 Pro.
Input Parameters:
boolean enabledtrue to enable cinematic mode.@Nullable CompletionCallback callbackThe execution callback with the returned value(s).
methodgetCinematicModeEnabled
method getCinematicModeEnabled
void getCinematicModeEnabled(@NonNull CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Gets cinematic mode status (enabled/disabled). It's only supported by Mavic Pro, Spark, Mavic 2 Zoom and Mavic 2 Pro.
Input Parameters:
@NonNull CompletionCallbackWith<Boolean> callbackThe execution callback with the returned boolean value.
Cinematic BrakemethodsetCinematicBrakeSensitivity
method setCinematicBrakeSensitivity
void setCinematicBrakeSensitivity(int brakeSensitivity, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Adjusts the braking sensitivity when cinematic mode is enabled. Higher sensitivity can shorten the braking distance in cinematic mode. It's supported by Mavic Pro, Spark, Mavic 2 Zoom and Mavic 2 Pro.
Input Parameters:
int brakeSensitivityBrake sensitivity in cinematic mode.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetCinematicBrakeSensitivity
method getCinematicBrakeSensitivity
void getCinematicBrakeSensitivity(@NonNull CompletionCallbackWith<Integer> callback)
Package:dji.sdk.flightcontroller
Description:
Gets the braking sensitivity when cinematic mode is enabled. Higher sensitivity can shorten the braking distance in cinematic mode. It's supported by Mavic Pro, Spark, Mavic 2 Zoom and Mavic 2 Pro.
Input Parameters:
@NonNull CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
Cinematic YawmethodsetCinematicYawSpeed
method setCinematicYawSpeed
void setCinematicYawSpeed(float yawSpeed, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Adjusts the aircraft's yaw speed when cinematic mode is enabled. It's supported by Mavic Pro, Spark, Mavic 2 Zoom and Mavic 2 Pro.
Input Parameters:
float yawSpeedThe aircraft's yaw speed in cinematic mode.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetCinematicYawSpeed
method getCinematicYawSpeed
void getCinematicYawSpeed(@NonNull CompletionCallbackWith<Float> callback)
Package:dji.sdk.flightcontroller
Description:
Gets the aircraft's yaw speed when cinematic mode is enabled. It's supported by Mavic Pro, Spark, Mavic 2 Zoom and Mavic 2 Pro.
Input Parameters:
@NonNull CompletionCallbackWith<Float> callbackThe execution callback with the returned value(s).
Terrain Follow ModemethodsetTerrainFollowModeEnabled
method setTerrainFollowModeEnabled
void setTerrainFollowModeEnabled(Boolean enabled,                                                    @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.TERRAIN_FOLLOW_MODE_ENABLED
Description:
Enable/disable terrain follow mode. The aircraft uses height information gathered by the onboard ultrasonic system and its downward facing cameras to keep flying at the same height above the ground.
Input Parameters:
Boolean enabledtrue to enable terrain follow mode.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetTerrainFollowModeEnabled
method getTerrainFollowModeEnabled
void getTerrainFollowModeEnabled(       @NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.TERRAIN_FOLLOW_MODE_ENABLED
Description:
Gets terrain mode status (enabled/disabled).
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Advanced Control ModemethodsetControlMode
method setControlMode
void setControlMode(@NonNull ControlMode mode, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.CONTROL_MODE
Description:
Sets the control mode of the flight controller. It is highly recommended you keep the default value of SMART. See ControlMode for details. Only supported by stand-alone A3.
Input Parameters:
@NonNull ControlMode modeControl mode to set.@Nullable CompletionCallback callbackCompletion callback that receives the setter execution result.
methodgetControlMode
method getControlMode
void getControlMode(@NonNull CompletionCallbackWith<ControlMode> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.CONTROL_MODE
Description:
Gets the control mode of the flight controller.
Input Parameters:
@NonNull CompletionCallbackWith<ControlMode> callbackThe execution callback with the returned value(s).
Auto Quick SpinmethodsetAutoQuickSpinEnabled
method setAutoQuickSpinEnabled
void setAutoQuickSpinEnabled(boolean enabled, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Enable/disable Auto Quick Spin. When the gimbal reaches a yaw movement limit, the aircraft will automatically rotate 360 degrees to unwind the gimbal, allowing it to continue moving in the yaw direction. This method is only available when the aircraft is flying at least 3m above the ground. It is only supported by Inspire 2.
Input Parameters:
boolean enabledtrue to enable Auto Quick Spin.@Nullable CompletionCallback callbackThe execution callback with the returned value(s).
methodgetQuickSpinEnabled
method getQuickSpinEnabled
void getQuickSpinEnabled(@NonNull CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.QUICK_SPIN_ENABLED
Description:
Gets current Auto Quick Spin mode (enabled/disabled). It is only supported by Inspire 2.
Input Parameters:
@NonNull CompletionCallbackWith<Boolean> callbackThe execution callback with the returned execution result.
Aircraft Heading Turning SpeedmethodsetAircraftHeadingTurningSpeed
method setAircraftHeadingTurningSpeed
void setAircraftHeadingTurningSpeed(@NonNull HardwareState.FlightModeSwitch mode,                                                       int speed,                                                       @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Setting a larger value increases the yaw speed of the aircraft when the control sticks are pressed. The settable range of speed changes according to the mode. When the mode is normal, the speed range is (20,90). When the mode is sport, the speed range is (20,130). When the mode is tripod, the speed range is (20,30). Only supported by Mavic Air 2, DJI Air 2S.
Input Parameters:
@NonNull HardwareState.FlightModeSwitch modeThe mode that the setting will be applied to.int speedThe speed to set for aircraft heading turning.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetAircraftHeadingTurningSpeed
method getAircraftHeadingTurningSpeed
void getAircraftHeadingTurningSpeed(@NonNull HardwareState.FlightModeSwitch mode,                                                       @NonNull CompletionCallbackWith<Integer> callback)
Package:dji.sdk.flightcontroller
Description:
Gets the heading turning speed of the aircraft according to the mode. Only supported by Mavic Air 2, DJI Air 2S.
Input Parameters:
@NonNull HardwareState.FlightModeSwitch modeThe mode to query.@NonNull CompletionCallbackWith<Integer> callbackThe completion callback that receives the execution result.
Aircraft Heading Turning SmoothnessmethodsetAircraftHeadingTurningSmoothness
method setAircraftHeadingTurningSmoothness
void setAircraftHeadingTurningSmoothness(@NonNull HardwareState.FlightModeSwitch mode,                                                            @IntRange(from = 0, to = 100) int smoothingValue,                                                            @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Setting a larger angle increases the yaw buffer when the control sticks are pressed. The value should be in the range [1, 100]. Only supported by Mavic Air 2, DJI Air 2S.
Input Parameters:
@NonNull HardwareState.FlightModeSwitch modeThe mode that the setting will be applied to.@IntRange(from = 0, to = 100) int smoothingValueThe smoothness that the setting will be applied to.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetAircraftHeadingTurningSmoothness
method getAircraftHeadingTurningSmoothness
void getAircraftHeadingTurningSmoothness(@NonNull HardwareState.FlightModeSwitch mode,                                                            @NonNull CompletionCallbackWith<Integer> callback)
Package:dji.sdk.flightcontroller
Description:
Gets the smoothness of the aircraft heading turn according to the mode. Only supported by Mavic Air 2, DJI Air 2S.
Input Parameters:
@NonNull HardwareState.FlightModeSwitch modeThe mode to query.@NonNull CompletionCallbackWith<Integer> callbackThe completion callback that receives the execution result.
Propeller Cage ProtectionmethodsetPropellerCageProtectionEnabled
method setPropellerCageProtectionEnabled
void setPropellerCageProtectionEnabled(boolean enabled, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Do not turn on the Propeller Cage switch if propeller cages are not mounted. By enabling the Propeller Cage switch, you will set the Force Landing battery level to 15% and disable Wind Check and Propeller Check. When propeller cages are installed, no other accessories (except for official ND filters) can be attached. Only supported by Mavic Mini, DJI Mini 2, DJI Mini SE.
Input Parameters:
boolean enabledtrue to enable propeller cage protection.@Nullable CompletionCallback callbackCallback that receives the execution result.
methodgetPropellerCageProtectionEnabled
method getPropellerCageProtectionEnabled
void getPropellerCageProtectionEnabled(@NonNull CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Gets whether the propeller cage switch is turned on.
Input Parameters:
@NonNull CompletionCallbackWith<Boolean> callbackCompletion block that receives the execution result.
Attitude Flight ModemethodtoggleAttitudeFlightMode
method toggleAttitudeFlightMode
void toggleAttitudeFlightMode(boolean isOpen, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
true to change the Tripod(T) mode toggle to Attitude mode toggle from the remote controller. You should called setMultipleFlightModeEnabled to enable multiple flight mode first, otherwise this interfaces take no effect. if this mode is enabled, once you switch the mode toggle on remote controller to Tripod(T) mode, aircraft will enter Attitude mode, in this mode, aircraft is easily distured and drifts horizontally in consequence, you have to manully hover the aircraft. Also, the active braking system is inactive. It is supported only by Matrice 300 RTK.
Input Parameters:
boolean isOpentrue to change the Tripod(T) mode toggle to Attitude mode toggle from the remote controller.
methodgetIsAttitudeFlightModeOpen
method getIsAttitudeFlightModeOpen
void getIsAttitudeFlightModeOpen(@NonNull CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
true if custom the Tripod(T) mode to Attitude mode on the remote controller is enabled. It is supported only by Matrice 300 RTK.
Takeoff Without GPSmethodlockTakeoffWithoutGPS
method lockTakeoffWithoutGPS
void lockTakeoffWithoutGPS(boolean lock, @Nullable CompletionCallback<DJIError> callback)
Package:dji.sdk.flightcontroller
Description:
When GPS signal low, aircraft unable to auto hover and takeoff restricted. If you want to unlock takeoff without GPS , ensure there no people or obstacles within 2 m around the aircraft, and pay close attention to operating the remote controller at all times to avoid collisions.
Input Parameters:
boolean lockfalse to unlock takeoff without GPS.@Nullable CompletionCallback<DJIError> callbackCallback that receives the execution result.
methodisLockTakeoffWithoutGPS
method isLockTakeoffWithoutGPS
void isLockTakeoffWithoutGPS(@NonNull CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Return false if unlock takeoff without GPS.
Input Parameters:
@NonNull CompletionCallbackWith<Boolean> callbackCallback that receives the execution result.
Propeller Cover LimitmethodgetPropellerCoverLimitEnabled
method getPropellerCoverLimitEnabled
void getPropellerCoverLimitEnabled(@Nullable CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Return true if propeller cover limit mode is enabled.
Input Parameters:
@Nullable CompletionCallbackWith<Boolean> callbackCallback that receives the execution result.
methodsetPropellerCoverLimitEnabled
method setPropellerCoverLimitEnabled
void setPropellerCoverLimitEnabled(@NonNull boolean enabled, @Nullable CompletionCallback<DJIError> callback)
Package:dji.sdk.flightcontroller
Description:
This mode should only be enabled when using accessories like propeller guards and the aircraft is flying in wind-free environments. Shown as payload mode in DJI fly. Only Supported by DJI Mini 2.
Input Parameters:
@NonNull boolean enabledtrue to enable the propeller cover limit.@Nullable CompletionCallback<DJIError> callbackCallback that receives the execution result.
Coordinated TurnmethodsetCoordinatedTurnEnabled
method setCoordinatedTurnEnabled
void setCoordinatedTurnEnabled(@NonNull boolean enabled, @Nullable CompletionCallback<DJIError> callback)
Package:dji.sdk.flightcontroller
Description:
Enables the coordinated turn. Improves aerodynamic efficiency. The aircraft is flying in the direction of the turn, without sideslipping. Only supported by M300 RTK and M350 RTK.
Input Parameters:
@NonNull boolean enabledtrue to enable the coordinated turn.@Nullable CompletionCallback<DJIError> callbackCallback that receives the execution result.
methodgetCoordinatedTurnEnabled
method getCoordinatedTurnEnabled
void getCoordinatedTurnEnabled(@Nullable CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Get whether the coordinated turn switch is on.  Only supported by M300 RTK and M350 RTK.
Input Parameters:
@Nullable CompletionCallbackWith<Boolean> callbackCompletion block that receives the execution result.
Navigation Satellite SystemmethodsetNavigationSatelliteSystem
method setNavigationSatelliteSystem
void setNavigationSatelliteSystem(@NonNull NavigationSatelliteSystem system, @Nullable CompletionCallback<DJIError> callback)
Package:dji.sdk.flightcontroller
Description:
The selection of satellite positioning system is only supported when the RTK positioning function is turned off, and cannot be modified in the air. If RTK positioning function is turned on, aircraft uses GPS, GLONASS, Galileo, and BDS data to determine location. Only supported by M300 RTK and M350 RTK.
Input Parameters:
@NonNull NavigationSatelliteSystem systemNavigation satellite system.@Nullable CompletionCallback<DJIError> callbackCallback that receives the execution result.
methodgetNavigationSatelliteSystem
method getNavigationSatelliteSystem
void getNavigationSatelliteSystem(@Nullable CompletionCallbackWith<NavigationSatelliteSystem> callback)
Package:dji.sdk.flightcontroller
Description:
Get the navigation satellite system. Only supported by M300 RTK and M350 RTK.
Input Parameters:
@Nullable CompletionCallbackWith<NavigationSatelliteSystem> callbackCallback that receives the execution result.
Flight LimitationmethodsetMaxFlightHeight
method setMaxFlightHeight
void setMaxFlightHeight(@IntRange(from = 20, to = 500) int maxHeight,                                  @Nullable final CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.MAX_FLIGHT_HEIGHT
Description:
Sets the maximum flight height limitation of the aircraft. The maxHeight value must be in the  range [20, 500] m.
Input Parameters:
@IntRange(from = 20, to = 500) int maxHeightMaximum height of the aircraft.@Nullable final CompletionCallback callbackThe execution callback with the execution result returned.
methodgetMaxFlightHeight
method getMaxFlightHeight
void getMaxFlightHeight(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.MAX_FLIGHT_HEIGHT
Description:
Gets the maximum flight height limitation of the aircraft.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
methodsetMaxFlightRadius
method setMaxFlightRadius
void setMaxFlightRadius(@IntRange(from = 15, to = 8000) int maxRadius,                                  @Nullable final CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.MAX_FLIGHT_RADIUS
Description:
Sets the maximum flight radius limitation of the aircraft. The radius is calculated from the home point.  The maxRadius value must be in the range [15, 8000] m.
Input Parameters:
@IntRange(from = 15, to = 8000) int maxRadiusMaximum flight radius of the aircraft.@Nullable final CompletionCallback callbackThe execution callback with the execution result returned.
methodgetMaxFlightRadius
method getMaxFlightRadius
void getMaxFlightRadius(@NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.MAX_FLIGHT_RADIUS
Description:
Gets the maximum flight radius limitation of the aircraft.
Input Parameters:
@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
methodsetMaxFlightRadiusLimitationEnabled
method setMaxFlightRadiusLimitationEnabled
void setMaxFlightRadiusLimitationEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.MAX_FLIGHT_RADIUS_ENABLED
Description:
Sets whether the maximum flight radius limitation is enabled. If enabled is false,  there is no maximum flight radius limitation.
Input Parameters:
boolean enabledMaximum flight radius limitation is enabled.@Nullable final CompletionCallback callbackThe execution callback with the execution result returned.
methodgetMaxFlightRadiusLimitationEnabled
method getMaxFlightRadiusLimitationEnabled
void getMaxFlightRadiusLimitationEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.MAX_FLIGHT_RADIUS_ENABLED
Description:
Gets the maximum flight radius limitation status (enabled/disabled).
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Home
Go HomemethodstartGoHome
method startGoHome
void startGoHome(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.START_GO_HOME
Description:
The aircraft will start to go home. The completion callback will return execution result once this method is invoked.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodcancelGoHome
method cancelGoHome
void cancelGoHome(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.CANCEL_GO_HOME
Description:
The aircraft will stop going home and will hover in place.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
LocationmethodsetHomeLocation
method setHomeLocation
void setHomeLocation(@NonNull LocationCoordinate2D homeLocation,                                        @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.HOME_LOCATION
Description:
Sets the home location of the aircraft. The home location is where the aircraft returns when commanded by startGoHome, when its signal is lost or when the battery is below the lowBatteryWarning threshold. The user should be careful setting a new home point location, as sometimes the product will not be under user control when returning home. A home location is valid if it is within 30m of one of the following:  initial take-off location aircraft's current location current mobile location with at least kCLLocationAccuracyNearestTenMeters accuracy level current remote controller's location as shown by RC GPS.
Input Parameters:
@NonNull LocationCoordinate2D homeLocationHome location latitude and longitude in degrees.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodsetHomeLocationUsingAircraftCurrentLocation
method setHomeLocationUsingAircraftCurrentLocation
void setHomeLocationUsingAircraftCurrentLocation(@Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.HOME_LOCATION_USING_CURRENT_AIRCRAFT_LOCATION
Description:
Sets the home location of the aircraft to the current location of the aircraft. See setHomeLocation for details on home point use.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetHomeLocation
method getHomeLocation
void getHomeLocation(@NonNull CompletionCallbackWith<LocationCoordinate2D> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.HOME_LOCATION
Description:
Gets the home point of the aircraft.
Input Parameters:
@NonNull CompletionCallbackWith<LocationCoordinate2D> callbackThe execution callback with the returned value(s).
AltitudemethodsetGoHomeHeightInMeters
method setGoHomeHeightInMeters
void setGoHomeHeightInMeters(@IntRange(from = 20, to = 500) int height,                                                @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.GO_HOME_HEIGHT_IN_METERS
Description:
Sets the minimum altitude, relative to where the aircraft took off, at which the aircraft must be before going home. This can be useful when the user foresees obstacles in the aircraft's flight path. If the aircraft's current altitude is higher than the minimum go home altitude, it will go home at its current altitude. The valid range for the altitude is from 20m to 500m. But if the aircraft is M300 RTK or M350 RTK, the limit can beyond 500m.
Input Parameters:
@IntRange(from = 20, to = 500) int heightThe aircraft's default go home altitude.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetGoHomeHeightInMeters
method getGoHomeHeightInMeters
void getGoHomeHeightInMeters(@NonNull CompletionCallbackWith<Integer> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.GO_HOME_HEIGHT_IN_METERS
Description:
Gets the minimum altitude (relative to the take-off location in meters) at which the aircraft must be before going home.
Input Parameters:
@NonNull CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
Fail Safes
ConnectionmethodsetConnectionFailSafeBehavior
method setConnectionFailSafeBehavior
void setConnectionFailSafeBehavior(@NonNull ConnectionFailSafeBehavior behavior,                                                      @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.CONNECTION_FAIL_SAFE_BEHAVIOR
Description:
Sets the FailSafe action for when the connection between remote controller and aircraft is lost. It is supported by Mavic Mini, DJI Mini 2, DJI Mini SE and Maivic Air 2.
Input Parameters:
@NonNull ConnectionFailSafeBehavior behaviorThe ConnectionFailSafeBehavior object.@Nullable CompletionCallback callbackThe execution callback with the returned value(s).
methodgetConnectionFailSafeBehavior
method getConnectionFailSafeBehavior
void getConnectionFailSafeBehavior(       @NonNull CompletionCallbackWith<ConnectionFailSafeBehavior> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.CONNECTION_FAIL_SAFE_BEHAVIOR
Description:
Gets the FailSafe action for when the connection between remote controller and aircraft is lost.
Input Parameters:
@NonNull CompletionCallbackWith<ConnectionFailSafeBehavior> callbackThe execution callback with the returned value(s).
BatterymethodsetLowBatteryWarningThreshold
method setLowBatteryWarningThreshold
void setLowBatteryWarningThreshold(@IntRange(from = 15, to = 50) int percent,                                                      @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.LOW_BATTERY_WARNING_THRESHOLD
Description:
Sets the low battery warning threshold as a percentage. The percentage must be in the range of [15, 50]. It is not supported by Mavic Mini, DJI Mini 2, DJI Mini SE, Mavic Air 2 and DJI Air 2S.
Input Parameters:
@IntRange(from = 15, to = 50) int percentLow battery warning percentage.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetLowBatteryWarningThreshold
method getLowBatteryWarningThreshold
void getLowBatteryWarningThreshold(@NonNull CompletionCallbackWith<Integer> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.LOW_BATTERY_WARNING_THRESHOLD
Description:
Gets the low battery warning threshold as a percentage.
Input Parameters:
@NonNull CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
methodsetSeriousLowBatteryWarningThreshold
method setSeriousLowBatteryWarningThreshold
void setSeriousLowBatteryWarningThreshold(@IntRange(from = 10, to = 45) int percent,                                                             @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.SERIOUS_LOW_BATTERY_WARNING_THRESHOLD
Description:
Sets the serious low battery warning threshold as a percentage. The minimum value is 10. The maximum value is value from getLowBatteryWarningThreshold minus 5. It is supported by Mavic Mini, DJI Mini 2, DJI Mini SE.
Input Parameters:
@IntRange(from = 10, to = 45) int percentSerious low battery warning percentage.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetSeriousLowBatteryWarningThreshold
method getSeriousLowBatteryWarningThreshold
void getSeriousLowBatteryWarningThreshold(@NonNull CompletionCallbackWith<Integer> callback)
Package:dji.sdk.flightcontrollerSDK Key:FlightControllerKey.SERIOUS_LOW_BATTERY_WARNING_THRESHOLD
Description:
Gets the serious low battery warning threshold in percentage.
Input Parameters:
@NonNull CompletionCallbackWith<Integer> callbackThe execution callback with the value(s) returned.
Smart RTHmethodsetSmartReturnToHomeEnabled
method setSmartReturnToHomeEnabled
void setSmartReturnToHomeEnabled(boolean enabled, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Enables/disables Smart Return-To-Home (RTH) feature. When it is enabled, aircraft will request to go home when remaining battery is only enough for completing the go-home action. For Mavic Mini, DJI Mini 2, DJI Mini SE, the aircraft will return to home point when the remaning battery is low.
Input Parameters:
boolean enabledtrue to enable smart RTH.@Nullable CompletionCallback callbackCompletion block that receives the setter execution result.
methodgetSmartReturnToHomeEnabled
method getSmartReturnToHomeEnabled
void getSmartReturnToHomeEnabled(       @NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Determines whether Smart Return-To-Home (RTH) feature is enabled or not. When it is enabled, aircraft will request to go home when remaining battery is only enough for completing the go-home action.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackCompletion callback that receives the execution result.
methodconfirmSmartReturnToHomeRequest
method confirmSmartReturnToHomeRequest
void confirmSmartReturnToHomeRequest(boolean confirmed, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Confirms or cancels the Smart Return-To-Home (RTH) request. When Smart RTH is enabled, the aircraft will request to go home when the battery is only enough for going home. Before executing the go-home action, the aircraft will wait for the confirmation from users with 10 seconds count-down. If the "confirmed" parameter is false, the request is canceled and the aircraft will not execute go-home action. Otherwise, go-home action will start. Smart RTH will be triggered only once during the same flight. Flight controller with firmware version lower than 3.0.0.0 does not support confirming the Smart RTH request. User can either cancel the request or wait for the countdown to start go-home action. It is supported by Mavic Mini, DJI Mini 2, DJI Mini SE, DJI Air 2S and Mavic Air 2.
Input Parameters:
boolean confirmedtrue to confirm the request and the aircraft will start go-home immediately.@Nullable CompletionCallback callbackCompletion block to receive the result.
Flight Mode
MappingmethodgetRCSwitchFlightModeMapping
method getRCSwitchFlightModeMapping
void getRCSwitchFlightModeMapping(       @NonNull CompletionCallbackWith<RemoteControllerFlightMode[]> callback)
Package:dji.sdk.flightcontroller
Description:
Gets the mapping between the flight modes and the flight mode switch positions on the remote controller. Elements 0, 1, and 2 of the returned array map to POSITION_ONE, POSITION_TWO, and POSITION_THREE of the getFlightModeSwitch. The value of each Enum item represents the corresponding value of the RemoteControllerFlightMode Enum representing the flight mode. The mapping is fixed for the Phantom series, Inspire series, Mavic Pro, and M100. For N3, A3, Matrice 600, and Matrice 600 Pro the mapping is firmware dependent. With firmware version 3.2.11.0 or above, the mapping can be customized in DJI Assistant 2.
Input Parameters:
@NonNull CompletionCallbackWith<RemoteControllerFlightMode[]> callbackCompletion callback that receives the getter result. Each element of array is an instance with a value of RemoteControllerFlightMode.
Multiple Flight ModemethodsetMultipleFlightModeEnabled
method setMultipleFlightModeEnabled
void setMultipleFlightModeEnabled (boolean enabled, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Enables/disables multiple-flight mode. When multiple-flight mode is enabled, user can change the aircraft's mode to P/F/A/S mode by toggling the switch on the remote controller. If it is disabled, the aircraft will be in P mode.
Input Parameters:
boolean enabledtrue to enable multiple-flight mode.@Nullable CompletionCallback callbackCompletion callback that receives the execution result.
methodgetMultipleFlightModeEnabled
method getMultipleFlightModeEnabled
void getMultipleFlightModeEnabled (@NonNull CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Determines whether multiple-flight mode is enabled. When multiple-flight mode is enabled, user can change the aircraft's mode to P/F/A/S mode by toggling the switch on the remote controller. If it is disabled, the aircraft will be in P mode.
Input Parameters:
@NonNull CompletionCallbackWith<Boolean> callbackCompletion callback that receives the execution result.
Novice Mode EnabledmethodsetNoviceModeEnabled
method setNoviceModeEnabled
void setNoviceModeEnabled(boolean enabled, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Enables novice mode. When novice mode is enabled, the flight speed will become slower and less responsive handling. For Phantom 4 Pro, enabling novice mode will enable the infrared time-of-flight (TOF) sensors on the left and right.
Input Parameters:
boolean enabledtrue to enable novice mode.@Nullable CompletionCallback callbackCompletion block that receives the execution result.
methodgetNoviceModeEnabled
method getNoviceModeEnabled
void getNoviceModeEnabled(@NonNull CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Determines whether novice mode is enabled or not. If novice mode is enabled, the flight speed is slower and less responsive handling. For Phantom 4 Pro, enabling novice mode will enable the infrared time-of-flight (TOF) sensors on the left and right.
Input Parameters:
@NonNull CompletionCallbackWith<Boolean> callbackCompletion callback that receives the execution result.
Power Supply Port EnabledmethodsetPowerSupplyPortEnabled
method setPowerSupplyPortEnabled
void setPowerSupplyPortEnabled(boolean enabled, @Nullable CompletionCallback callback)
Package:dji.sdk.flightcontroller
Description:
Enables the power supply port. It is only supported by M200 series and M200 series v2.
Input Parameters:
boolean enabledtrue if power supply port is enabled.@Nullable CompletionCallback callbackCallback that receives the execution result.
methodgetPowerSupplyPortEnabled
method getPowerSupplyPortEnabled
void getPowerSupplyPortEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.flightcontroller
Description:
Determines whether the power supply port is enabled or not. It is only supported by M200 series and M200 series v2.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackCompletion block that receives the execution result.
Max Flight HeightmethodhasReachedMaxFlightHeight
method hasReachedMaxFlightHeight
boolean hasReachedMaxFlightHeight()
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.HAS_REACHED_MAX_FLIGHT_HEIGHT
Description:
true if the aircraft has reached the maximum flight height.
Return:
booleanA boolean value.
Max Flight RadiusmethodhasReachedMaxFlightRadius
method hasReachedMaxFlightRadius
boolean hasReachedMaxFlightRadius()
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.HAS_REACHED_MAX_FLIGHT_RADIUS
Description:
true if the aircraft has reached the maximum flight radius.
Return:
booleantrue if the aircraft has reached the maximum flight radius.
Related:
enumNavigationSatelliteSystem
enum NavigationSatelliteSystem
enum NavigationSatelliteSystem
Package:dji.common.flightcontroller
Description:
This enum defines the navigation satellite system currently being used.
Enum Members:
GPS_GLONASSUsing GSP and GLONSS satellite data.BEIDOUOnly use Beidou satellite navigation system.
Class Members:
classOnboardSDKDeviceDataCallbackenumVisionDrawHeadingMode
enum VisionDrawHeadingMode
@EXClassNullAway enum VisionDrawHeadingMode
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.DRAW_HEADING_MODE
Description:
The heading mode of the camera used in the vision drawing the 3D orbit data.
Enum Members:
FREEFree mode - Camera direction can be freely adjusted in flight.FORWARDRegular mode - camera direction consistent with course direction.UNKNOWNUnknown.
Class Members:
enumVisionDrawStatus
enum VisionDrawStatus
@EXClassNullAway enum VisionDrawStatus
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.DRAW_STATUS
Description:
State of the vision drawing the 3D orbit data.
Enum Members:
INITInitializing.PREPAREVision got the orbit data, and preparing to calculate the 3D orbit.READY_TO_GOVision has generated the 3D orbit data, and start to download.START_AUTOStarting State (Auto mode).START_MANUALStaring State (Manual mode).PAUSEPause state.OTHEROther unknown state.
Class Members:
enumUrgentStopMotorMode
enum UrgentStopMotorMode
@EXClassNullAway enum UrgentStopMotorMode
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.URGENT_STOP_MOTOR_MODE
Description:
The Mode enum to urgent stop motor.
Enum Members:
CSCCommand only for Inspire 2, Phantom 4, Phantom 4 Professional, Phantom 4 Advanced and M200 series.NEVERCommand only for Inspire 2, Phantom 4, Phantom 4 Professional, Phantom 4 Advanced and M200 series.IN_OUT_ALWAYSCommand only for DJI Mavic Pro and Mavic Air.IN_OUT_WHEN_BREAKDOWNCommand only for DJI Mavic Pro and Mavic Air.UNKNOWNUnknown.
Class Members:
Current StateclassFlightControllerStateGravity Center StateclassGravityCenterStateSensorsclassCompassclassRTKclassLandingGearclassFlightAssistantclassRadarclassSimulatorclassIMUStateAccess LockerclassAccessLockerVirtual SticksclassFlightControlDataenumVerticalControlMode
enum VerticalControlMode
@EXClassNullAway enum VerticalControlMode
Package:dji.common.flightcontroller.virtualstick
Description:
Defines how vertical control values are interpreted by the aircraft.
Enum Members:
VELOCITYSets the virtual stick vertical control values to be a vertical velocity. Positive and negative vertical velocity is for the aircraft ascending and descending respectively. Maximum vertical velocity is defined as 4 m/s. Minimum vertical velocity is defined as -4 m/s.POSITIONSets the virtual stick vertical control values to be an altitude. Maximum position is defined as 500 m. Minimum position is defined as 0 m.
Class Members:
enumRollPitchControlMode
enum RollPitchControlMode
@EXClassNullAway enum RollPitchControlMode
Package:dji.common.flightcontroller.virtualstick
Description:
Defines how manual roll and pitch values are interpreted by the aircraft.
Enum Members:
ANGLESets the roll and pitch values to be an angle relative to a level aircraft. In the body coordinate system, positive and negative pitch angle is for the aircraft rotating about the y-axis in the positive direction or negative direction, respectively. Positive and negative roll angle is the positive direction or negative direction rotation angle about the x-axis, respectively. However in the ground coordinate system, positive and negative pitch angle is the angle value for the aircraft moving south and north, respectively. Positive and negative roll angle is the angle when the aircraft is moving east and west, respectively. Maximum angle is defined as 30 degrees. Minimum angle is defined as -30 degrees.VELOCITYSets the roll and pitch values to be a velocity. In the body coordinate system, positive and negative pitch velocity is for the aircraft moving towards the positive direction or negative direction along the pitch axis and y-axis, respectively. Positive and negative roll velocity is when the aircraft is moving towards the positive direction or negative direction along the roll axis and x-axis, respectively. However, in the ground coordinate system, positive and negative pitch velocity is for the aircraft moving east and west, respectively.  Positive and negative roll velocity is when the aircraft is moving north and south, respectively. Maximum velocity is defined as 15 meters/s. Minimum velocity is defined as -15 meters/s.
Class Members:
enumYawControlMode
enum YawControlMode
@EXClassNullAway enum YawControlMode
Package:dji.common.flightcontroller.virtualstick
Description:
Defines how manual yaw values are interpreted by the aircraft.
Enum Members:
ANGLESets the yaw values to be an angle relative to the north. Positive and negative yaw angle is for the aircraft rotating clockwise and counterclockwise, respectively. Maximum yaw angle is defined as 180 degrees. Minimum yaw angle is defined as -180 degrees.ANGULAR_VELOCITYSets the yaw values to be an angular velocity. Positive and negative angular velocity is for the aircraft rotating clockwise and counterclockwise, respectively. Maximum yaw angular velocity is defined as 100 degrees/s. Minimum yaw angular velocity is defined as -100 degrees/s.
Class Members:
enumFlightCoordinateSystem
enum FlightCoordinateSystem
@EXClassNullAway enum FlightCoordinateSystem
Package:dji.common.flightcontroller.virtualstick
Description:
Flight control coordinate system.
Enum Members:
GROUNDGround coordinate system.BODYBody coordinate system.
Class Members:
Flight AssistanceenumControlMode
enum ControlMode
@EXClassNullAway enum ControlMode
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.CONTROL_MODE
Description:
Control mode of the flight controller. It determines how the pilot can control the aircraft. By default, it is in smart control mode.
Enum Members:
SMARTSmart control mode. The aircraft can stabilize its altitude and attitude in smart mode.MANUALManual control mode. The aircraft will not stabilize its altitude and attitude in manual mode. This mode is for advanced pilots only, and should only be used when the pilot understands the risk of operating in this mode. Any damage to the product when operating in this mode will not be covered under warranty.UNKNOWNUnknown control mode.
Class Members:
enumFlightOrientationMode
enum FlightOrientationMode
@EXClassNullAway enum FlightOrientationMode
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.ORIENTATION_MODE
Description:
Tells the aircraft how to interpret flight commands for forward, backward, left and right. See the Flight Controller User Guide for more information.
Enum Members:
COURSE_LOCKThe aircraft should move relative to a locked course heading.HOME_LOCKThe aircraft should move relative radially to the Home Point.AIRCRAFT_HEADINGThe aircraft should move relative to the front of the aircraft.
Class Members:
Flight Wind WarningenumFlightWindWarning
enum FlightWindWarning
@EXClassNullAway enum FlightWindWarning
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.FLIGHT_WIND_WARNING
Description:
Warning caused by the strong wind.
Enum Members:
LEVEL_0No wind warning.LEVEL_1The wind speed is high. Fly with caution and ensure the aircraft remains within the line of sight.LEVEL_2Strong Wind. Fly with caution and ensure the aircraft remains within line of sight. It is more serious than LEVEL_1.UNKNOWNUnknown.
Class Members:
Obstacle Sensing DirectionenumDJIFlightAssistantObstacleSensingDirection
enum DJIFlightAssistantObstacleSensingDirection
enum DJIFlightAssistantObstacleSensingDirection
Package:dji.common.flightcontroller.flightassistant
Description:
Obstacle sensing direction. It is only supported by Matrice 300 RTK.
Enum Members:
UpwardUpward sensing. The upward distance range is 1.1m~30mDownwardDownward sensing. The downward distance range is 0.6m~30mHorizontalHorizontal Field. The horizontal distance range is 1.1m~40m
Class Members:
HomeclassLocationCoordinate2DFail SafeenumConnectionFailSafeBehavior
enum ConnectionFailSafeBehavior
@EXClassNullAway enum ConnectionFailSafeBehavior
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.CONNECTION_FAIL_SAFE_BEHAVIOR
Description:
Defines aircraft failsafe action when signal between the remote controller and the aircraft is lost.
Enum Members:
HOVERHover.LANDINGLanding.GO_HOMEReturn-to-Home.UNKNOWNUnknown.
Class Members:
Flight ModeenumRemoteControllerFlightMode
enum RemoteControllerFlightMode
@EXClassNullAway enum RemoteControllerFlightMode
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.CURRENT_MODE
Description:
Flight modes that map to the flight mode switch on the remote controller.
Enum Members:
PPositioning mode. GNSS and Vision Positioning Systems are used for positioning if they are available. For products without F mode, intelligent functions such as missions and intelligent orientation control can be performed in P-mode.SSport mode. The maximum flight speed and responsiveness of the aircraft is increased in this mode.AAttitude mode. The GNSS and Vision Positioning Systems are not used for positioning. The aircraft only uses the barometer to maintain altitude. If receiving a GNSS signal, the aircraft can automatically return home if the Remote Controller signal is lost and if the Home Point has been recorded successfully.GGentle mode. The sensitivity and speed of aircraft will be substantially decreased in gentle mode.MManual mode. The aircraft will not stabilize its altitude nor attitude in manual mode. This mode is for advanced pilots only, and should only be used when the pilot understands the risk of operating in this mode. Any damage to the product when operating in this mode will not be covered under warranty. It is supported by stand-alone A3 and N3 and can be enabled in Assistant 2.FFunction mode. Performs the same as Positioning mode with intelligent functions such as missions and intelligent orientation control enabled.TTripod Mode. This mode drops the aircraft's maximum speed and significantly reduces the control stick sensitivity of the remote controller to give the user the precision needed for accurate framing. It is only supported by Mavic 2.UNKNOWNUnknown mode.
Class Members:
enumSmartRTHState
enum SmartRTHState
@EXClassNullAway enum SmartRTHState
Package:dji.common.flightcontroller
Description:
State of Smart Return-To-Home (RTH). It is only used when Smart RTH is enabled.
Enum Members:
IDLESmart RTH is not triggered yet in the current flight. The Smart RTH state will be reset to this value when the aircraft lands.COUNTING_DOWNSmart RTH is triggered and the aircraft is counting down. If no response is received within 10 seconds or the user confirms the request, the aircraft will start to go home and the state will change to EXECUTED. If user cancels the request, the state will change to CANCELLED.EXECUTEDSmart RTH is already executed in the current flight. The state will not be reset until the aircraft lands.CANCELLEDSmart RTH request is cancelled by the user. The state will not be reset until the aircraft lands.UNKNOWNUnknown.
Class Members:
Air Sense System InfoclassAirSenseSystemInformationLED SettingsclassLEDsSettingsLimitsclassLimitsFixed Wing ControlenumFixedWingControl
enum FixedWingControl
enum FixedWingControl
Package:dji.common.flightcontrollerSDK Key:FlightControllerKey.FIXED_WING_CONTROL
Description:
The aircraft will fly forward automatically at a certain speed after entering Fixed-Wing Mode. Push the left stick up to ascend and down to descend. Push either stick left or right to rotate the aircraft. Push the right stick up to accelerate and pushing down will exit Fixed-Wing Mode. See the Flight  Controller User Guide for more information.
Enum Members:
READYPrepare fixed-wing mode.ENTEREnter fixed-wing mode.EXITExit fixed-wing mode.OTHEROther reservations.
Class Members:
Inherited Methods:
dji.sdk.base.BaseComponentmethodsetComponentListener
method setComponentListener
void setComponentListener(ComponentListener listener)
Package:dji.sdk.base
Description:
Sets the listener for the DJI component.
Input Parameters:
ComponentListener listenerThe callback of ComponentListener.
methodgetIndex
method getIndex
int getIndex()
Package:dji.sdk.base
Description:
Returns the component index. Index is zero based. A component will have an index greater than zero when there  are multiple components of the same type on the DJI product, and one of the components already has the index 0.  For instance, M210 can have two gimbal mounted cameras, and will therefore have two gimbal components with indices  0 and 1, and two camera components with indices 0 and 1. For Matrice 600, there are printed numbers on the battery  boxes. The Battery component instance with index 0 corresponds to battery compartment number 1. For Inspire 2  and M200 series, Battery with index 0 corresponds to the battery on the port (left hand) side of the aircraft.  For M210, M210 RTK, M300 RTK and M350 RTK, Camera and Gimbal with index 0 corresponds to the camera and gimbal on the port  (left hand) side of the aircraft. Lidar with index 0 corresponds to the lidar(Zenmuse L1) on the port  (left hand) side of the aircraft.
Return:
intAn int value of index.
methodisConnected
method isConnected
boolean isConnected()
Package:dji.sdk.base
Description:
true if the component is connected.
Return:
booleantrue if the component is connected.
methodgetSerialNumber
method getSerialNumber
void getSerialNumber(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Gets the serial number of the component. Depending on the component, this serial number might not match the serial number found  on the physical component.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value returned.
methodgetFirmwareVersion
method getFirmwareVersion
void getFirmwareVersion(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Returns the firmware version of the component. Each component will  have a different firmware version, the combination of which will  form the package firmware version getFirmwarePackageVersion found in BaseProduct.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value(s) returned.
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ voidgetPowerSupplyPortEnabled
  ‚Ä¢ getRTK
  ‚Ä¢ SDK
  ‚Ä¢ startPrecisionTakeoff
  ‚Ä¢ getFirmwareVersion
  ‚Ä¢ voidsetAutoQuickSpinEnabled
  ‚Ä¢ voidgetHomeLocation
  ‚Ä¢ startTakeoff
  ‚Ä¢ getLandingGear
  ‚Ä¢ setCinematicBrakeSensitivity
  ‚Ä¢ getIndex
  ‚Ä¢ FlightControllerStategetState
  ‚Ä¢ voidsetVirtualStickModeEnabled
  ‚Ä¢ booleanisLandingGearMovable
  ‚Ä¢ voidgetMaxFlightHeight
  ‚Ä¢ voidsetLEDsEnabledSettings
  ‚Ä¢ altitude
  ‚Ä¢ voidsetRollPitchControlMode
  ‚Ä¢ voidsetVirtualStickAdvancedModeEnabled
  ‚Ä¢ setVirtualStickAdvancedModeEnabled
  ‚Ä¢ getControlMode
  ‚Ä¢ isLandingGearMovable
  ‚Ä¢ voidgetNoviceModeEnabled
  ‚Ä¢ voidgetCinematicYawSpeed
  ‚Ä¢ voidgetCoordinatedTurnEnabled
  ‚Ä¢ getRCSwitchFlightModeMapping
  ‚Ä¢ voidsetUrgentStopModeEnabled
  ‚Ä¢ getSeriousLowBatteryWarningThreshold
  ‚Ä¢ hasReachedMaxFlightRadius
  ‚Ä¢ getESCBeepEnabled
  ‚Ä¢ intgetIndex
  ‚Ä¢ voidsetASBInformationCallback
  ‚Ä¢ cancelTakeoff
  ‚Ä¢ voidstartIMUCalibration
  ‚Ä¢ voidisLockTakeoffWithoutGPS
  ‚Ä¢ setAircraftHeadingTurningSmoothness
  ‚Ä¢ value
  ‚Ä¢ isAccessLockerSupported
  ‚Ä¢ lockCourseUsingCurrentHeading
  ‚Ä¢ voidgetSeriousLowBatteryWarningThreshold
  ‚Ä¢ setSeriousLowBatteryWarningThreshold
  ‚Ä¢ voidtoggleAttitudeFlightMode
  ‚Ä¢ getUrgentStopModeEnabled
  ‚Ä¢ getLEDsEnabledSettings
  ‚Ä¢ setHomeLocationUsingAircraftCurrentLocation
  ‚Ä¢ voidsetMaxFlightRadius
  ‚Ä¢ setMaxFlightHeight
  ‚Ä¢ setConnectionFailSafeBehavior
  ‚Ä¢ getMaxFlightRadiusLimitationEnabled
  ‚Ä¢ setMaxFlightRadius
  ‚Ä¢ getMaxFlightHeight
  ‚Ä¢ intgetCompassCount
  ‚Ä¢ lockTakeoffWithoutGPS
  ‚Ä¢ setGravityCenterStateCallback
  ‚Ä¢ getNoviceModeEnabled
  ‚Ä¢ booleanisAccessLockerSupported
  ‚Ä¢ voidconfirmSmartReturnToHomeRequest
  ‚Ä¢ reboot
  ‚Ä¢ getRollPitchCoordinateSystem
  ‚Ä¢ booleanisFlightAssistantSupported
  ‚Ä¢ getCinematicModeEnabled
  ‚Ä¢ getPropellerCoverLimitEnabled
  ‚Ä¢ getCoordinatedTurnEnabled
  ‚Ä¢ getLowBatteryWarningThreshold
  ‚Ä¢ isLockTakeoffWithoutGPS
  ‚Ä¢ setASBInformationCallback
  ‚Ä¢ setFlightOrientationMode
  ‚Ä¢ voidstartTakeoff
  ‚Ä¢ voidsetSeriousLowBatteryWarningThreshold
  ‚Ä¢ isFlightAssistantSupported
  ‚Ä¢ setVerticalControlMode
  ‚Ä¢ setComponentListener
  ‚Ä¢ getCinematicYawSpeed
  ‚Ä¢ setTripodModeEnabled
  ‚Ä¢ setCinematicYawSpeed
  ‚Ä¢ voidgetControlMode
  ‚Ä¢ setMaxFlightRadiusLimitationEnabled
  ‚Ä¢ voidgetCinematicModeEnabled
  ‚Ä¢ voidgetMaxFlightRadiusLimitationEnabled
  ‚Ä¢ setPropellerCoverLimitEnabled
  ‚Ä¢ booleanisConnected
  ‚Ä¢ voidgetQuickSpinEnabled
  ‚Ä¢ voidsetPropellerCoverLimitEnabled
  ‚Ä¢ getAircraftHeadingTurningSpeed
  ‚Ä¢ voidlockCourseUsingCurrentHeading
  ‚Ä¢ startGoHome
  ‚Ä¢ getFlightAssistant
  ‚Ä¢ getSmartReturnToHomeEnabled
  ‚Ä¢ setCoordinatedTurnEnabled
  ‚Ä¢ getTerrainFollowModeEnabled
  ‚Ä¢ setPropellerCageProtectionEnabled
  ‚Ä¢ Tripod
  ‚Ä¢ turnOffMotors
  ‚Ä¢ PipelinesgetPipelines
  ‚Ä¢ canceled
  ‚Ä¢ getConnectionFailSafeBehavior
  ‚Ä¢ voidgetVirtualStickModeEnabled
  ‚Ä¢ booleanisVirtualStickAdvancedModeEnabled
  ‚Ä¢ setVirtualStickModeEnabled
  ‚Ä¢ voidgetLEDsEnabledSettings
  ‚Ä¢ sendVirtualStickFlightControlData
  ‚Ä¢ voidgetNavigationSatelliteSystem
  ‚Ä¢ VerticalControlModegetVerticalControlMode
  ‚Ä¢ voidstopGravityCenterCalibration
  ‚Ä¢ voidstartPrecisionTakeoff
  ‚Ä¢ voidgetPropellerCageProtectionEnabled
  ‚Ä¢ getPowerSupplyPortEnabled
  ‚Ä¢ voidsetCoordinatedTurnEnabled
  ‚Ä¢ startGravityCenterCalibration
  ‚Ä¢ voidsetControlMode
  ‚Ä¢ voidgetTripodModeEnabled
  ‚Ä¢ cancelGoHome
  ‚Ä¢ voidgetFirmwareVersion
  ‚Ä¢ turnOnMotors
  ‚Ä¢ device
  ‚Ä¢ voidturnOffMotors
  ‚Ä¢ cancelLanding
  ‚Ä¢ voidlockTakeoffWithoutGPS
  ‚Ä¢ getTripodModeEnabled
  ‚Ä¢ voidsetHomeLocationUsingAircraftCurrentLocation
  ‚Ä¢ AccessLockergetAccessLocker
  ‚Ä¢ voidturnOnMotors
  ‚Ä¢ voidcancelTakeoff
  ‚Ä¢ setMultipleFlightModeEnabled
  ‚Ä¢ setIMUStateCallback
  ‚Ä¢ booleanhasReachedMaxFlightHeight
  ‚Ä¢ getYawControlMode
  ‚Ä¢ getHomeLocation
  ‚Ä¢ confirmSmartReturnToHomeRequest
  ‚Ä¢ voidgetCinematicBrakeSensitivity
  ‚Ä¢ setRollPitchControlMode
  ‚Ä¢ status
  ‚Ä¢ 2mph
  ‚Ä¢ voidcancelLanding
  ‚Ä¢ voidgetPropellerCoverLimitEnabled
  ‚Ä¢ voidgetLowBatteryWarningThreshold
  ‚Ä¢ hasReachedMaxFlightHeight
  ‚Ä¢ setYawControlMode
  ‚Ä¢ setAircraftHeadingTurningSpeed
  ‚Ä¢ FlightCoordinateSystemgetRollPitchCoordinateSystem
  ‚Ä¢ getVirtualStickModeEnabled
  ‚Ä¢ voidsetPropellerCageProtectionEnabled
  ‚Ä¢ isVirtualStickControlModeAvailable
  ‚Ä¢ mode
  ‚Ä¢ voidsavePipelinesLog
  ‚Ä¢ setOnboardSDKDeviceDataCallback
  ‚Ä¢ booleanisVirtualStickControlModeAvailable
  ‚Ä¢ startLanding
  ‚Ä¢ Size
  ‚Ä¢ isConnected
  ‚Ä¢ getSimulator
  ‚Ä¢ setLEDsEnabledSettings
  ‚Ä¢ getMaxFlightRadius
  ‚Ä¢ stopGravityCenterCalibration
  ‚Ä¢ setRollPitchCoordinateSystem
  ‚Ä¢ getAccessLocker
  ‚Ä¢ setSmartReturnToHomeEnabled
  ‚Ä¢ voidreboot
  ‚Ä¢ voidsetLowBatteryWarningThreshold
  ‚Ä¢ voidgetESCBeepEnabled
  ‚Ä¢ takeoff
  ‚Ä¢ voidgetSerialNumber
  ‚Ä¢ voidsetMaxFlightHeight
  ‚Ä¢ meters
  ‚Ä¢ setTerrainFollowModeEnabled
  ‚Ä¢ setStateCallback
  ‚Ä¢ setPowerSupplyPortEnabled
  ‚Ä¢ isOnboardSDKDeviceAvailable
  ‚Ä¢ IntRange
  ‚Ä¢ voidconfirmLanding
  ‚Ä¢ getIMUCount
  ‚Ä¢ voidsetRollPitchCoordinateSystem
  ‚Ä¢ getCompassCount
  ‚Ä¢ voidsetNavigationSatelliteSystem
  ‚Ä¢ voidsetMaxFlightRadiusLimitationEnabled
  ‚Ä¢ FlightAssistantgetFlightAssistant
  ‚Ä¢ voidgetIsAttitudeFlightModeOpen
  ‚Ä¢ voidsetStateCallback
  ‚Ä¢ getCompass
  ‚Ä¢ sendDataToOnboardSDKDevice
  ‚Ä¢ getState
  ‚Ä¢ booleanhasReachedMaxFlightRadius
  ‚Ä¢ getIsAttitudeFlightModeOpen
  ‚Ä¢ voidstartGoHome
  ‚Ä¢ getVerticalControlMode
  ‚Ä¢ voidsetComponentListener
  ‚Ä¢ toggleAttitudeFlightMode
  ‚Ä¢ setAutoQuickSpinEnabled
  ‚Ä¢ savePipelinesLog
  ‚Ä¢ booleanisOnboardSDKDeviceAvailable
  ‚Ä¢ setGoHomeHeightInMeters
  ‚Ä¢ setESCBeepEnabled
  ‚Ä¢ getRollPitchControlMode
  ‚Ä¢ voidstartGravityCenterCalibration
  ‚Ä¢ voidsetESCBeepEnabled
  ‚Ä¢ voidsetSmartReturnToHomeEnabled
  ‚Ä¢ voidcancelGoHome
  ‚Ä¢ isVirtualStickAdvancedModeEnabled
  ‚Ä¢ State
  ‚Ä¢ voidsendDataToOnboardSDKDevice
  ‚Ä¢ getAircraftHeadingTurningSmoothness
  ‚Ä¢ voidsetGravityCenterStateCallback
  ‚Ä¢ getGoHomeHeightInMeters
  ‚Ä¢ voidsetMultipleFlightModeEnabled
  ‚Ä¢ setLowBatteryWarningThreshold
  ‚Ä¢ voidstartLanding
  ‚Ä¢ confirmLanding
  ‚Ä¢ intgetIMUCount
  ‚Ä¢ voidgetGoHomeHeightInMeters
  ‚Ä¢ port
  ‚Ä¢ startIMUCalibration
  ‚Ä¢ setUrgentStopModeEnabled
  ‚Ä¢ getPipelines
  ‚Ä¢ setControlMode
  ‚Ä¢ setNoviceModeEnabled
  ‚Ä¢ RollPitchControlModegetRollPitchControlMode
  ‚Ä¢ voidsetCinematicBrakeSensitivity
  ‚Ä¢ getSerialNumber
  ‚Ä¢ setNavigationSatelliteSystem
  ‚Ä¢ voidsetCinematicYawSpeed
  ‚Ä¢ voidsetYawControlMode
  ‚Ä¢ setCinematicModeEnabled
  ‚Ä¢ getMultipleFlightModeEnabled
  ‚Ä¢ voidgetMaxFlightRadius
  ‚Ä¢ flight
  ‚Ä¢ voidsetIMUStateCallback
  ‚Ä¢ getQuickSpinEnabled
  ‚Ä¢ getNavigationSatelliteSystem
  ‚Ä¢ setHomeLocation
  ‚Ä¢ RTKgetRTK
  ‚Ä¢ voidsetGoHomeHeightInMeters
  ‚Ä¢ voidsetPowerSupplyPortEnabled
  ‚Ä¢ accessories
  ‚Ä¢ voidsetNoviceModeEnabled
  ‚Ä¢ LandingGeargetLandingGear
  ‚Ä¢ Home
  ‚Ä¢ getCinematicBrakeSensitivity
  ‚Ä¢ voidsetVerticalControlMode
  ‚Ä¢ getPropellerCageProtectionEnabled
  ‚Ä¢ CompassgetCompass
  ‚Ä¢ YawControlModegetYawControlMode
  ‚Ä¢ lidar
  ‚Ä¢ voidgetMultipleFlightModeEnabled
  ‚Ä¢ SimulatorgetSimulator


================================================================================
P√ÅGINA 6: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/Gimbal/DJIGimbal.html
M√©todos encontrados: 130
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class Gimbal
class Gimbal extends BaseComponent
Package:dji.sdk.gimbalInherits From:BaseComponent
Description:
This class provides multiple methods to control the gimbal. These include setting the gimbal work mode, rotating the gimbal with angle, starting the gimbal auto calibration, etc. This object is available from the Aircraft or HandHeld object which is a subclass of BaseProduct.
Class Members:
State Updates
GeneralmethodsetStateCallback
method setStateCallback
void setStateCallback(@Nullable GimbalState.Callback callback)
Package:dji.sdk.gimbal
Description:
Sets up the gimbal state update callback.
Input Parameters:
@Nullable GimbalState.Callback callbackThe execution callback.
methodsetMovementSettingsCallback
method setMovementSettingsCallback
void setMovementSettingsCallback(@Nullable MovementSettings.Callback callback)
Package:dji.sdk.gimbal
Description:
Sets up the gimbal advanced setting state update callback.
Input Parameters:
@Nullable MovementSettings.Callback callbackThe execution callback.
methodsetBatteryChargeRemainingCallback
method setBatteryChargeRemainingCallback
void setBatteryChargeRemainingCallback(@Nullable BatteryChargeRemainingCallback callback)
Package:dji.sdk.gimbal
Description:
Sets the gimbal remaining energy callback. The unit is percentage.
Input Parameters:
@Nullable BatteryChargeRemainingCallback callbackThe execution callback.
Information
Gimbal CapabilitymethodgetCapabilities
method getCapabilities
Map<CapabilityKey, DJIParamCapability> getCapabilities()
Package:dji.sdk.gimbalSDK Key:GimbalKey.CAPABILITIES
Description:
Returns the gimbal's features and possible range of settings. Each key is a possible gimbal feature and is in CapabilityKey enum. The value for each key is an instance of DJIParamCapability or its sub-classes. The isSupported property can be used to query if a feature is supported by the gimbal and the getMin and getMax properties of DJIParamMinMaxCapability can be used to query the valid range for the setting. When a feature is not supported, the values for getMin and getMax are undefined.
Return:
Map<CapabilityKey, DJIParamCapability>A Map<CapabilityKey, DJIParamCapability> instance.
Operation Mode
Set Work ModemethodsetMode
method setMode
void setMode(@NonNull final GimbalMode mode, @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.MODE
Description:
Sets the gimbal's work mode.
Input Parameters:
@NonNull final GimbalMode modeGimbal work mode to be set.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Reset Gimbalmethodreset
method reset
@Deprecated void reset(@Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.RESET_GIMBAL
Description:
Resets the gimbal. The behaviors are product-dependent. Osmo series (e.g. Osmo, Osmo Pro): The gimbal's pitch and yaw will be set to the origin, which is the standard position for the gimbal. Phantom series (e.g. Phantom 3 Professional, Phantom 4 series): The first call sets gimbal to point down vertically to the earth. The second call sets gimbal to the standard position. Other products (e.g. Inspire 1): Only the gimbal's pitch will the set to the origin.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodreset
method reset
void reset(Axis axis, ResetDirection resetDirection, @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Resets the gimbal. The behaviors are dependent on the selected axis and reset direction.  Supported by:  Zenmuse H20 and Zenmuse H20T (firmware version v01.00.06.98 and above)  DJI X-port (firmware version v02.00.07.60 and above)  Zenmuse Z30 (firmware version v01.01.03.00 and above)  Zenmuse X5S (firmware version v01.01.03.00 and above)  Zenmuse X7 (firmware version v00.02.05.68 and above)  Zenmuse XT2 (firmware version v00.02.06.46 and above)  Zenmuse XTS (firmware version v00.02.32.82 and above)
Input Parameters:
Axis axisThe axis to reset.ResetDirection resetDirectionThe direction on axis to reset.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Moving the Gimbal
Rotate Gimbalmethodrotate
method rotate
void rotate(@NonNull final Rotation rotation, @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.ROTATE
Description:
Rotate gimbal's pitch, roll, and yaw with DJIGimbalRotation. For X5S, X4S and X7, rotating the gimbal with mode RELATIVE_ANGLE or ABSOLUTE_ANGLE, will reset the gimbal mode to FREE.
Input Parameters:
@NonNull final Rotation rotationAn instance of Rotation.@Nullable final CompletionCallback callbackThe callback of CompletionCallback.
Look AtmethodlookAt
method lookAt
void lookAt(LocationCoordinate3D locationCoordinate3D, LookAtMode mode, final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
The aircraft will look at the GPS point you set upÔºåit is only supported by Zenmuse H20 Series.
Input Parameters:
LocationCoordinate3D locationCoordinate3DThe GPS location you want to look at. you could get the location from getTargetLocation or get the location with map.LookAtMode modeThe look at mode.final CompletionCallback callbackThe callback of CompletionCallback.
Related:
enumLookAtMode
enum LookAtMode
enum LookAtMode
Package:dji.sdk.gimbal.mode
Description:
Gimbal LookAt mode. include gimbal free mode and gimbal following mode.
Enum Members:
LOOK_AT_GIMBAL_FREEGimbal free mode, only control the gimbal to look at the target, it will automatically exit after completion.LOOK_AT_GIMBAL_FOLLOWINGGimbal following mode, control gimbal and aircraft to look at the target, it will automatically exit after completion.
Class Members:
enumDetectionResultOnAxis
enum DetectionResultOnAxis
enum DetectionResultOnAxis
Package:dji.common.gimbal.XPortState
Description:
Gimbal's balance or coaxiality detection result on axis.
Enum Members:
GREATBalance or coaxiality detection result is great.GOODBalance or coaxiality detection result is good.BADBalance or coaxiality detection result is bad. Please adjust gimbal's balance or coaxiality according to corresponding result.UNKNOWNThe gimbal detection result is unknown.
Class Members:
enumBalanceDetectionProgressStatus
enum BalanceDetectionProgressStatus
enum BalanceDetectionProgressStatus
Package:dji.common.gimbal.XPortState
Description:
Current balance detection progress status of balance detection.
Enum Members:
IN_PROCESSGimbal's balance detection is in process.FINISHEDGimbal's balance detection has finished.ERRORGimbal's balance balance detection has stopped with error.UNKNOWNGimbal's balance detection status is unknown.
Class Members:
enumCoaxialityDetectionProgressStatus
enum CoaxialityDetectionProgressStatus
enum CoaxialityDetectionProgressStatus
Package:dji.common.gimbal.XPortState
Description:
Current coaxiality detection progress status of balance detection.
Enum Members:
IN_PROCESSGimbal's coaxiality detection is in process.FINISHEDGimbal's coaxiality detection has finished.ERRORGimbal's coaxiality detection has stopped with error.UNKNOWNGimbal's coaxiality detection status is unknown.
Class Members:
enumDirectionAdjustmentResult
enum DirectionAdjustmentResult
enum DirectionAdjustmentResult
Package:dji.common.gimbal.XPortState
Description:
Gimbal's direction adjustment result.
Enum Members:
GOODThe direction check result is good.BADGimbal's direction adjustment result is bad.UNKNOWNGimbal's direction adjustment result is unknown.
Class Members:
enumSuggestedDirectionAdjustment
enum SuggestedDirectionAdjustment
enum SuggestedDirectionAdjustment
Package:dji.common.gimbal.XPortState
Description:
The suggested direction adjustment of gimbal.
Enum Members:
NONENo need to adjust.LEFTManually adjust the camera to the corresponding direction on axis.RIGHTManually adjust the camera to the corresponding direction on axis.UPWARDSManually adjust the camera to the corresponding direction on axis.DOWNWARDSManually adjust the camera to the corresponding direction on axis.FORWARDSManually adjust the camera to the corresponding direction on axis.BACKWARDSManually adjust the camera to the corresponding direction on axis.
Class Members:
enumControlParametersAutoTuningStatus
enum ControlParametersAutoTuningStatus
enum ControlParametersAutoTuningStatus
Package:dji.common.gimbal.XPortState
Description:
The control parameters auto tuning status of the gimbal.
Enum Members:
IN_PROCESSControl parameters auto-tuning is in progress.FINISHEDControl parameters auto-tuning is finished.ERRORThe control parameters auto tuning occurs error.UNKNOWNUnknown control parameters auto-tuning state.
Class Members:
enumRotationalInertiaState
enum RotationalInertiaState
enum RotationalInertiaState
Package:dji.common.gimbal.XPortState
Description:
Gimbal's rotational inertia state.
Enum Members:
NORMALThe rotational inertia of axis is normal.SMALLERThe rotational inertia is too small. PayLoad need to be added.TOO_LARGERThe rotational inertia is too large. Payload need to be reduced.UNKNOWNUnknown.
Class Members:
enumAxialStiffnessState
enum AxialStiffnessState
enum AxialStiffnessState
Package:dji.common.gimbal.XPortState
Description:
Gimbal's stiffness on axis.
Enum Members:
NORMALNormal stiffness on axis.LOWLow stiffness on axis.UNKNOWNThe stiffness on axis is unknown.
Class Members:
enumResetDirection
enum ResetDirection
enum ResetDirection
Package:dji.common.gimbal
Description:
Gimbal reset direction.
Enum Members:
UP_OR_DOWNThe standard position for the upper gimbal is pointing up vertically to the sky. The standard position for the downward gimbal is pointing down vertically to the earth.CENTERApplies only to the yaw. The standard position is pointing to the center.
Class Members:
classCallbackclassCallbackclassBatteryChargeRemainingCallbackclassGimbalBalanceDetectionStateclassGimbalControlParametersAutoTuningStateclassGimbalCoaxialityDetectionStateGeneralclassGimbalStateclassMovementSettingsclassAttitudeenumAxis
enum Axis
@EXClassNullAway enum Axis
Package:dji.common.gimbal
Description:
Gimbal Axis.
Enum Members:
YAWGimbal's yaw axis.PITCHGimbal's pitch axis.ROLLGimbal's roll axis. Not available in DJIGimbal_resetWithAxisAndResetDirection.YAW_AND_PITCHGimbal's yaw and pitch axis.
Class Members:
enumGimbalMode
enum GimbalMode
@EXClassNullAway enum GimbalMode
Package:dji.common.gimbalSDK Key:GimbalKey.MODE
Description:
Gimbal work modes.
Enum Members:
FREEThe gimbal can move independently of the aircraft's yaw. In this mode, even if the aircraft yaw changes, the camera will continue pointing in the same world direction. This mode is only available for the Ronin-MX when the M600 or M600 Pro landing gear is retracted.FPVThe gimbal's work mode is FPV mode. In this mode, the gimbal yaw will follow the aircraft's heading, and the gimbal roll will follow the RC's roll channel value. The pitch will be available to move. This mode is only available for the Ronin-MX when the M600 landing gear is retracted.YAW_FOLLOWThe gimbal's work mode is such that it will follow the yaw. In this mode, the gimbal yaw will be fixed, while pitch and roll will be available to move.UNKNOWNThe gimbal's work mode is unknown.
Class Members:
enumBalanceTestResult
enum BalanceTestResult
@EXClassNullAway enum BalanceTestResult
Package:dji.common.gimbalSDK Key:GimbalKey.PITCH_TEST_RESULT, GimbalKey.ROLL_TEST_RESULT
Description:
For gimbals that allow payloads to be changed, a balance test should be performed to ensure the camera is mounted correctly.
Enum Members:
PASSThe balance test result is great.MARGINALThe balance test result is good. When this result is returned, it is possible there was some noise in the balance measurement. For best results, it is recommended to run the balance test again and adjust the payload position until the result becomes great.FAILThe balance test result is bad. The payload should be adjusted when this result is returned.UNKNOWNThe balance test result is unknown.
Class Members:
enumMovementSettingsProfile
enum MovementSettingsProfile
@EXClassNullAway enum MovementSettingsProfile
Package:dji.common.gimbalSDK Key:GimbalKey.MOVEMENT_SETTINGS_PROFILE
Description:
The Movement Settings Profile contains presets for SmoothTrack and the Physical Controller sensitivity. SmoothTrack and Controller settings can only be manually changed if Custom1 or Custom2 profiles are selected.
Enum Members:
FASTThe gimbal's SmoothTrack and Controller sensitivity is high. When the gimbal is using this profile, user cannot change the Movement Settings manually.MEDIUMThe gimbal's SmoothTrack and Controller sensitivity is medium. When the gimbal is using this profile, user cannot change the Movement Settings manually.SLOWThe gimbal's SmoothTrack and Controller sensitivity is slow. When the gimbal is using this profile, user cannot change the Movement Settings manually.CUSTOM_1The gimbal uses a custom configuration in memory slot 1 where the yaw and pitch speed, deadband, and acceleration can be defined.CUSTOM_2The gimbal uses a custom configuration in memory slot 2 where the yaw and pitch speed, deadband, and acceleration can be defined.UNKNOWNThe gimbal's user config type is unknown.
Class Members:
enumMotorControlPreset
enum MotorControlPreset
@EXClassNullAway enum MotorControlPreset
Package:dji.common.gimbalSDK Key:GimbalKey.APPLY_MOTOR_CONTROL_PRESET
Description:
Different cameras have different preset parameters for gimbal motor stiffness, strength, gyro filtering and pre-control.
Enum Members:
REDThe gimbal's motor control configuration is optimized for RED cameras.DSLRThe gimbal's motor control configuration is optimized for most DSLR cameras.MIRRORLESSThe gimbal's motor control configuration is optimized for most mirrorless cameras.
Class Members:
enumEndpointDirection
enum EndpointDirection
@EXClassNullAway enum EndpointDirection
Package:dji.common.gimbal
Description:
Gimbal endpoint setting.
Enum Members:
PITCH_UPPitch (also called tilt) endpoint setting in the upwards direction.PITCH_DOWNPitch (also called tilt) endpoint setting in the downwards direction.YAW_LEFTYaw (also called pan) endpoint setting in the left direction.YAW_RIGHTYaw (also called pan) endpoint setting in the right direction.
Class Members:
enumBalanceState
enum BalanceState
@EXClassNullAway enum BalanceState
Package:dji.common.gimbalSDK Key:GimbalKey.BALANCE_STATE
Description:
The loading balance status of the gimbal. The gimbal loading is changeable for Osmo Mobile. When the mounted mobile device is changed, in order to  optimize the gimbal performance, user can adjust the gimbal physically based on the status.
Enum Members:
BALANCEDThe gimbal is balanced.TILTING_LEFTThe gimbal is tilting left. Adjust the photo to the right hand side to balance the gimbal.TILTING_RIGHTThe gimbal is tilting right. Adjust the photo to the left hand side to balance the gimbal.UNKNOWNThe balance status is unknown.
Class Members:
enumCapabilityKey
enum CapabilityKey
@EXClassNullAway enum CapabilityKey
Package:dji.common.gimbal
Description:
These enums are keys for gimbal capability map.
Enum Members:
ADJUST_PITCHKey enum in the getCapabilities dictionary that holds the complete capability of the gimbal. The value is capability range of the gimbal is placed downwards, A negative value in the valid range represents counter-clockwise rotation. A positive value in the valid range represents clockwise rotation.ADJUST_PITCH_UPWARDSKey enum in the getCapabilities dictionary that holds the complete capability of the gimbal. The value is capability range of the gimbal is placed upwards, A negative value in the valid range represents counter-clockwise rotation. A positive value in the valid range represents clockwise rotation.ADJUST_YAWKey enum in getCapabilities associated with whether the gimbal supports yaw axis adjustment. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range in degrees is returned. A negative value in the valid range represents counter-clockwise rotation. A positive value in the valid range represents clockwise rotation. For Gimbal's that allow a pitch range extension (see PITCH_RANGE_EXTENSION, the range will be representative of the extended range whether it is enabled or not.ADJUST_ROLLKey enum in getCapabilities associated with whether the gimbal supports roll axis adjustment. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range in degrees is returned. A negative value in the valid range represents counter-clockwise rotation. A positive value in the valid range represents clockwise rotation.MOVEMENT_SETTINGSKey enum in getCapabilities associated with whether the gimbal supports Advanced Settings Profiles. The corresponding value in getCapabilities is an instance of DJIParamCapability.PITCH_RANGE_EXTENSIONKey enum in getCapabilities associated with whether the gimbal supports a range extension in pitch. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range in degrees is returned.PITCH_CONTROLLER_SPEED_COEFFICIENTKey enum in getCapabilities associated with whether the gimbal's pitch axis response speed to manual control can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_CONTROLLER_SPEED_COEFFICIENTKey enum in getCapabilities associated with whether the gimbal's yaw axis response speed to manual control can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_CONTROLLER_SMOOTHING_FACTORKey enum in getCapabilities associated with whether the gimbal's pitch axis smoothing can be adjusted when using manual control. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_CONTROLLER_SMOOTHING_FACTORKey enum in getCapabilities associated with whether the gimbal's yaw axis smoothing can be adjusted when using manual control. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_CONTROLLER_DEADBANDKey enum in getCapabilities associated with whether the gimbal's manual control pitch axis deadband can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_CONTROLLER_DEADBANDKey enum in getCapabilities associated with whether the gimbal's manual control yaw axis deadband can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_CONTROLLER_MAX_SPEEDKey  in getCapabilities associated with whether the gimbal's manual control pitch axis max speed can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_CONTROLLER_MAX_SPEEDKey  in getCapabilities associated with whether the gimbal's manual control yaw axis max speed can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_SMOOTH_TRACK_ENABLEDKey enum in getCapabilities associated with whether the gimbal's pitch axis SmoothTrack can be toggled. The corresponding value in getCapabilities is an instance of DJIParamCapability. Ronin-MX cannot toggle the SmoothTrack functionality and it is always enabled.YAW_SMOOTH_TRACK_ENABLEDKey enum in getCapabilities associated with whether the gimbal's yaw axis SmoothTrack can be toggled. The corresponding value in getCapabilities is an instance of DJIParamCapability. Ronin-MX cannot toggle the SmoothTrack functionality and it is always enabled.PITCH_SMOOTH_TRACK_ACCELERATIONKey enum in getCapabilities associated with whether the gimbal's pitch axis SmoothTrack acceleration can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_SMOOTH_TRACK_ACCELERATIONKey enum in getCapabilities associated with whether the gimbal's yaw axis SmoothTrack acceleration can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_SMOOTH_TRACK_SPEEDKey enum in getCapabilities associated with whether the gimbal's pitch axis SmoothTrack speed can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_SMOOTH_TRACK_SPEEDKey enum in getCapabilities associated with whether the gimbal's yaw axis SmoothTrack speed can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_SMOOTH_TRACK_DEADBANDKey enum in getCapabilities associated with whether the gimbal's pitch axis SmoothTrack deadband can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_SMOOTH_TRACK_DEADBANDKey enum in getCapabilities associated with whether the gimbal's yaw axis SmoothTrack deadband can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_UP_ENDPOINTKey enum in getCapabilities associated with whether the gimbal's pitch up endpoint can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_DOWN_ENDPOINTKey enum in getCapabilities associated with whether the gimbal's pitch down endpoint can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_LEFT_ENDPOINTKey enum in getCapabilities associated with whether the gimbal's yaw left endpoint can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_RIGHT_ENDPOINTKey enum in getCapabilities associated with whether the gimbal's yaw right endpoint can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_MOTOR_CONTROL_STIFFNESSKey enum in getCapabilities associated with whether the gimbal's pitch axis motor control stiffness can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_MOTOR_CONTROL_STIFFNESSKey enum in getCapabilities associated with whether the gimbal's yaw axis motor control stiffness can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.ROLL_MOTOR_CONTROL_STIFFNESSKey enum in getCapabilities associated with whether the gimbal's roll axis motor control stiffness can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_MOTOR_CONTROL_STRENGTHKey enum in getCapabilities associated with whether the gimbal's pitch axis motor control strength can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_MOTOR_CONTROL_STRENGTHKey enum in getCapabilities associated with whether the gimbal's yaw axis motor control strength can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.ROLL_MOTOR_CONTROL_STRENGTHKey enum in getCapabilities associated with whether the gimbal's roll axis motor control strength can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_MOTOR_CONTROL_GYRO_FILTERING_FACTORKey enum in getCapabilities associated with whether the gimbal's pitch axis motor control gyro filtering can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_MOTOR_CONTROL_GYRO_FILTERING_FACTORKey enum in getCapabilities associated with whether the gimbal's yaw axis motor control gyro filtering can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.ROLL_MOTOR_CONTROL_GYRO_FILTERING_FACTORKey enum in getCapabilities associated with whether the gimbal's roll axis motor control gyro filtering can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.PITCH_MOTOR_CONTROL_PRE_CONTROLKey enum in getCapabilities associated with whether the gimbal's pitch axis motor control "precontrol" can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.YAW_MOTOR_CONTROL_PRE_CONTROLKey enum in getCapabilities associated with whether the gimbal's yaw axis motor control "precontrol" can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.ROLL_MOTOR_CONTROL_PRE_CONTROLKey enum in getCapabilities associated with whether the gimbal's roll axis motor control "precontrol" can be adjusted. The corresponding value in getCapabilities is an instance of DJIParamMinMaxCapability meaning both the feature's existence as well as its possible range (unitless) is returned.
Class Members:
classRotationclassMultiGimbalConnectionWorkingStatus
Calibration
CalibratemethodstartCalibration
method startCalibration
void startCalibration(@Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.START_CALIBRATION
Description:
Starts calibrating the gimbal. The product should be stationary (not flying, or being held) and horizontal during calibration. For gimbal's with adjustable payloads, the payload should be present and balanced before doing a calibration. For Osmo Mobile series, user should double-click the trigger (or mode button on Osmo Mobile 2) or restart the device to re-center the gimbal after the calibration.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Fine Tune RollmethodfineTuneRollInDegrees
method fineTuneRollInDegrees
void fineTuneRollInDegrees(@FloatRange(from = -2.0f, to = 2.0f) float offset,                                              @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.FINE_TUNE_ROLL_IN_DEGREES
Description:
The gimbal roll can be fine tuned with a custom offset. The range for the custom offset is [-2.0, 2.0] degrees. If the offset is negative, the gimbal will be fine tuned the specified number of degrees in the counterclockwise direction.
Input Parameters:
@FloatRange(from = -2.0f, to = 2.0f) float offsetFine-tuned offset, in degrees, to be tuned.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Fine Tune PitchmethodfineTunePitchInDegrees
method fineTunePitchInDegrees
void fineTunePitchInDegrees(@FloatRange(from = -2.0f, to = 2.0f) float offset,                                               @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
The gimbal pitch can be fine tuned with a custom offset. The range for the custom offset is [-2.0, 2.0] degrees. If the offset is negative, the gimbal will be fine tuned the specified number of degrees in the counterclockwise direction. It is only supported by Spark, Mavic 2 Series and Mavic Air 2, DJI Air 2S.
Input Parameters:
@FloatRange(from = -2.0f, to = 2.0f) float offsetFine-tuned offset, in degrees, to be tuned.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Fine Tune YawmethodfineTuneYawInDegrees
method fineTuneYawInDegrees
void fineTuneYawInDegrees(@FloatRange(from = -2.0f, to = 2.0f) float offset,                                             @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
The gimbal yaw can be fine tuned with a custom offset. The range for the custom offset is [-2.0, 2.0] degrees. If the offset is negative, the gimbal will be fine tuned the specified number of degrees in the counterclockwise direction. It is only supported by Mavic Air and Mavic 2 Series.
Input Parameters:
@FloatRange(from = -2.0f, to = 2.0f) float offsetFine-tuned offset, in degrees, to be tuned.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Balance TestmethodstartBalanceTest
method startBalanceTest
void startBalanceTest(@Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.START_BALANCE_TEST
Description:
Starts testing the balance of the gimbal payload. For gimbals that allow payloads to be changed, a balance test should be performed to ensure the camera is mounted correctly. The product should be stationary (not flying, or being held) and horizontal during testing. See GimbalState for the test result.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned value(s). The callback will execute when the balance test is successfully started.
Movement Setting
Gimbal Movement SettingmethodsetMovementSettingsProfile
method setMovementSettingsProfile
void setMovementSettingsProfile(@NonNull MovementSettingsProfile profile,                                                   @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.MOVEMENT_SETTINGS_PROFILE
Description:
Sets the movement settings profile. The movement settings profile has options for both preset and custom profiles for SmoothTrack and Controller settings. Settings for SmoothTrack and Controller can only be set manually when using a custom profile.
Input Parameters:
@NonNull MovementSettingsProfile profileProfile to set.@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
methodgetMovementSettingsProfile
method getMovementSettingsProfile
void getMovementSettingsProfile(           @NonNull final CompletionCallbackWith<MovementSettingsProfile> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.MOVEMENT_SETTINGS_PROFILE
Description:
Gets the advanced settings profile. Use MovementSettingsProfile to check if it is supported by the gimbal.
Input Parameters:
@NonNull final CompletionCallbackWith<MovementSettingsProfile> callbackcallback that receives the execution result.
Load Factory SettingsmethodrestoreFactorySettings
method restoreFactorySettings
void restoreFactorySettings(@Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.RESTORE_FACTORY_SETTINGS
Description:
Restores the gimbal's settings to factory settings.
Input Parameters:
@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
Range Extension
Enable Pitch Range ExtensionmethodsetPitchRangeExtensionEnabled
method setPitchRangeExtensionEnabled
void setPitchRangeExtensionEnabled(boolean isEnabled,                                                      @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_RANGE_EXTENSION_ENABLED
Description:
Extends the pitch range of gimbal. If extended, The range of the pitch angle should be gotten from the ADJUST_PITCH or ADJUST_PITCH_UPWARDS. Otherwise, the angle will be limited to avoid seeing the arm. Use PITCH_RANGE_EXTENSION to check if it is supported by the gimbal.
Input Parameters:
boolean isEnabledWhether the pitch range should be extended.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
methodgetPitchRangeExtensionEnabled
method getPitchRangeExtensionEnabled
void getPitchRangeExtensionEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_RANGE_EXTENSION_ENABLED
Description:
Get the extend gimbal pitch range state. Use PITCH_RANGE_EXTENSION to check if it is supported by the gimbal.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe completion callback that receives the execution result.
Motor Control Configuration
ConfiguremethodapplyMotorControlPreset
method applyMotorControlPreset
void applyMotorControlPreset(@NonNull MotorControlPreset preset,                                       @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.APPLY_MOTOR_CONTROL_PRESET
Description:
Configures gimbal's motor control with a preset configuration applicable for most popular cameras. In order to the optimize the performance, motor control tuning is still required.
Input Parameters:
@NonNull MotorControlPreset presetThe preset configuration to set.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
StiffnessmethodsetMotorControlStiffness
method setMotorControlStiffness
void setMotorControlStiffness(@NonNull Axis axis,                                        @IntRange(from = 0, to = 100) int stiffness,                                        @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_MOTOR_CONTROL_STIFFNESS, GimbalKey.ROLL_MOTOR_CONTROL_STIFFNESS, GimbalKey.YAW_MOTOR_CONTROL_STIFFNESS
Description:
Sets the coefficient of speed error control. It can be seen as the coefficient for the proportional term in the PID controller. Use PITCH_MOTOR_CONTROL_STIFFNESS, YAW_MOTOR_CONTROL_STIFFNESS and ROLL_MOTOR_CONTROL_STIFFNESS with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisThe axis that the setting is applied to.@IntRange(from = 0, to = 100) int stiffnessThe stiffness value to set.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
methodgetMotorControlStiffness
method getMotorControlStiffness
void getMotorControlStiffness(@NonNull final Axis axis,                                        @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_MOTOR_CONTROL_STIFFNESS, GimbalKey.ROLL_MOTOR_CONTROL_STIFFNESS, GimbalKey.YAW_MOTOR_CONTROL_STIFFNESS
Description:
Gets the coefficient of speed error control. It can be seen as the coefficient for the proportional term in the PID controller. Use PITCH_MOTOR_CONTROL_STIFFNESS, YAW_MOTOR_CONTROL_STIFFNESS and ROLL_MOTOR_CONTROL_STIFFNESS with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull final Axis axisThe axis to query.@NonNull final CompletionCallbackWith<Integer> callbackThe completion callback that receives the execution result.
StrengthmethodsetMotorControlStrength
method setMotorControlStrength
void setMotorControlStrength(@NonNull Axis axis,                                       @IntRange(from = 0, to = 100) int strength,                                       @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_MOTOR_CONTROL_STRENGTH, GimbalKey.ROLL_MOTOR_CONTROL_STRENGTH, GimbalKey.YAW_MOTOR_CONTROL_STRENGTH
Description:
Sets the coefficient of attitude accuracy control. It can be seen as the coefficient for the integral term in the PID controller. Use PITCH_MOTOR_CONTROL_STRENGTH, YAW_MOTOR_CONTROL_STRENGTH and ROLL_MOTOR_CONTROL_STRENGTH with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisThe axis that the setting is applied to.@IntRange(from = 0, to = 100) int strengthThe strength value to set.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
methodgetMotorControlStrength
method getMotorControlStrength
void getMotorControlStrength(@NonNull final Axis axis,                                       @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_MOTOR_CONTROL_STRENGTH, GimbalKey.ROLL_MOTOR_CONTROL_STRENGTH, GimbalKey.YAW_MOTOR_CONTROL_STRENGTH
Description:
Gets the coefficient of attitude accuracy control. It can be seen as the coefficient for the integral term in the PID controller. Use PITCH_MOTOR_CONTROL_STRENGTH, YAW_MOTOR_CONTROL_STRENGTH and ROLL_MOTOR_CONTROL_STRENGTH with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull final Axis axisThe axis to query.@NonNull final CompletionCallbackWith<Integer> callbackThe completion callback that receives the execution result.
Gyro FilteringmethodsetMotorControlGyroFilteringFactor
method setMotorControlGyroFilteringFactor
void setMotorControlGyroFilteringFactor(@NonNull Axis axis,                                                  @IntRange(from = 0, to = 100) int filteringFactor,                                                  @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_MOTOR_CONTROL_GYRO_FILTERING_FACTOR, GimbalKey.ROLL_MOTOR_CONTROL_GYRO_FILTERING_FACTOR, GimbalKey.YAW_MOTOR_CONTROL_GYRO_FILTERING_FACTOR
Description:
Sets the coefficient of denoising the output. Use PITCH_MOTOR_CONTROL_GYRO_FILTERING_FACTOR, YAW_MOTOR_CONTROL_GYRO_FILTERING_FACTOR and ROLL_MOTOR_CONTROL_GYRO_FILTERING_FACTOR with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@IntRange(from = 0, to = 100) int filteringFactorThe gyro filtering value to set.@NonNull Axis axisThe axis that the setting is applied to.@Nullable final CompletionCallback callbackAsynchronous execution result.
methodgetMotorControlGyroFilteringFactor
method getMotorControlGyroFilteringFactor
void getMotorControlGyroFilteringFactor(@NonNull final Axis axis,                                                  @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_MOTOR_CONTROL_GYRO_FILTERING_FACTOR, GimbalKey.ROLL_MOTOR_CONTROL_GYRO_FILTERING_FACTOR, GimbalKey.YAW_MOTOR_CONTROL_GYRO_FILTERING_FACTOR
Description:
Gets the coefficient of denoising the output. Use PITCH_MOTOR_CONTROL_GYRO_FILTERING_FACTOR, YAW_MOTOR_CONTROL_GYRO_FILTERING_FACTOR and ROLL_MOTOR_CONTROL_GYRO_FILTERING_FACTOR with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull final Axis axisThe axis to query.@NonNull final CompletionCallbackWith<Integer> callbackThe completion callback that receives the execution result.
PrecontrolmethodsetMotorControlPreControl
method setMotorControlPreControl
void setMotorControlPreControl(@NonNull Axis axis,                                         @IntRange(from = 0, to = 100) int preControl,                                         @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_MOTOR_CONTROL_PRE_CONTROL, GimbalKey.ROLL_MOTOR_CONTROL_PRE_CONTROL, GimbalKey.YAW_MOTOR_CONTROL_PRE_CONTROL
Description:
Sets the value for pre-adjust. It can be seen as the coefficient for the derivative term in the PID controller. Use PITCH_MOTOR_CONTROL_PRE_CONTROL, YAW_MOTOR_CONTROL_PRE_CONTROL and ROLL_MOTOR_CONTROL_PRE_CONTROL with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisThe axis that the setting is applied to.@IntRange(from = 0, to = 100) int preControlThe Precontrol value to set.@Nullable final CompletionCallback callbackAsynchronous execution result.
methodgetMotorControlPreControl
method getMotorControlPreControl
void getMotorControlPreControl(@NonNull final Axis axis,                                         @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_MOTOR_CONTROL_PRE_CONTROL, GimbalKey.ROLL_MOTOR_CONTROL_PRE_CONTROL, GimbalKey.YAW_MOTOR_CONTROL_PRE_CONTROL
Description:
Gets the value for pre-adjust. It can be seen as the coefficient for the derivative term in the PID controller. Only supported by Ronin-MX. Use PITCH_MOTOR_CONTROL_PRE_CONTROL, YAW_MOTOR_CONTROL_PRE_CONTROL and ROLL_MOTOR_CONTROL_PRE_CONTROL with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull final Axis axisThe axis to query.@NonNull final CompletionCallbackWith<Integer> callbackThe completion callback that receives the execution result.
Controller Setting
DeadbandmethodsetControllerDeadband
method setControllerDeadband
void setControllerDeadband(@NonNull Axis axis,                                     @IntRange(from = 0, to = 90) int deadband,                                     @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_CONTROLLER_DEADBAND, GimbalKey.YAW_CONTROLLER_DEADBAND
Description:
Sets physical controller (e.g. the joystick on Osmo or the remote controller of the aircraft) deadband on an axis. A larger deadband requires more controller movement to start gimbal motion. Use YAW_CONTROLLER_DEADBAND and PITCH_CONTROLLER_DEADBAND with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@IntRange(from = 0, to = 90) int deadbandThe deadband value to be set.@NonNull Axis axisThe axis that the setting will be applied to.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
methodgetControllerDeadband
method getControllerDeadband
void getControllerDeadband(@NonNull final Axis direction,                                     @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_CONTROLLER_DEADBAND, GimbalKey.YAW_CONTROLLER_DEADBAND
Description:
Gets physical controller deadband value on an axis. A larger deadband requires more controller movement to start gimbal motion. Use YAW_CONTROLLER_DEADBAND and PITCH_CONTROLLER_DEADBAND with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull final Axis directionThe axis to query.@NonNull final CompletionCallbackWith<Integer> callbackThe completion callback that receives the execution result.
SpeedmethodsetControllerSpeedCoefficient
method setControllerSpeedCoefficient
void setControllerSpeedCoefficient(@NonNull Axis axis,                                                      @IntRange(from = 0, to = 100) int speedCoefficient,                                                      @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_CONTROLLER_SPEED_COEFFICIENT, GimbalKey.YAW_CONTROLLER_SPEED_COEFFICIENT
Description:
Sets physical controller (e.g. the joystick on Osmo or the remote controller of the aircraft) speed on an axis. Speed setting controls the mapping between the movement of the controller and the gimbal speed. Use YAW_CONTROLLER_SPEED_COEFFICIENT and PITCH_CONTROLLER_SPEED_COEFFICIENT with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@IntRange(from = 0, to = 100) int speedCoefficientThe speed value to be set.@NonNull Axis axisThe axis that the setting will be applied to.@Nullable final CompletionCallback callbackAsynchronous execution result.
methodgetControllerSpeedCoefficient
method getControllerSpeedCoefficient
void getControllerSpeedCoefficient(@NonNull Axis axis,                                                      @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_CONTROLLER_SPEED_COEFFICIENT, GimbalKey.YAW_CONTROLLER_SPEED_COEFFICIENT
Description:
Gets physical controller speed value on an axis. Speed setting controls the mapping between the movement of the controller and the gimbal speed. Use YAW_CONTROLLER_SPEED_COEFFICIENT and PITCH_CONTROLLER_SPEED_COEFFICIENT with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisThe axis to query.@NonNull final CompletionCallbackWith<Integer> callbackThe completion block that receives the execution result.
SmoothingmethodsetControllerSmoothingFactor
method setControllerSmoothingFactor
void setControllerSmoothingFactor(@NonNull Axis axis,                                                     @IntRange(from = 0, to = 30) int smoothingFactor,                                                     @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_CONTROLLER_SMOOTHING_FACTOR, GimbalKey.YAW_CONTROLLER_SMOOTHING_FACTOR
Description:
Sets physical controller (e.g. the joystick on Osmo or the remote controller of the aircraft) smoothing on an axis. Smoothing controls the deceleration of the gimbal. Use YAW_CONTROLLER_SMOOTHING_FACTOR and PITCH_CONTROLLER_SMOOTHING_FACTOR with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@IntRange(from = 0, to = 30) int smoothingFactorThe smoothing value to be set.@NonNull Axis axisThe axis that the setting will be applied to.@Nullable final CompletionCallback callbackThe completion block that receives the execution result.
methodsetControllerSmoothingFactor
method setControllerSmoothingFactor
void setControllerSmoothingFactor(@NonNull Axis axis,                                                     @NonNull HardwareState.FlightModeSwitch mode,                                                     @IntRange(from = 0, to = 30) int smoothingFactor,                                                     @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_CONTROLLER_SMOOTHING_FACTOR, GimbalKey.YAW_CONTROLLER_SMOOTHING_FACTOR
Description:
Sets physical controller (e.g. the joystick on Osmo or the remote controller of the aircraft) smoothing on an axis. Smoothing controls the deceleration of the gimbal. Use YAW_CONTROLLER_SMOOTHING_FACTOR and PITCH_CONTROLLER_SMOOTHING_FACTOR with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless). Only supported by Mavic Air 2, DJI Air 2S.
Input Parameters:
@IntRange(from = 0, to = 30) int smoothingFactorThe smoothing value to be set.@NonNull Axis axisThe axis that the setting will be applied to.@NonNull HardwareState.FlightModeSwitch modeThe mode that the setting will be applied to.@Nullable final CompletionCallback callbackThe execution callback that receives the execution result.
methodgetControllerSmoothingFactor
method getControllerSmoothingFactor
void getControllerSmoothingFactor(@NonNull Axis axis,                                                     @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_CONTROLLER_SMOOTHING_FACTOR, GimbalKey.YAW_CONTROLLER_SMOOTHING_FACTOR
Description:
Gets physical controller smoothing value on an axis. Smoothing controls the deceleration of the gimbal. Use YAW_CONTROLLER_SMOOTHING_FACTOR and PITCH_CONTROLLER_SMOOTHING_FACTOR with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisThe axis to query.@NonNull final CompletionCallbackWith<Integer> callbackThe completion block that receives the execution result.
methodgetControllerSmoothingFactor
method getControllerSmoothingFactor
void getControllerSmoothingFactor(@NonNull Axis axis,                                                     @NonNull HardwareState.FlightModeSwitch mode,                                                     @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_CONTROLLER_SMOOTHING_FACTOR, GimbalKey.YAW_CONTROLLER_SMOOTHING_FACTOR
Description:
Gets physical controller smoothing value with axis and mode. Smoothing controls the deceleration of the gimbal. Use YAW_CONTROLLER_SMOOTHING_FACTOR and PITCH_CONTROLLER_SMOOTHING_FACTOR with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless). Only supported by Mavic Air 2, DJI Air 2S.
Input Parameters:
@NonNull Axis axisThe axis to query.@NonNull HardwareState.FlightModeSwitch modeThe mode to query.@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback that receives the execution result.
Max SpeedmethodsetControllerMaxSpeed
method setControllerMaxSpeed
void setControllerMaxSpeed(@NonNull Axis axis,                                              @IntRange(from = 0, to = 100) int maxSpeed,                                              @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Sets physical controller max speed value on an axis. It controls the mapping between the movement of the controller and the gimbal speed. Use PITCH_CONTROLLER_MAX_SPEED and YAW_CONTROLLER_MAX_SPEED with "capabilities" to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisThe axis that the setting will be applied to.@IntRange(from = 0, to = 100) int maxSpeedThe maximum speed to set for one axis.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
methodsetControllerMaxSpeed
method setControllerMaxSpeed
void setControllerMaxSpeed(@NonNull Axis axis,                                              @NonNull HardwareState.FlightModeSwitch mode,                                              @IntRange(from = 1, to = 100) int maxSpeed,                                              @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Sets physical controller max speed value on an axis. It controls the mapping between the movement of the controller and the gimbal speed. Use PITCH_CONTROLLER_MAX_SPEED and YAW_CONTROLLER_MAX_SPEED with "capabilities" to check if the gimbal supports this feature and the range of possible values (unitless). Only supported by Mavic Air 2, DJI Air 2S.
Input Parameters:
@NonNull Axis axisThe axis that the setting will be applied to.@NonNull HardwareState.FlightModeSwitch modeThe mode that the setting will be applied to.@IntRange(from = 1, to = 100) int maxSpeedThe maximum speed to set for one axis.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
methodgetControllerMaxSpeed
method getControllerMaxSpeed
void getControllerMaxSpeed(@NonNull Axis axis,                                              @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbal
Description:
Gets physical controller max speed value on an axis. It controls the mapping between the movement of the controller and the gimbal speed. Use PITCH_CONTROLLER_MAX_SPEED and YAW_CONTROLLER_MAX_SPEED with "capabilities" to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisThe axis to query.@NonNull final CompletionCallbackWith<Integer> callbackThe completion callback that receives the execution result.
methodgetControllerMaxSpeed
method getControllerMaxSpeed
void getControllerMaxSpeed(@NonNull Axis axis,                                              @NonNull HardwareState.FlightModeSwitch mode,                                              @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbal
Description:
Gets physical controller max speed value on an axis. It controls the mapping between the movement of the controller and the gimbal speed. Use PITCH_CONTROLLER_MAX_SPEED and YAW_CONTROLLER_MAX_SPEED with "capabilities" to check if the gimbal supports this feature and the range of possible values (unitless). Only supported by Mavic Air 2, DJI Air 2S.
Input Parameters:
@NonNull Axis axisThe axis to query.@NonNull HardwareState.FlightModeSwitch modeThe mode to query.@NonNull final CompletionCallbackWith<Integer> callbackThe completion callback that receives the execution result.
Smooth Track Setting
EnablemethodsetSmoothTrackEnabled
method setSmoothTrackEnabled
void setSmoothTrackEnabled(@NonNull Axis axis,                                              boolean enabled,                                              @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_SMOOTH_TRACK_ENABLED, GimbalKey.YAW_SMOOTH_TRACK_ENABLED
Description:
Enables SmoothTrack for the axis. Only supported by Osmo. Ronin-MX supports SmoothTrack but it is always enabled for both pitch axis and yaw axis. Use PITCH_SMOOTH_TRACK_ENABLED and YAW_SMOOTH_TRACK_ENABLED with getCapabilities to check if the gimbal supports this feature.
Input Parameters:
boolean enabledtrue to enable SmoothTrack on the axis.@NonNull Axis axisThe axis that the setting will be applied to.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
methodgetSmoothTrackEnabled
method getSmoothTrackEnabled
void getSmoothTrackEnabled(@NonNull Axis axis,                                              @NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_SMOOTH_TRACK_ENABLED, GimbalKey.YAW_SMOOTH_TRACK_ENABLED
Description:
Gets whether an axis has SmoothTrack enabled. Only supported by Osmo. Ronin-MX supports SmoothTrack but it is always enabled for both pitch axis and yaw axis. Use PITCH_SMOOTH_TRACK_ENABLED and YAW_SMOOTH_TRACK_ENABLED with getCapabilities to check if the gimbal supports this feature.
Input Parameters:
@NonNull Axis axisThe axis to query.@NonNull final CompletionCallbackWith<Boolean> callbackThe completion callback that receives the execution result.
SpeedmethodsetSmoothTrackSpeed
method setSmoothTrackSpeed
void setSmoothTrackSpeed(@NonNull Axis axis,                                            @IntRange(from = 0, to = 100) int speed,                                            @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_SMOOTH_TRACK_SPEED, GimbalKey.YAW_SMOOTH_TRACK_SPEED
Description:
Sets gimbal SmoothTrack catch up speed on an axis. SmoothTrack speed determines how fast the gimbal will catch up with a large, translated handle movement. Use PITCH_SMOOTH_TRACK_SPEED and YAW_SMOOTH_TRACK_SPEED with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisGimbal axis.@IntRange(from = 0, to = 100) int speedSmoothTrack speed.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetSmoothTrackSpeed
method getSmoothTrackSpeed
void getSmoothTrackSpeed(@NonNull Axis axis,                                            @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_SMOOTH_TRACK_SPEED, GimbalKey.YAW_SMOOTH_TRACK_SPEED
Description:
Gets gimbal SmoothTrack speed on an axis. SmoothTrack speed determines how fast the gimbal will catch up with a large, translated handle movement. Use PITCH_SMOOTH_TRACK_SPEED and YAW_SMOOTH_TRACK_SPEED with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisGimbal axis.@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned value(s).
DeadbandmethodsetSmoothTrackDeadband
method setSmoothTrackDeadband
void setSmoothTrackDeadband(@NonNull Axis axis,                                               @IntRange(from = 0, to = 90) int deadband,                                               @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.YAW_SMOOTH_TRACK_DEADBAND, GimbalKey.PITCH_SMOOTH_TRACK_DEADBAND
Description:
Sets SmoothTrack deadband on an axis. A larger deadband requires more handle movement to translate into gimbal motion. Use PITCH_SMOOTH_TRACK_DEADBAND and YAW_SMOOTH_TRACK_DEADBAND with getCapabilities to check if the gimbal supports this feature and the range of possible values in degrees.
Input Parameters:
@NonNull Axis axisGimbal axis.@IntRange(from = 0, to = 90) int deadbandSmoothTrack deadband [0,90].@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetSmoothTrackDeadband
method getSmoothTrackDeadband
void getSmoothTrackDeadband(@NonNull Axis axis,                                               @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.YAW_SMOOTH_TRACK_DEADBAND, GimbalKey.PITCH_SMOOTH_TRACK_DEADBAND
Description:
Gets SmoothTrack deadband on an axis. A larger deadband requires more handle movement to translate into gimbal motion. Use PITCH_SMOOTH_TRACK_DEADBAND and YAW_SMOOTH_TRACK_DEADBAND with getCapabilities to check if the gimbal supports this feature and the range of possible values in degrees.
Input Parameters:
@NonNull Axis axisGimbal axis.@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned execution result.
AccelerationmethodsetSmoothTrackAcceleration
method setSmoothTrackAcceleration
void setSmoothTrackAcceleration(@NonNull Axis axis,                                                   @IntRange(from = 0, to = 30) int acceleration,                                                   @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.YAW_SMOOTH_TRACK_ACCELERATION, GimbalKey.PITCH_SMOOTH_TRACK_ACCELERATION
Description:
Sets SmoothTrack acceleration on an axis. Acceleration determines how closely the camera will follow the translated yaw handle movement. Use PITCH_SMOOTH_TRACK_ACCELERATION and YAW_SMOOTH_TRACK_ACCELERATION with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisGimbal axis.@IntRange(from = 0, to = 30) int accelerationSmoothTrack acceleration [0,30].@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetSmoothTrackAcceleration
method getSmoothTrackAcceleration
void getSmoothTrackAcceleration(@NonNull Axis axis,                                                   @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.YAW_SMOOTH_TRACK_ACCELERATION, GimbalKey.PITCH_SMOOTH_TRACK_ACCELERATION
Description:
Gets SmoothTrack acceleration on an axis. Acceleration determines how closely the camera will follow the translated yaw handle movement. Use PITCH_SMOOTH_TRACK_ACCELERATION and YAW_SMOOTH_TRACK_ACCELERATION with getCapabilities to check if the gimbal supports this feature and the range of possible values (unitless).
Input Parameters:
@NonNull Axis axisGimbal axis.@NonNull final CompletionCallbackWith<Integer> callbackThe execution callback with the returned execution result.
Endpoint Setting
Set EndpointmethodsetEndpoint
method setEndpoint
void setEndpoint(@NonNull EndpointDirection direction,                           @IntRange(from = 0, to = 179) int endpoint,                           @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_UP_ENDPOINT, GimbalKey.YAW_RIGHT_ENDPOINT, GimbalKey.YAW_RIGHT_ENDPOINT, GimbalKey.YAW_LEFT_ENDPOINT, GimbalKey.PITCH_DOWN_ENDPOINT
Description:
Endpoint settings determine the farthest points to which the gimbal will rotate during manual controller input. Only supported by Ronin-MX. Use PITCH_UP_ENDPOINT, PITCH_DOWN_ENDPOINT, YAW_LEFT_ENDPOINT and YAW_RIGHT_ENDPOINT in getCapabilities to check if the gimbal supports this feature and what the valid range of endpoints are.
Input Parameters:
@IntRange(from = 0, to = 179) int endpointThe endpoint value to set.@NonNull EndpointDirection directionThe direction that the setting will be applied to.@Nullable final CompletionCallback callbackThe completion callback that receives the execution result.
Get EndpointmethodgetEndpoint
method getEndpoint
void getEndpoint(@NonNull final EndpointDirection direction,                           @NonNull final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.PITCH_UP_ENDPOINT, GimbalKey.YAW_RIGHT_ENDPOINT, GimbalKey.YAW_RIGHT_ENDPOINT, GimbalKey.YAW_LEFT_ENDPOINT
Description:
Gets the farthest points to which the gimbal will rotate during manual controller input. Use PITCH_UP_ENDPOINT, PITCH_DOWN_ENDPOINT, YAW_LEFT_ENDPOINT and YAW_RIGHT_ENDPOINT with getCapabilities to check if the gimbal supports this feature.
Input Parameters:
@NonNull final EndpointDirection directionThe endpoint direction.@NonNull final CompletionCallbackWith<Integer> callbackThe completion callback that receives the execution result.
Other Settings
Enable MotormethodsetMotorEnabled
method setMotorEnabled
void setMotorEnabled(boolean enabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.MOTOR_ENABLED
Description:
Turns on and off the gimbal motors. false means the gimbal power remains on, however the motors will not work.
Input Parameters:
boolean enabledtrue to enable the motor.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetMotorEnabled
method getMotorEnabled
void getMotorEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.MOTOR_ENABLED
Description:
Determines whether the gimbal motors are enabled to work or not.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Toggle Gimbal SelfiemethodtoggleSelfie
method toggleSelfie
void toggleSelfie(@Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.TOGGLE_SELFIE
Description:
Resets gimbal position to selfie setup. If the gimbal yaw is not at 180 degrees, then calling this method will rotate the gimbal yaw to 180 degrees (effectively pointing the camera to the person holding the gimbal). If the gimbal yaw is at 180 degrees, then the gimbal will rotate in yaw to 0 degrees. It's only supported by DJI OSMO, OSMO Pro and OSMO Raw.
Input Parameters:
@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
Gimbal Controller ModemethodsetControllerMode
method setControllerMode
void setControllerMode(@NonNull ControllerMode mode,                                 @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.CONTROLLER_MODE
Description:
Sets the gimbal's controller mode. The control mode for the gimbal controller (joystick for Osmo). The total controller deflection is a combination of horizontal and vertical deflection. This translates to gimbal movement around the yaw and pitch axes. The gimbal can be set to either move in both yaw and pitch simultaneously based on horizontal and vertical deflection of the controller, or move in only yaw or pitch exclusively based on whether horizontal or vertical deflection is larger.
Input Parameters:
@NonNull ControllerMode modeSee enum named ControllerMode in DJIGimbal to find details on different gimbal stick control modes.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetControllerMode
method getControllerMode
void getControllerMode(@NonNull final CompletionCallbackWith<ControllerMode> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.CONTROLLER_MODE
Description:
Gets the gimbal's controller mode.
Input Parameters:
@NonNull final CompletionCallbackWith<ControllerMode> callbackThe execution callback with the returned value(s).
Inverted ControlmethodsetInvertedControlEnabled
method setInvertedControlEnabled
void setInvertedControlEnabled(@NonNull Axis axis,                                         boolean enabled,                                         @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.YAW_INVERTED_CONTROL_ENABLED, GimbalKey.PITCH_INVERTED_CONTROL_ENABLED
Description:
Inverts the physical control for gimbal movement on an axis. The setting can only be applied to the pitch or yaw axis.
Input Parameters:
boolean enabledtrue to enable inverted control.@NonNull Axis axisThe axis that the setting will be applied to.@Nullable final CompletionCallback callbackThe execution callback with the returned execution result.
methodgetInvertedControlEnabled
method getInvertedControlEnabled
void getInvertedControlEnabled(@NonNull Axis axis,                                         @NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.gimbalSDK Key:GimbalKey.YAW_INVERTED_CONTROL_ENABLED, GimbalKey.PITCH_INVERTED_CONTROL_ENABLED
Description:
Determines whether the physical control is inverted for gimbal movement on an axis. The setting can only be applied to the pitch or yaw axis.
Input Parameters:
@NonNull Axis axisThe axis to query.@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Attitude SynchronizationmethodsetAttitudeSynchronizationEnabled
method setAttitudeSynchronizationEnabled
void setAttitudeSynchronizationEnabled(boolean enabled,                                                 @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Synchronizes the attitude of port (left) gimbal and starboard (right) gimbal. It is only valid when both gimbals are connected. If only 1 gimbal is connected, this setting will be reset to false. Enables this setting will reset getControllingGimbalIndex to index 0. It is only supported by M210 and M210 RTK, not supported by DJI X-Port.
Input Parameters:
boolean enabledtrue to enable the synchronization.@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
methodgetAttitudeSynchronizationEnabled
method getAttitudeSynchronizationEnabled
void getAttitudeSynchronizationEnabled(@NonNull Axis axis,                                                 @NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.gimbal
Description:
Determines whether both gimbals' attitudes are synchronized. If only 1 gimbal is connected, this setting will be reset to false. It is only supported by M210 and M210 RTK.
Input Parameters:
@NonNull Axis axisAn enum value of Axis.@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Multi Gimbal Attitude SyncmethodstartMultiGimbalAttitudeSynchronization
method startMultiGimbalAttitudeSynchronization
void startMultiGimbalAttitudeSynchronization(int[] gimbals, final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Selects two to three gimbals to run with Multi-Gimbal Connection, which can be controlled by a single user. Please check if payloads have been connected with gimbal. The left gimbal, the right gimbal and the upper gimbal can be chosen. You should call setControllingGimbalIndex to  set the control of the remote controller to the gimbal you want to synchronize. It is only supported by Matrice 300 RTK.
Input Parameters:
int[] gimbalsArray of gimbal indexes, in which 0 represents the left gimbal, 1 represents the right gimbal and 2 stands for the upper one. nil if this function is disabled.final CompletionCallback callbackThe completion block that receives the execution result.
methodstopMultiGimbalAttitudeSynchronization
method stopMultiGimbalAttitudeSynchronization
void stopMultiGimbalAttitudeSynchronization(final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Stops the gimbals to run with Multi-Gimbal Connection. Please check if payloads have been connected with gimbal. It is only supported by Matrice 300 RTK.
Input Parameters:
final CompletionCallback callbackThe callback that receives the execution result.
Multi Gimbal Attitude Sync StatusmethodgetMultiGimbalAttitudeSynchronizationStatus
method getMultiGimbalAttitudeSynchronizationStatus
MultiGimbalConnectionWorkingStatus getMultiGimbalAttitudeSynchronizationStatus()
Package:dji.sdk.gimbal
Description:
Gets the working status of Multi-Gimbal Connection. It is only supported by Matrice 300 RTK.
Return:
MultiGimbalConnectionWorkingStatusMultiple gimbal synchronization status.
Yaw Simultaneous FollowmethodsetYawSimultaneousFollowEnabled
method setYawSimultaneousFollowEnabled
void setYawSimultaneousFollowEnabled(boolean isEnabled, @Nullable final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Enables this to make the gimbal respond to the controller command to rotate aircraft's heading. Enabling this setting makes gimbal rotate simultaneously with aircraft's heading when the user is controlling the aircraft's heading with the remote controller.
Input Parameters:
boolean isEnabledtrue to enable yaw simultaneous follow.@Nullable final CompletionCallback callbackThe execution callback with the returned value(s).
methodgetYawSimultaneousFollowEnabled
method getYawSimultaneousFollowEnabled
void getYawSimultaneousFollowEnabled(@NonNull final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.gimbal
Description:
Determines whether yaw simultaneous follow is enabled. Enabling this setting makes gimbal rotate simultaneously with aircraft's heading when the user is controlling the aircraft's heading with the remote controller.
Input Parameters:
@NonNull final CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Start Balance DetectionmethodstartBalanceDetection
method startBalanceDetection
void startBalanceDetection(final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Starts the balance detection.  Note:  Please DO NOT turn on the motors. The tilt angle of the pitch and roll axis should be between -30 and -20 degrees. Please fit the screw on the auxiliary arm after the balance detection. Invoked before startConcentricityDetection and startControlParametersAutoTuning. Or start balance detection with default control parameters.  This can only be invoked during DEVELOPMENT phase.
Input Parameters:
final CompletionCallback callbackThe callback that receives the execution result.
Stop Balance DetectionmethodstopBalanceDetection
method stopBalanceDetection
void stopBalanceDetection(final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Stops the balance detection. This can only be invoked during DEVELOPMENT phase.
Input Parameters:
final CompletionCallback callbackThe callback that receives the execution result.
Start Coaxiality DetectionmethodstartConcentricityDetection
method startConcentricityDetection
void startConcentricityDetection(final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Starts the coaxiality detection.  Note:  Please DO NOT turn on the motors. The tilt angle of the pitch and roll axis cannot be greater than 5 degrees. Please start coaxiality detection after gimbal's balance detection and fitting the screw on the auxiliary arm. This can only be invoked during DEVELOPMENT phase.
Input Parameters:
final CompletionCallback callbackThe callback that receives the execution result.
Stop Coaxiality DetectionmethodstopConcentricityDetection
method stopConcentricityDetection
void stopConcentricityDetection(final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Stops the coaxiality detection. This can only be invoked during DEVELOPMENT phase.
Input Parameters:
final CompletionCallback callbackThe callback that receives the execution result.
Start Control Parameters Auto TuningmethodstartControlParametersAutoTuning
method startControlParametersAutoTuning
void startControlParametersAutoTuning(final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Starts the control parameters auto tuning.  Note:  Please DO NOT turn on the motors. The tilt angle of the pitch and roll axis cannot be greater than 5 degrees. This can only be invoked during DEVELOPMENT phase.
Input Parameters:
final CompletionCallback callbackThe callback that receives the execution result.
Stop Control Parameters Auto TuningmethodstopControlParametersAutoTuning
method stopControlParametersAutoTuning
void stopControlParametersAutoTuning(final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Stops the control parameters auto tuning. This can only be invoked during DEVELOPMENT phase.
Input Parameters:
final CompletionCallback callbackThe callback that receives the execution result.
methodresetControlParameters
method resetControlParameters
void resetControlParameters(final CompletionCallback callback)
Package:dji.sdk.gimbal
Description:
Restores gimbal's control parameters coefficient.  Note:  Please DO NOT turn on the motors. This can only be invoked during DEVELOPMENT phase.
Input Parameters:
final CompletionCallback callbackThe callback that receives the execution result.
Inherited Methods:
dji.sdk.base.BaseComponentmethodsetComponentListener
method setComponentListener
void setComponentListener(ComponentListener listener)
Package:dji.sdk.base
Description:
Sets the listener for the DJI component.
Input Parameters:
ComponentListener listenerThe callback of ComponentListener.
methodgetIndex
method getIndex
int getIndex()
Package:dji.sdk.base
Description:
Returns the component index. Index is zero based. A component will have an index greater than zero when there  are multiple components of the same type on the DJI product, and one of the components already has the index 0.  For instance, M210 can have two gimbal mounted cameras, and will therefore have two gimbal components with indices  0 and 1, and two camera components with indices 0 and 1. For Matrice 600, there are printed numbers on the battery  boxes. The Battery component instance with index 0 corresponds to battery compartment number 1. For Inspire 2  and M200 series, Battery with index 0 corresponds to the battery on the port (left hand) side of the aircraft.  For M210, M210 RTK, M300 RTK and M350 RTK, Camera and Gimbal with index 0 corresponds to the camera and gimbal on the port  (left hand) side of the aircraft. Lidar with index 0 corresponds to the lidar(Zenmuse L1) on the port  (left hand) side of the aircraft.
Return:
intAn int value of index.
methodisConnected
method isConnected
boolean isConnected()
Package:dji.sdk.base
Description:
true if the component is connected.
Return:
booleantrue if the component is connected.
methodgetSerialNumber
method getSerialNumber
void getSerialNumber(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Gets the serial number of the component. Depending on the component, this serial number might not match the serial number found  on the physical component.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value returned.
methodgetFirmwareVersion
method getFirmwareVersion
void getFirmwareVersion(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Returns the firmware version of the component. Each component will  have a different firmware version, the combination of which will  form the package firmware version getFirmwarePackageVersion found in BaseProduct.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value(s) returned.
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ getFirmwareVersion
  ‚Ä¢ voidstartControlParametersAutoTuning
  ‚Ä¢ resetControlParameters
  ‚Ä¢ startControlParametersAutoTuning
  ‚Ä¢ getIndex
  ‚Ä¢ voidsetMovementSettingsCallback
  ‚Ä¢ voidsetMode
  ‚Ä¢ voidfineTunePitchInDegrees
  ‚Ä¢ setYawSimultaneousFollowEnabled
  ‚Ä¢ getSmoothTrackAcceleration
  ‚Ä¢ intgetIndex
  ‚Ä¢ setControllerDeadband
  ‚Ä¢ extension
  ‚Ä¢ value
  ‚Ä¢ YAW_RIGHTYaw
  ‚Ä¢ voidstopMultiGimbalAttitudeSynchronization
  ‚Ä¢ getPitchRangeExtensionEnabled
  ‚Ä¢ startMultiGimbalAttitudeSynchronization
  ‚Ä¢ startCalibration
  ‚Ä¢ getControllerSpeedCoefficient
  ‚Ä¢ getSmoothTrackSpeed
  ‚Ä¢ setBatteryChargeRemainingCallback
  ‚Ä¢ setMovementSettingsCallback
  ‚Ä¢ stopBalanceDetection
  ‚Ä¢ stopMultiGimbalAttitudeSynchronization
  ‚Ä¢ restoreFactorySettings
  ‚Ä¢ X5S
  ‚Ä¢ trigger
  ‚Ä¢ getMotorControlPreControl
  ‚Ä¢ voidstartCalibration
  ‚Ä¢ voidstopBalanceDetection
  ‚Ä¢ setComponentListener
  ‚Ä¢ voidstartBalanceTest
  ‚Ä¢ booleanisConnected
  ‚Ä¢ voidtoggleSelfie
  ‚Ä¢ voidgetPitchRangeExtensionEnabled
  ‚Ä¢ getControllerDeadband
  ‚Ä¢ voidstartBalanceDetection
  ‚Ä¢ setAttitudeSynchronizationEnabled
  ‚Ä¢ getEndpoint
  ‚Ä¢ getControllerMaxSpeed
  ‚Ä¢ products
  ‚Ä¢ XT2
  ‚Ä¢ getMotorEnabled
  ‚Ä¢ rotate
  ‚Ä¢ getMotorControlGyroFilteringFactor
  ‚Ä¢ voidsetMotorEnabled
  ‚Ä¢ getMotorControlStrength
  ‚Ä¢ startBalanceTest
  ‚Ä¢ stopControlParametersAutoTuning
  ‚Ä¢ voidstartMultiGimbalAttitudeSynchronization
  ‚Ä¢ voidresetControlParameters
  ‚Ä¢ voidlookAt
  ‚Ä¢ voidstopConcentricityDetection
  ‚Ä¢ voidfineTuneYawInDegrees
  ‚Ä¢ voidreset
  ‚Ä¢ MultiGimbalConnectionWorkingStatusgetMultiGimbalAttitudeSynchronizationStatus
  ‚Ä¢ setMotorControlPreControl
  ‚Ä¢ degrees
  ‚Ä¢ voidgetFirmwareVersion
  ‚Ä¢ Z30
  ‚Ä¢ fineTuneRollInDegrees
  ‚Ä¢ startConcentricityDetection
  ‚Ä¢ YAW_LEFTYaw
  ‚Ä¢ reset
  ‚Ä¢ setMotorEnabled
  ‚Ä¢ setMotorControlStiffness
  ‚Ä¢ getMotorControlStiffness
  ‚Ä¢ applyMotorControlPreset
  ‚Ä¢ series
  ‚Ä¢ starboard
  ‚Ä¢ XTS
  ‚Ä¢ isConnected
  ‚Ä¢ voidgetSerialNumber
  ‚Ä¢ lookAt
  ‚Ä¢ setMode
  ‚Ä¢ voidgetYawSimultaneousFollowEnabled
  ‚Ä¢ voidrestoreFactorySettings
  ‚Ä¢ setStateCallback
  ‚Ä¢ setEndpoint
  ‚Ä¢ toggleSelfie
  ‚Ä¢ IntRange
  ‚Ä¢ getYawSimultaneousFollowEnabled
  ‚Ä¢ setMovementSettingsProfile
  ‚Ä¢ PITCH_UPPitch
  ‚Ä¢ FloatRange
  ‚Ä¢ voidsetStateCallback
  ‚Ä¢ setSmoothTrackEnabled
  ‚Ä¢ stationary
  ‚Ä¢ getControllerSmoothingFactor
  ‚Ä¢ voidsetBatteryChargeRemainingCallback
  ‚Ä¢ setMotorControlGyroFilteringFactor
  ‚Ä¢ voidsetComponentListener
  ‚Ä¢ values
  ‚Ä¢ getSmoothTrackEnabled
  ‚Ä¢ getMultiGimbalAttitudeSynchronizationStatus
  ‚Ä¢ stopConcentricityDetection
  ‚Ä¢ setControllerSmoothingFactor
  ‚Ä¢ getControllerMode
  ‚Ä¢ H20T
  ‚Ä¢ setInvertedControlEnabled
  ‚Ä¢ voidgetControllerMode
  ‚Ä¢ getAttitudeSynchronizationEnabled
  ‚Ä¢ voidsetYawSimultaneousFollowEnabled
  ‚Ä¢ setSmoothTrackDeadband
  ‚Ä¢ setMotorControlStrength
  ‚Ä¢ port
  ‚Ä¢ range
  ‚Ä¢ setSmoothTrackSpeed
  ‚Ä¢ getCapabilities
  ‚Ä¢ fineTuneYawInDegrees
  ‚Ä¢ voidrotate
  ‚Ä¢ voidfineTuneRollInDegrees
  ‚Ä¢ setSmoothTrackAcceleration
  ‚Ä¢ getSerialNumber
  ‚Ä¢ getMovementSettingsProfile
  ‚Ä¢ voidstopControlParametersAutoTuning
  ‚Ä¢ setControllerSpeedCoefficient
  ‚Ä¢ setPitchRangeExtensionEnabled
  ‚Ä¢ startBalanceDetection
  ‚Ä¢ voidstartConcentricityDetection
  ‚Ä¢ voidgetMotorEnabled
  ‚Ä¢ getSmoothTrackDeadband
  ‚Ä¢ controller
  ‚Ä¢ fineTunePitchInDegrees
  ‚Ä¢ setControllerMode
  ‚Ä¢ getInvertedControlEnabled
  ‚Ä¢ PITCH_DOWNPitch
  ‚Ä¢ lidar
  ‚Ä¢ setControllerMaxSpeed


================================================================================
P√ÅGINA 7: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/Battery/DJIBattery.html
M√©todos encontrados: 61
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class Battery
class Battery extends BaseComponent
Package:dji.sdk.batteryInherits From:BaseComponent
Description:
This class manages information and real-time status of the connected product's batteries. This object is available from the Aircraft or HandHeld object which is a subclass of BaseProduct.
Class Members:
Related (Not in Class)
GeneralclassAggregationStateclassBatteryStateclassWarningRecordenumLowVoltageBehavior
enum LowVoltageBehavior
@EXClassNullAway enum LowVoltageBehavior
Package:dji.common.batterySDK Key:BatteryKey.LEVEL_1_CELL_VOLTAGE_BEHAVIOR, BatteryKey.LEVEL_2_CELL_VOLTAGE_BEHAVIOR
Description:
Defines aircraft's behavior when the cell voltage is low.
Enum Members:
FLASH_LEDLED lights go into warning mode.GO_HOMEReturn-to-Home.LANDLand aircraft immediately.UNKNOWNUnknown.
Class Members:
enumPairingState
enum PairingState
@EXClassNullAway enum PairingState
Package:dji.common.batterySDK Key:BatteryKey.PAIRING_STATE
Description:
Battery pairing state for batteries that can be paired.
Enum Members:
UNPAIREDThe batteries didn't match; they're not paired.PAIREDBatteries are paired.UNKNOWNCan't get the pair state or the batteries.
Class Members:
enumSelfHeatingState
enum SelfHeatingState
enum SelfHeatingState
Package:dji.common.battery
Description:
Provides the self-heating state for the battery. When the temperature of the battery is below a threshold, it will warm up automatically. For Mavic 2 Enterprise, the self-heating is triggered when the temperature is lower than 6 Celsius degrees. When the temperature reaches 8 Celsius degrees, the battery will start to preserve the temperature and maintain it between 6 Celsius degrees and 8 Celsius degrees.
Enum Members:
IDLEThe auto heating feature is idle.WARMING_UPThe battery is warming itself up automatically.PRESERVINGThe battery is preserving its temperature. For Mavic 2 Enterprise, the temperature will be maintained between 6 Celsius degrees and 8 Celsius degrees.UNKNOWNUnknown.
Class Members:
enumSmartBatteryType
enum SmartBatteryType
enum SmartBatteryType
Package:dji.common.battery
Description:
Defines smart battery type.
Enum Members:
OTHERThe smart battery type is other.MAVIC_MINI_JAPANThe smart battery type is Mavic Mini Japan, which is legal to use in Japan.UNKNOWNThe smart battery type is unknown.
Class Members:
Related:
enumConnectionState
enum ConnectionState
@EXClassNullAway enum ConnectionState
Package:dji.common.batterySDK Key:BatteryKey.CONNECTION_STATE
Description:
Battery connection status. 0 means NORMAL, 1 means INVALID, and 2 means EXCEPTION in communication.
Enum Members:
NORMALNormal.INVALIDInvalid.EXCEPTIONException.UNKNOWNUnknown.
Class Members:
State Updates
GeneralmethodsetStateCallback
method setStateCallback
void setStateCallback(@Nullable BatteryState.Callback callback)
Package:dji.sdk.battery
Description:
Sets the callback that updates battery state.
Input Parameters:
@Nullable BatteryState.Callback callbackCallback method.
AggregationmethodsetAggregationStateCallback
method setAggregationStateCallback
static void setAggregationStateCallback(@Nullable AggregationState.Callback callback)
Package:dji.sdk.batterySDK Key:BatteryKey.AGGREGATION_STATE
Description:
Sets the callback that updates aggregated battery state.
Input Parameters:
@Nullable AggregationState.Callback callbackCallback method.
Battery Cell Properties
VoltagemethodgetCellVoltages
method getCellVoltages
void getCellVoltages(@NonNull CompletionCallbackWith<Integer[]> callback)
Package:dji.sdk.batterySDK Key:BatteryKey.CELL_VOLTAGES
Description:
Gets the battery's cell voltages. There will be a voltage for each cell in the battery.
Input Parameters:
@NonNull CompletionCallbackWith<Integer[]> callbackAsynchronous execution result callback.
NumbermethodgetNumberOfCells
method getNumberOfCells
int getNumberOfCells()
Package:dji.sdk.batterySDK Key:BatteryKey.NUMBER_OF_CELLS
Description:
Returns the number of battery cells.
Return:
intAn int value.
methodsetNumberOfCells
method setNumberOfCells
void setNumberOfCells(@IntRange(from = 3, to = 12) int numberOfCells,                                         @Nullable CompletionCallback callback)
Package:dji.sdk.batterySDK Key:BatteryKey.NUMBER_OF_CELLS
Description:
When the connected battery is not a smart battery, the number of cells needs to be set manually. The flight controller uses the number of cells and the cell voltage threshold to determine if the aircraft should go home or land. The valid range is [3, 12] cells.
Input Parameters:
@IntRange(from = 3, to = 12) int numberOfCellsNumber of cells inside the battery.@Nullable CompletionCallback callbackAsynchronous execution result callback.
Information
Smart BatterymethodisSmartBattery
method isSmartBattery
boolean isSmartBattery()
Package:dji.sdk.batterySDK Key:BatteryKey.IS_SMART_BATTERY
Description:
true if the battery is a smart battery. When the connected battery is a DJI smart battery, more information can be obtained by communicating with the battery.
Return:
boolean><code>true</code> if battery is smart battery.
Pair BatteriesmethodpairBatteries
method pairBatteries
void pairBatteries(@Nullable CompletionCallback callback)
Package:dji.sdk.batterySDK Key:BatteryKey.PAIR_BATTERIES
Description:
A battery's full charge capacity reduces a little every time it goes through a discharge and recharge cycle. Therefore, older batteries that have gone through many cycles will have lower full charge capacity than newer batteries. When multiple batteries are used simultaneously in a product, the aggregate full charge capacity will be limited by the battery with the lowest full charge capacity.  To optimize the amount of energy delivered by a battery over its lifetime to a product, batteries should be matched or paired with other batteries of similar full charge capacity. The operational challenges of always using paired batteries can be alleviated using the battery pairing interfaces. This method will pair two batteries by recording the aggregate of their serial numbers in each of their firmwares. getPairingState can then be used to determine if the installed battery combination is a previously assigned pair or not. Batteries can be repaired.
Input Parameters:
@Nullable CompletionCallback callbackCompletion callback that receives the execution result.
methodgetPairingState
method getPairingState
void getPairingState(@NonNull CompletionCallbackWith<PairingState> callback)
Package:dji.sdk.batterySDK Key:BatteryKey.PAIRING_STATE
Description:
A battery's full charge capacity reduces a little every time it goes through a discharge and recharge cycle. Therefore, older batteries that have gone through many cycles will have lower full charge capacity than newer batteries. When multiple batteries are used simultaneously in a product, the aggregate full charge capacity will be limited by the battery with lowest full charge capacity.  To optimize the amount of energy delivered by a battery over its lifetime to a product, batteries should be matched or paired with other batteries of similar full charge capacity. The operational challenges of always using paired batteries can be alleviated using the battery pairing interfaces. This method can then be used to determine if the installed battery combination is a previously assigned pair or not.
Input Parameters:
@NonNull CompletionCallbackWith<PairingState> callbackCallback that receives the pairing state.
Manufacture DatemethodgetManufactureDate
method getManufactureDate
void getManufactureDate(@NonNull final CompletionCallbackWith<Date> callback)
Package:dji.sdk.battery
Description:
Gets the manufacture date of current battery. It it only supported by Matrice 300 RTK.
Input Parameters:
@NonNull final CompletionCallbackWith<Date> callbackThe execution callback with the returned value(s).
Behavior at Thresholds
Voltage ThresholdmethodsetLevel1CellVoltageThreshold
method setLevel1CellVoltageThreshold
void setLevel1CellVoltageThreshold(@IntRange(from = 3600, to = 4000) int voltage,                                                      @Nullable CompletionCallback callback)
Package:dji.sdk.batterySDK Key:BatteryKey.LEVEL_1_CELL_VOLTAGE_THRESHOLD
Description:
Sets the Level 1 cell voltage threshold in mV. When the cell voltage of the battery crosses below the threshold, Level 1 behavior will be executed. The valid range is [3600, 4000] mV. When the new value is not 100 mV higher than the Level 2 cell voltage threshold, the Level 2 threshold will be set to (new value - 100) mV.
Input Parameters:
@IntRange(from = 3600, to = 4000) int voltageLevel 1 cell voltage threshold to set in mV.@Nullable CompletionCallback callbackCompletion block that receives the setter execution result.
methodgetLevel1CellVoltageThreshold
method getLevel1CellVoltageThreshold
void getLevel1CellVoltageThreshold(@NonNull CompletionCallbackWith<Integer> callback)
Package:dji.sdk.batterySDK Key:BatteryKey.LEVEL_1_CELL_VOLTAGE_THRESHOLD
Description:
Gets the Level 1 cell voltage threshold in mV. When the cell voltage of the battery crosses below the threshold, Level 1 behavior will be executed. The valid range is [3600, 4000] mV.
Input Parameters:
@NonNull CompletionCallbackWith<Integer> callbackAsynchronous execution result callback that contains the voltage threshold.
methodsetLevel2CellVoltageThreshold
method setLevel2CellVoltageThreshold
void setLevel2CellVoltageThreshold(@IntRange(from = 3500, to = 3800) int voltage,                                                      @Nullable CompletionCallback callback)
Package:dji.sdk.batterySDK Key:BatteryKey.LEVEL_2_CELL_VOLTAGE_THRESHOLD
Description:
Sets the Level 2 cell voltage threshold in mV. When the cell voltage of the battery crosses below the threshold, Level 2 behavior will be executed. The valid range is [3500, 3800] mV and must be at least 100 mV lower than the Level 1 voltage threshold.
Input Parameters:
@IntRange(from = 3500, to = 3800) int voltageLevel 2 cell voltage threshold to set in mV.@Nullable CompletionCallback callbackAsynchronous execution result callback.
methodgetLevel2CellVoltageThreshold
method getLevel2CellVoltageThreshold
void getLevel2CellVoltageThreshold(@NonNull CompletionCallbackWith<Integer> callback)
Package:dji.sdk.batterySDK Key:BatteryKey.LEVEL_2_CELL_VOLTAGE_THRESHOLD
Description:
Gets the Level 2 cell voltage threshold in mV. When the cell voltage of the battery crosses below the threshold, Level 2 behavior will be executed.
Input Parameters:
@NonNull CompletionCallbackWith<Integer> callbackAsynchronous execution result callback that contains the voltage threshold.
Threshold BehaviormethodsetLevel1CellVoltageBehavior
method setLevel1CellVoltageBehavior
void setLevel1CellVoltageBehavior(@NonNull LowVoltageBehavior behavior,                                                     @Nullable CompletionCallback callback)
Package:dji.sdk.batterySDK Key:BatteryKey.LEVEL_1_CELL_VOLTAGE_BEHAVIOR
Description:
Sets the behavior that will be executed when the cell voltage crosses under the Level 1 threshold. It can only be set when the motors are off.
Input Parameters:
@NonNull LowVoltageBehavior behaviorLevel 1 behavior.@Nullable CompletionCallback callbackCompletion block that receives the setter execution result.
methodgetLevel1CellVoltageBehavior
method getLevel1CellVoltageBehavior
void getLevel1CellVoltageBehavior(@NonNull CompletionCallbackWith<LowVoltageBehavior> callback)
Package:dji.sdk.batterySDK Key:BatteryKey.LEVEL_1_CELL_VOLTAGE_BEHAVIOR
Description:
Gets the behavior that will be executed when the cell voltage crosses under the Level 1 threshold.
Input Parameters:
@NonNull CompletionCallbackWith<LowVoltageBehavior> callbackAsynchronous execution result callback that contains the voltage threshold behavior.
methodsetLevel2CellVoltageBehavior
method setLevel2CellVoltageBehavior
void setLevel2CellVoltageBehavior(@NonNull LowVoltageBehavior behavior,                                                     @Nullable CompletionCallback callback)
Package:dji.sdk.batterySDK Key:BatteryKey.LEVEL_2_CELL_VOLTAGE_BEHAVIOR
Description:
Sets the operation that will be executed when the cell voltage crosses under Level 2 threshold. It can only be set when motors are off.
Input Parameters:
@NonNull LowVoltageBehavior behaviorLevel 2 behavior.@Nullable CompletionCallback callbackAsynchronous execution result callback.
methodgetLevel2CellVoltageBehavior
method getLevel2CellVoltageBehavior
void getLevel2CellVoltageBehavior(@NonNull CompletionCallbackWith<LowVoltageBehavior> callback)
Package:dji.sdk.batterySDK Key:BatteryKey.LEVEL_2_CELL_VOLTAGE_BEHAVIOR
Description:
Sets the behavior that will be executed when the cell voltage crosses under the Level 2 threshold. It is not supported by Mavic Air.
Input Parameters:
@NonNull CompletionCallbackWith<LowVoltageBehavior> callbackAsynchronous execution result callback that contains the voltage threshold behavior.
LED
Set LED EnabledmethodsetLEDsEnabled
method setLEDsEnabled
void setLEDsEnabled(boolean enabled, @Nullable CompletionCallback callback)
Package:dji.sdk.battery
Description:
Enables/disables the LED lights on the batteries. If all batteries' LEDs on the aircraft are turned off, the aircraft's power button LED indicator should be off. It's supported only by Matrice 300 RTK.
Input Parameters:
boolean enabledtrue to enable the LED lights on the batteries.@Nullable CompletionCallback callbackCompletion callback that receives the setter execution result.
Get LED EnabledmethodgetLEDsEnabled
method getLEDsEnabled
void getLEDsEnabled(@NonNull CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.battery
Description:
Determines if the LEDs on the battery is on. If all batteries' LEDs on the aircraft are turned off, the aircraft's power button LED indicator should be off. It's supported only by Matrice 300 RTK.
Input Parameters:
@NonNull CompletionCallbackWith<Boolean> callbackThe execution callback with the returned value(s).
Get battery typemethodgetBatteryType
method getBatteryType
void getBatteryType(@NonNull CompletionCallbackWith<SmartBatteryType> callback)
Package:dji.sdk.battery
Description:
Determines if the battery is the correct type in current area.
Input Parameters:
@NonNull CompletionCallbackWith<SmartBatteryType> callbackThe execution callback with the returned value(s).
Warning Records
CurrentmethodgetLatestWarningRecord
method getLatestWarningRecord
void getLatestWarningRecord(@NonNull CompletionCallbackWith<WarningRecord> callback)
Package:dji.sdk.batterySDK Key:BatteryKey.LATEST_WARNING_RECORD
Description:
Gets the battery's most recent warning record. Anytime the battery experiences a significant exception, it will get recorded as a warning record.
Input Parameters:
@NonNull CompletionCallbackWith<WarningRecord> callbackAsynchronous execution result callback that contains the latest warning record.
HistoricalmethodgetWarningRecords
method getWarningRecords
void getWarningRecords(@NonNull CompletionCallbackWith<WarningRecord[]> callback)
Package:dji.sdk.batterySDK Key:BatteryKey.HISTORICAL_WARNING_RECORDS
Description:
Gets the battery's warning records, which are kept for 30 days using objects of type WarningRecord. Call the isSmartBattery() method before using this method. Not supported by Osmo and non-smart batteries.
Input Parameters:
@NonNull CompletionCallbackWith<WarningRecord[]> callbackAsynchronous execution result callback that contains the batteries warning records.
Discharge
Self DischargemethodsetSelfDischargeInDays
method setSelfDischargeInDays
void setSelfDischargeInDays(@IntRange(from = 1, to = 20) int days,                                               @Nullable CompletionCallback callback)
Package:dji.sdk.batterySDK Key:BatteryKey.SELF_DISCHARGE_IN_DAYS
Description:
Smart batteries can be setup to automatically discharge over a custom period of time. This method sets the battery's self discharge period in days with range [1, 10]. For Inspire 2 and M200 series products, the max range value can be 20. Not supported by Mavic Air 2, DJI Air 2S, non-smart batteries, Spark and the Osmo series.
Input Parameters:
@IntRange(from = 1, to = 20) int daysDay for self-discharge@Nullable CompletionCallback callbackAsynchronous execution result callback.
methodgetSelfDischargeInDays
method getSelfDischargeInDays
void getSelfDischargeInDays(@NonNull CompletionCallbackWith<Integer> callback)
Package:dji.sdk.batterySDK Key:BatteryKey.SELF_DISCHARGE_IN_DAYS
Description:
Smart batteries can be setup to automatically discharge over a custom period of time. This method gets the battery's self discharge period in days with range [1, 10]. For Inspire 2 and M200 series products, the max range value can be 20. Not supported by non-smart batteries and the Osmo series.
Input Parameters:
@NonNull CompletionCallbackWith<Integer> callbackAsynchronous execution result callback that contains the number of days to discharge over.
Inherited Methods:
dji.sdk.base.BaseComponentmethodsetComponentListener
method setComponentListener
void setComponentListener(ComponentListener listener)
Package:dji.sdk.base
Description:
Sets the listener for the DJI component.
Input Parameters:
ComponentListener listenerThe callback of ComponentListener.
methodgetIndex
method getIndex
int getIndex()
Package:dji.sdk.base
Description:
Returns the component index. Index is zero based. A component will have an index greater than zero when there  are multiple components of the same type on the DJI product, and one of the components already has the index 0.  For instance, M210 can have two gimbal mounted cameras, and will therefore have two gimbal components with indices  0 and 1, and two camera components with indices 0 and 1. For Matrice 600, there are printed numbers on the battery  boxes. The Battery component instance with index 0 corresponds to battery compartment number 1. For Inspire 2  and M200 series, Battery with index 0 corresponds to the battery on the port (left hand) side of the aircraft.  For M210, M210 RTK, M300 RTK and M350 RTK, Camera and Gimbal with index 0 corresponds to the camera and gimbal on the port  (left hand) side of the aircraft. Lidar with index 0 corresponds to the lidar(Zenmuse L1) on the port  (left hand) side of the aircraft.
Return:
intAn int value of index.
methodisConnected
method isConnected
boolean isConnected()
Package:dji.sdk.base
Description:
true if the component is connected.
Return:
booleantrue if the component is connected.
methodgetSerialNumber
method getSerialNumber
void getSerialNumber(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Gets the serial number of the component. Depending on the component, this serial number might not match the serial number found  on the physical component.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value returned.
methodgetFirmwareVersion
method getFirmwareVersion
void getFirmwareVersion(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Returns the firmware version of the component. Each component will  have a different firmware version, the combination of which will  form the package firmware version getFirmwarePackageVersion found in BaseProduct.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value(s) returned.
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ getFirmwareVersion
  ‚Ä¢ voidsetLevel1CellVoltageThreshold
  ‚Ä¢ setComponentListener
  ‚Ä¢ voidgetBatteryType
  ‚Ä¢ voidsetSelfDischargeInDays
  ‚Ä¢ setAggregationStateCallback
  ‚Ä¢ getLevel2CellVoltageBehavior
  ‚Ä¢ getIndex
  ‚Ä¢ voidgetPairingState
  ‚Ä¢ voidsetNumberOfCells
  ‚Ä¢ isSmartBattery
  ‚Ä¢ booleanisConnected
  ‚Ä¢ setLevel1CellVoltageThreshold
  ‚Ä¢ getWarningRecords
  ‚Ä¢ setSelfDischargeInDays
  ‚Ä¢ port
  ‚Ä¢ voidgetSelfDischargeInDays
  ‚Ä¢ staticvoidsetAggregationStateCallback
  ‚Ä¢ intgetIndex
  ‚Ä¢ setNumberOfCells
  ‚Ä¢ getNumberOfCells
  ‚Ä¢ getPairingState
  ‚Ä¢ getLevel1CellVoltageBehavior
  ‚Ä¢ isConnected
  ‚Ä¢ voidgetLevel2CellVoltageBehavior
  ‚Ä¢ voidgetManufactureDate
  ‚Ä¢ voidgetLEDsEnabled
  ‚Ä¢ value
  ‚Ä¢ setLevel2CellVoltageBehavior
  ‚Ä¢ pairBatteries
  ‚Ä¢ setLevel2CellVoltageThreshold
  ‚Ä¢ getSerialNumber
  ‚Ä¢ getSelfDischargeInDays
  ‚Ä¢ voidgetLevel2CellVoltageThreshold
  ‚Ä¢ voidgetLevel1CellVoltageBehavior
  ‚Ä¢ getBatteryType
  ‚Ä¢ voidsetLEDsEnabled
  ‚Ä¢ voidgetSerialNumber
  ‚Ä¢ getLevel2CellVoltageThreshold
  ‚Ä¢ intgetNumberOfCells
  ‚Ä¢ getLevel1CellVoltageThreshold
  ‚Ä¢ setLEDsEnabled
  ‚Ä¢ getLatestWarningRecord
  ‚Ä¢ setStateCallback
  ‚Ä¢ voidgetLevel1CellVoltageThreshold
  ‚Ä¢ IntRange
  ‚Ä¢ voidgetCellVoltages
  ‚Ä¢ getLEDsEnabled
  ‚Ä¢ getManufactureDate
  ‚Ä¢ voidgetFirmwareVersion
  ‚Ä¢ Related
  ‚Ä¢ voidsetStateCallback
  ‚Ä¢ voidpairBatteries
  ‚Ä¢ setLevel1CellVoltageBehavior
  ‚Ä¢ voidsetLevel2CellVoltageThreshold
  ‚Ä¢ voidsetComponentListener
  ‚Ä¢ getCellVoltages
  ‚Ä¢ lidar
  ‚Ä¢ voidgetWarningRecords
  ‚Ä¢ booleanisSmartBattery
  ‚Ä¢ voidgetLatestWarningRecord


================================================================================
P√ÅGINA 8: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/RemoteController/DJIRemoteController.html
M√©todos encontrados: 252
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class RemoteController
class RemoteController extends BaseComponent
Package:dji.sdk.remotecontrollerInherits From:BaseComponent
Description:
This class represents the remote controller of the aircraft. It provides methods to change the settings of the physical remote controller. For some products (e.g. Inspire 1 and Matrice 100), the class provides methods to manager the slave/master mode of the remote controllers. A remote controller is a device that can have a GPS, battery, radio, buttons, sticks, wheels, and output ports for video. The mobile device is connected to the remote controller, which is always sending out information about what everything is doing. The normal remote controller is called the master. A slave wirelessly connects to the master remote controller at 5 GHz, and the aircraft can also download information to the slave. The slave can send gimbal control commands to the master. This configuration allows one person to fly the aircraft while another person controls the gimbal. This object is available from the Aircraft subclass off BaseProduct.
Class Members:
Related:
Master/Slave RCclassGimbalMappingenumRCMode
enum RCMode
@EXClassNullAway enum RCMode
Package:dji.common.remotecontrollerSDK Key:RemoteControllerKey.MODE
Description:
Remote Controller mode of operation can be normal (single RC connected to aircraft), master, slave, or unknown.
Enum Members:
MASTERRemote Controller is a master (will route a connected slave Remote
Controller's commands to the aircraft).SLAVERemote Controller is currently a slave Remote Controller (sends commands to aircraft through a master Remote Controller).NORMALRemote Controller is not connected to another Remote Controller.UNKNOWNThe Remote Controller's mode is unknown.
Class Members:
enumCalibrationState
enum CalibrationState
@EXClassNullAway enum CalibrationState
Package:dji.common.remotecontroller
Description:
Remote Controller's calibration mode.
Enum Members:
NORMALThere is currently no Remote Controller calibration happening.MIDDLECurrently recording the joystick in its center position (joystick is untouched).LIMITSCurrently recording the extreme joystick positions, when joysticks are all the way to their max in any direction (left, right, up, or down).QUITThe Remote Controller is exiting calibration.
Class Members:
classInformationenumConnectToMasterResult
enum ConnectToMasterResult
@EXClassNullAway enum ConnectToMasterResult
Package:dji.common.remotecontroller
Description:
Result when a slave Remote Controller tries to join a master Remote Controller.
Enum Members:
ACCEPTEDThe slave Remote Controller's attempt to join the master Remote Controller was successful.PASSWORD_ERRORThe slave Remote Controller's attempt to join the master Remote Controller was unsuccessful due to a password error.REJECTEDThe slave Remote Controller's attempt to join the master Remote Controller was rejected.MAXIMUM_CAPACITYThe slave Remote Controller's attempt to join the master Remote Controller was unsuccessful because the master Remote Controller is at the maximum number of slaves it can have.TIMEOUTThe slave Remote Controller's attempt to join the master Remote Controller was unsuccessful because the request timed out.UNKNOWNThe result of the slave Remote Controller's attempt to join the master Remote Controller is unknown.
Class Members:
classMasterSlaveStateclassGimbalControlSpeedCoefficientenumRequestGimbalControlResult
enum RequestGimbalControlResult
@EXClassNullAway enum RequestGimbalControlResult
Package:dji.common.remotecontrollerSDK Key:RemoteControllerKey.REQUEST_GIMBAL_CONTROL
Description:
Result when a slave Remote Controller requests permission to control the gimbal.
Enum Members:
ACCEPTEDThe master Remote Controller agrees to the slave's request.REJECTEDThe master Remote Controller denies the slave's request. If the slave Remote Controller wants to control the gimbal, it must send a request to the master Remote Controller first. Then the master Remote Controller can decide to approve or deny the request.TIMEOUTThe slave Remote Controller's request timed out.UNKNOWNThe slave Remote Controller's request is unknown.
Class Members:
classResponseForGimbalControlclassAuthorizationInfoState Updates - Master/SlaveenumGimbalMappingStyle
enum GimbalMappingStyle
@EXClassNullAway enum GimbalMappingStyle
Package:dji.common.remotecontrollerSDK Key:RemoteControllerKey.GIMBAL_MAPPING_STYLE
Description:
The gimbal control stick mapping styles.
Enum Members:
DEFAULTDefaultCUSTOMCustomUNKNOWNUnknown
Class Members:
classGimbalStickMappingState UpdatesclassCallbackclassMasterSearchingCallbackclassRTKChannelEnabledUpdatedCallbackclassHardwareStateenumSecondaryVideoOutputPort
enum SecondaryVideoOutputPort
@EXClassNullAway enum SecondaryVideoOutputPort
Package:dji.common.remotecontroller
Description:
Remote Controller port to which to send secondary video (in addition to USB video sent to the Mobile Device).
Enum Members:
HDMIHDMI port.SDISDI port.UnknownUnknown.
Class Members:
enumSecondaryVideoDisplayMode
enum SecondaryVideoDisplayMode
@EXClassNullAway enum SecondaryVideoDisplayMode
Package:dji.common.remotecontroller
Description:
Defines the combination of video sources to form the secondary output video. The secondary output can display video streams from one or two input sources. When the encode mode is single: Source 1 represents video from one of the Source1Only input ports (HDMI or AV). Source 2 represents video from EXT input port  (HD Gimbal Camera). When the encode mode is dual: Source 1 represents video from HDMI input port.  Source 2 represents video from AV input port.
Enum Members:
SOURCE_1_ONLYDisplays video from Source 1 only. When the current encode  mode is single, the secondary output will display  video from HDMI or AV input.  When the current encode mode is dual, the secondary output will display video from HDMI input.SOURCE_2_ONLYDisplays video from Source 2 only. When the current encode mode is single, the secondary output  will display video from HD Gimbal camera. When the current encode mode is dual, the secondary output  will display video from  AV input.SOURCE_1_MAINDisplays the video from Source 1 as the main subject, and the video from Source 2 in a mini  window (Picture in  Picture, or PIP).SOURCE_2_MAINDisplays the video from Source 2 as the main subject, and the video from Source 1 in a mini window (Picture in  Picture, or PIP).UNKNOWNUnknown output mode.
Class Members:
enumSecondaryVideoOSDUnit
enum SecondaryVideoOSDUnit
@EXClassNullAway enum SecondaryVideoOSDUnit
Package:dji.common.remotecontroller
Description:
OSD data units.
Enum Members:
IMPERIALImperial.METRICMetric.UNKNOWNUnknown.
Class Members:
enumSecondaryVideoFormat
enum SecondaryVideoFormat
@EXClassNullAway enum SecondaryVideoFormat
Package:dji.common.remotecontroller
Description:
Secondary output video resolution and frame rate.
Enum Members:
RESOLUTION_1080I_60FPS1080I 60FPS.RESOLUTION_1080I_50FPS1080I 50FPS.RESOLUTION_1080P_60FPS1080P 60FPS.RESOLUTION_1080P_50FPS1080P 50FPS.RESOLUTION_1080P_30FPS1080P 30FPS.RESOLUTION_1080P_25FPS1080P 25FPS.RESOLUTION_1080P_24FPS1080P 24FPS.RESOLUTION_720P_60FPS720P 60FPS.RESOLUTION_720P_50FPS720P 50FPS.RESOLUTION_720P_30FPS720P 30FPS.RESOLUTION_720P_25FPS720P 25FPS.RESOLUTION_720P_24FPS720P 24FPS.UNKNOWNUnknown.
Class Members:
enumPIPPosition
enum PIPPosition
@EXClassNullAway enum PIPPosition
Package:dji.common.remotecontroller
Description:
PIP (Picture In Picture) position on the screen relative to the main subject video.
Enum Members:
TOP_LEFTPIP is on the screen's top left.TOP_RIGHTPIP is on the screen's top right.BOTTOM_LEFTPIP is on the screen's bottom left.BOTTOM_RIGHTPIP is on the screen's bottom right.UNKNOWNPIP is on the screen's bottom right.
Class Members:
classGPSDataclassBatteryStateclassFocusControllerStateAircraft PairingenumPairingState
enum PairingState
@EXClassNullAway enum PairingState
Package:dji.common.remotecontrollerSDK Key:RemoteControllerKey.PAIRING_STATE
Description:
Remote Controller pairing state.
Enum Members:
UNPAIREDThe Remote Controller is not pairing.PAIRINGThe Remote Controller is currently pairing.FirmwareSwitchingThe Remote Controller is switching rc firmware.FirmwareSwitchedThe remote control has finished switching RC firmware.PAIREDThe Remote Controller's pairing was completed.UNKNOWNThe Remote Controller's pairing state is unknown.
Class Members:
Customize RCclassAircraftMappingenumGimbalAxis
enum GimbalAxis
@EXClassNullAway enum GimbalAxis
Package:dji.common.remotecontrollerSDK Key:LEFT_WHEEL_GIMBAL_CONTROL_AXIS
Description:
Defines what the Gimbal Dial (upper left dial on the Remote Controller) will control.
Enum Members:
PITCHThe upper left dial will control the gimbal's pitch.ROLLThe upper left dial will control the gimbal's roll.YAWThe upper left dial will control the gimbal's yaw.
Class Members:
classCustomButtonTagsMobile Device ChargingenumChargeMobileMode
enum ChargeMobileMode
@EXClassNullAway enum ChargeMobileMode
Package:dji.common.remotecontrollerSDK Key:RemoteControllerKey.CHARGE_MOBILE_MODE
Description:
Modes to charge an iOS mobile device. Only supported by Inspire 2.
Enum Members:
NEVERThe remote controller does not charge the mobile device.ALWAYSThe remote controller charges the mobile device until the the mobile device is fully charged.INTELLIGENTThe remote controller charges the mobile device in an intelligent mode: The remote controller starts charging when the mobile device's battery is lowered then 20% and stops charging when the mobile device's battery is above 50%. It is only supported by Inspire 2.UnknownThe Remote Controller's charging mode is unknown.
Class Members:
Cendence Button ActionenumButtonAction
enum ButtonAction
enum ButtonAction
Package:dji.common.remotecontroller
Description:
Actions that can be assigned to a customizable button. Some of the actions are reserved and the firmware will execute the corresponding actions even when the application is not connected. Some of the actions are defined by the mobile applications. The application is responsible for implementing the non firmware actions. The definitions used in DJI Go are provided. It is usually recommended to follow DJI Go's definitions for compability so if DJI Go is used at the same time as the SDK application the actions will be expected in both applications.
Enum Members:
CameraSettingToggle the camera setting view. The action has to be implemented by the application itself.GimbalCenterResets the gimbal attitude. The pitch and the yaw will point to the origin. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.MapSwitchSwitch the live view and the map view. The action has to be implemented by the application itself.ClearRouteClear the flight path in the map view. The action has to be implemented by the application itself.BatteryToggle the battery setting view. The action has to be implemented by the application itself.CenterMeteringTrigger central exposure metering. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.AeLockToggles the AE Lock setting. The action has to be implemented by the application itself.ForeArmToggle the LEDs on the four arms. The action has to be implemented by the application itself.RESET_FPV_GIMBALReset FPV gimbal attitude to the center, the gimbal will rotate 45 degrees in pitch axis up and down when the action is trigger. It is supported by the firmware of Matrice 200 series and Matrice 200 V2 series. For the other products, the action has to be implemented by the application itself.LiveViewExpandExpand the live view from the FPV camera. The action has to be implemented by the application itself.QUICK_SPINTrigger a Quick Spin. It is supported by the firmware of Inspire 2. For the other products, the action has to be implemented by the application itself.PlayBackToggle the playback view. The action has to be implemented by the application itself.CenterFocusTriggers focusing at the center of the live view. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.GetGimbalControlRequest gimbal control (for the slave remote controller). The action has to be implemented by the application itself.GimbalModeToggle YAW_FOLLOW and FREE for gimbal. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.QuickSettingToggle the customizable button setting view. The action has to be implemented by the application itself.AFMFToggle AF and MF for camera. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CloseTipsDismiss the warning tips. The action has to be implemented by the application itself.SmartGearToggle the automatic movement of the landing gear. The action has to be implemented by the application itself.ReviewWarningToggle the warning list view. The action has to be implemented by the application itself.SWITCH_FREQUENCYSwitch frequency bands of the remote controller. It is supported by the firmware of Matrice 200 series. For the other products, the action has to be implemented by the application itself.UpdateHomeDroneSet the home location of the aircraft to the current location of the aircraft. The action has to be implemented by the application itself.UpdateHomeRCSet the home location of the aircraft to the current location of the remote controller. The action has to be implemented by the application itself.FocusTrigger the camera focus. It is supported by the firmware of Matrice 200 series and Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CompositionModeToggle the composition mode for the Spotlight. The action has to be implemented by the application itself.FocusPeakingToggle the peak focus. The action has to be implemented by the application itself.GridLineToggle the display of grid. The action has to be implemented by the application itself.HistogramToggle the display of histogram. The action has to be implemented by the application itself.AEMFSwitchSwitch the white balance settings. The action has to be implemented by the application itself.OverExposureToggle the over-exposure warning. The action has to be implemented by the application itself.GIMBAL_YAW_RECENTERReset the gimbal yaw to align with the aircraft heading. The action has to be implemented by the application itself.TOGGLE_LANDING_GEARRetract or deploy the landing gear. It is supported by the firmware of Inspire 2. For the other products, the action has to be implemented by the application itself.CloseRadarMapToggle the radar map. The action has to be implemented by the application itself.CloseDownVPSToggle the downward vision sensors. The action has to be implemented by the application itself.CloseFrontAssToggle the forward obstacle avoidance. The action has to be implemented by the application itself.SwitchGimbalFpvSwitch the video source of the secondary video feeder between fpv and camera. The action has to be implemented by the application itself.FullScreenToggle the full screen mode. The action has to be implemented by the application itself.CUSTOM100Zoom out. It is only supported by Z30 camera. It is supported by the firmware of Matrice 200 V2 series. For the other products, the action has to be implemented by the application itself.CUSTOM101Zoom in. It is only supported by Z30 camera. It is supported by the firmware of Matrice 200 V2 series. For the other products, the action has to be implemented by the application itself.CUSTOM102Custom action with value 102. This value is reserved for SDK applications.CUSTOM103Toggle the DisplayMode. It is only supported by XT2 camera. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM104Custom action with value 104. This value is reserved for SDK applications.CUSTOM105Custom action with value 105. This value is reserved for SDK applications.CUSTOM106Custom action with value 106. This value is reserved for SDK applications.CUSTOM107Custom action with value 107. This value is reserved for SDK applications.CUSTOM108Custom action with value 108. This value is reserved for SDK applications.CUSTOM109Custom action with value 109. This value is reserved for SDK applications.NOT_DEFINEDNot defined. It is used to present that no action is bound to a button.CUSTOM150Triggers the widget of the payload device in the index of 0. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM151Triggers the widget of the payload device in the index of 1. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM152Triggers the widget of the payload device in the index of 2. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM153Triggers the widget of the payload device in the index of 3. It is supported by the firmware of Matrice 200 V2 series. For the other products, the action has to be implemented by the application itself.CUSTOM154Triggers the widget of the payload device in the index of 4. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM155Triggers the widget of the payload device in the index of 5. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM156Triggers the widget of the payload device in the index of 6. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM157Triggers the widget of the payload device in the index of 7. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM158Triggers the widget of the payload device in the index of 8. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM159Triggers the widget of the payload device in the index of 9. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM160Triggers the widget of the payload device in the index of 10. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM161Triggers the widget of the payload device in the index of 11. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM162Triggers the widget of the payload device in the index of 12. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM163Triggers the widget of the payload device in the index of 13. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.CUSTOM164Triggers the widget of the payload device in the index of 14. It is supported by the firmware of Matrice 200 series v2. For the other products, the action has to be implemented by the application itself.
Class Members:
RC Customizable ButtonenumCustomizableButton
enum CustomizableButton
enum CustomizableButton
Package:dji.common.remotecontrollerSDK Key:RemoteControllerKey.FETCH_CUSTOMIZED_ACTION_OF_BUTTON
Description:
The customizable buttons.
Enum Members:
C1The button with C1 label.C2The button with C2 label.C3The button with C3 label.C4The button with C4 label.BAThe button with BA label.BBThe button with BB label.BCThe button with BC label.BDThe button with BD label.BEThe button with BE label.BFThe button with BF label.BGThe button with BG label.BHThe button with BH label.TDThe button with TD label.MenuThe button with MENU label.LSThe button with LS label.RSThe button with RS label.LWThe button with LW label.RWThe button with RW label.UNKNOWNUnknown.
Class Members:
RC Pairing DeviceenumPairingDevice
enum PairingDevice
enum PairingDevice
Package:dji.common.remotecontroller
Description:
Types of the device that the remote controller can pair with. It is only used when the remote controller supports multi-device pairing. Only Supported by Phantom 4 RTK.
Enum Members:
AIRCRAFTThe device to be paired with is an aircraft.RTK_BASE_STATIONThe device to be paired with is an RTK base station.UNKONWNUnknown.
Class Members:
Multi Device StateenumMultiDeviceState
enum MultiDeviceState
enum MultiDeviceState
Package:dji.common.remotecontroller
Description:
The state (e.g. unpaired, paired, connected, etc.) of a device that may connected to the remote controller. It is only used when the remote controller supports multi-device pairing. Only supported by DJI Phantom 4 RTK.
Enum Members:
UNPAIREDThe remote controller is unpaired with the device. This state is for both aircraft and base station.PAIRINGThe remote controller is pairing with the device. This state is only for aircraft.PAIREDThe remote controller is paired. This state is only for aircraft.DISCONNECTEDThe remote controller is paired with the device but the connection between the device  and the remote controller is broken. The remote controller already remembers the device and the connection will receover automatically when it is possible. This state is only for base station. Only Supported by Phantom 4 RTK.CONNECTEDThe remote controller is paired with the device and it is connected to the device. This state is only for base station.UNKNOWNUnknown.
Class Members:
soft Switch JoyStick ModeenumSoftSwitchJoyStickMode
enum SoftSwitchJoyStickMode
enum SoftSwitchJoyStickMode
Package:dji.common.remotecontroller
Description:
Joy stick mode on the remote controller. It is only used when the remote controller doesn't have a mode switch. Only Supported by Mavic Mini, DJI Mini SE.
Enum Members:
SPORTSet the joy stick to sport mode. Only Supported by Mavic Mini, DJI Mini SE.POSITIONSet the joy stick to position mode. Only Supported by Mavic Mini, DJI Mini SE.TRIPODSet the joy stick to tripod mode. Only Supported by Mavic Mini, DJI Mini SE.UNKNOWNUnknown.
Class Members:
methodsetSoftSwitchJoyStickMode
method setSoftSwitchJoyStickMode
void setSoftSwitchJoyStickMode(SoftSwitchJoyStickMode mode, CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the joy stick mode on the remote controller. It is only used when the remote controller doesn't have a mode switch. Only Supported by Mavic Mini, DJI Mini SE.
methodgetSoftSwitchJoyStickMode
method getSoftSwitchJoyStickMode
void getSoftSwitchJoyStickMode(CommonCallbacks.CompletionCallbackWith<SoftSwitchJoyStickMode> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the joy stick mode on the remote controller. It is only used when the remote controller doesn't have a mode switch. Only Supported by Mavic Mini, DJI Mini SE.
classCredentialsclassProfessionalRCDisplay Name DisplayNameMavicPro
final DisplayNameMavicPro
static final String DisplayNameMavicPro = DJIRCAbstraction.DisplayNameMavicPro
Package:dji.sdk.remotecontroller
Description:
The display name of Mavic Pro's remote controller.
DisplayNameInspire1
final DisplayNameInspire1
static final String DisplayNameInspire1 = DJIRCAbstraction.DisplayNameInspire1
Package:dji.sdk.remotecontroller
Description:
The display name of the remote controller for Inspire 1 series and Matrice 100.
DisplayNameLightbridge2
final DisplayNameLightbridge2
static final String DisplayNameLightbridge2 = DJIRCAbstraction.DisplayNameLightbridge2
Package:dji.sdk.remotecontroller
Description:
The display name of the remote controller for Lightbridge 2 wireless module. The module is used by stand-alone Lightbridge 2, A3, N3 and Matrice 600 series.
DisplayNameInspire2
final DisplayNameInspire2
static final String DisplayNameInspire2 = DJIRCAbstraction.DisplayNameInspire2
Package:dji.sdk.remotecontroller
Description:
The display name of the remote controller for Inspire 2 and Matrice 200 series.
DisplayNameCendence
final DisplayNameCendence
static final String DisplayNameCendence = DJIRCAbstraction.DisplayNameCendence
Package:dji.sdk.remotecontroller
Description:
The display name of the Cendence remote controller.
DisplayNameCendenceSDR
final DisplayNameCendenceSDR
static final String DisplayNameCendenceSDR = DJIRCAbstraction.DisplayNameCendenceSDR
Package:dji.sdk.remotecontroller
Description:
The display name of the Cendence SDR remote controller.
DisplayNamePhantom3Professinal
final DisplayNamePhantom3Professinal
static final String DisplayNamePhantom3Professinal = DJIRCAbstraction.DisplayNamePhantom3Professinal
Package:dji.sdk.remotecontroller
Description:
The display name of the remote controller for Phantom 3 Professional, Phantom 3 Advanced and Phantom 4.
DisplayNamePhantom3Standard
final DisplayNamePhantom3Standard
static final String DisplayNamePhantom3Standard = DJIRCAbstraction.DisplayNamePhantom3Standard
Package:dji.sdk.remotecontroller
Description:
The display name of Phantom 3 Standard's remote controller.
DisplayNamePhantom4Pro
final DisplayNamePhantom4Pro
static final String DisplayNamePhantom4Pro = DJIRCAbstraction.DisplayNamePhantom4Pro
Package:dji.sdk.remotecontroller
Description:
The display name of Phantom 4 Pro's remote controller.
DisplayNamePhantom4Advanced
final DisplayNamePhantom4Advanced
static final String DisplayNamePhantom4Advanced = DJIRCAbstraction.DisplayNamePhantom4Advanced
Package:dji.sdk.remotecontroller
Description:
The display name of Phantom 4 Advanced's remote controller.
DisplayNamePhantom4ProV2
final DisplayNamePhantom4ProV2
static final String DisplayNamePhantom4ProV2 = DJIRCAbstraction.DisplayNamePhantom4ProV2
Package:dji.sdk.remotecontroller
Description:
The display name of the remote controller for Phantom 4 Pro V2.
DisplayNameSpark
final DisplayNameSpark
static final String DisplayNameSpark = DJIRCAbstraction.DisplayNameSpark
Package:dji.sdk.remotecontroller
Description:
The display name of Spark's remote controller.
DisplayNameMavicAir
final DisplayNameMavicAir
static final String DisplayNameMavicAir = DJIRCAbstraction.DisplayNameMavicAir
Package:dji.sdk.remotecontroller
Description:
The display name of Mavic Air's remote controller.
DisplayNameMavic2
final DisplayNameMavic2
static final String DisplayNameMavic2 = DJIRCAbstraction.DisplayNameMavic2
Package:dji.sdk.remotecontroller
Description:
The display name of Mavic 2's remote controller.
DisplayNameMavic2Enterprise
final DisplayNameMavic2Enterprise
static final String DisplayNameMavic2Enterprise = DJIRCAbstraction.DisplayNameMavic2Enterprise
Package:dji.sdk.remotecontroller
Description:
The display name of Mavic 2 Enterprise's remote controller.
DisplayNameDJISmartController
final DisplayNameDJISmartController
static final String DisplayNameDJISmartController = DJIRCAbstraction.DisplayNameDJISmartController
Package:dji.sdk.remotecontroller
Description:
The display name of DJI Smart Controller.
DisplayNameDJISmartControllerEnterpriseController
final DisplayNameDJISmartControllerEnterpriseController
static final String DisplayNameDJISmartControllerEnterpriseController = DJIRCAbstraction.DisplayNamePM430Controller
Package:dji.sdk.remotecontroller
Description:
The display name of DJI Smart Controller Enterprise.
DisplayNameMavicMini
final DisplayNameMavicMini
static final String DisplayNameMavicMini = DJIRCAbstraction.DisplayNameWM160
Package:dji.sdk.remotecontroller
Description:
The display name of Mavic Mini/DJI Mini SE's remote controller.
DisplayNameMavicAir2
final DisplayNameMavicAir2
static final String DisplayNameMavicAir2 = DJIRCAbstraction.DisplayNameWM231
Package:dji.sdk.remotecontroller
Description:
The display name of Mavic Air 2's remote controller.
DisplayNameDJIMini2
final DisplayNameDJIMini2
static final String DisplayNameDJIMini2 = DJIRCAbstraction.DisplayNameWM161
Package:dji.sdk.remotecontroller
Description:
The display name of DJI Mini 2's remote controller.
DisplayNameDJIAir2s
final DisplayNameDJIAir2s
static final String DisplayNameDJIAir2s = DJIRCAbstraction.DisplayNameWM232
Package:dji.sdk.remotecontroller
Description:
The display name of DJI Air 2S's remote controller.
Aggregation StateclassMultiDeviceAggregationState
State Updates
GeneralmethodsetHardwareStateCallback
method setHardwareStateCallback
void setHardwareStateCallback(@Nullable HardwareState.HardwareStateCallback hardwareStateCallback)
Package:dji.sdk.remotecontroller
Description:
Set the HardwareStateUpdateCallback
Input Parameters:
@Nullable HardwareState.HardwareStateCallback hardwareStateCallbackRCHardwareState.HardwareStateCallback callback.
methodsetChargeRemainingCallback
method setChargeRemainingCallback
void setChargeRemainingCallback(@Nullable BatteryState.Callback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the BatteryStateUpdateCallback.
Input Parameters:
@Nullable BatteryState.Callback callbackChargeRemaining.BatteryStateCallback callback.
methodsetGPSDataCallback
method setGPSDataCallback
void setGPSDataCallback(@Nullable GPSData.Callback callback)
Package:dji.sdk.remotecontroller
Description:
Set the GPSDataUpdateCallback.
Input Parameters:
@Nullable GPSData.Callback callbackGPSDataCallback callback.
methodsetProRCEventCallback
method setProRCEventCallback
void setProRCEventCallback(@Nullable ProfessionalRC.Callback callback)
Package:dji.sdk.remotecontroller
Description:
Set the ProRCEventCallback.
Input Parameters:
@Nullable ProfessionalRC.Callback callbackProfessionalRC callback.
methodsetMasterSlaveStateCallback
method setMasterSlaveStateCallback
void setMasterSlaveStateCallback(@Nullable MasterSlaveState.Callback callback)
Package:dji.sdk.remotecontroller
Description:
Callback that updates the remote controller's state related to the master and slave mode. Only supported by Inspire 2.
Input Parameters:
@Nullable MasterSlaveState.Callback callbackRCMasterSlaveStateUpdateCallback callback.
methodsetGimbalControlRequestFromSlaveCallback
method setGimbalControlRequestFromSlaveCallback
void setGimbalControlRequestFromSlaveCallback(@Nullable Information.ControlRequestCallback controlRequestCallback)
Package:dji.sdk.remotecontroller
Description:
Sets GimbalControlRequestFromSlaveReceivedCallback.
Input Parameters:
@Nullable Information.ControlRequestCallback controlRequestCallbackInformation.ControlRequestCallback callback.
methodsetFocusControllerStateCallback
method setFocusControllerStateCallback
void setFocusControllerStateCallback(@Nullable FocusControllerState.FocusControllerStateCallback focusStateUpdateCallback)
Package:dji.sdk.remotecontroller
Description:
Sets RCRemoteFocusStateUpdateCallback.
Input Parameters:
@Nullable FocusControllerState.FocusControllerStateCallback focusStateUpdateCallbackFocusControllerState.FocusControllerStateCallback callback.
Add CallbackmethodaddRTKChannelEnabledUpdatedCallback
method addRTKChannelEnabledUpdatedCallback
void addRTKChannelEnabledUpdatedCallback(@NonNull RTKChannelEnabledUpdatedCallback callback)
Package:dji.sdk.remotecontroller
Description:
Add the RTKChannelEnabledUpdatedCallback.
Input Parameters:
@NonNull RTKChannelEnabledUpdatedCallback callbackRTKChannelEnabledUpdatedCallback callback.
methodaddMultiDevicesPairingStateCallback
method addMultiDevicesPairingStateCallback
void addMultiDevicesPairingStateCallback(@Nullable MultiDeviceAggregationState.Callback multiDeviceAggregationStateCallback)
Package:dji.sdk.remotecontroller
Description:
Adds Callback.
Input Parameters:
@Nullable MultiDeviceAggregationState.Callback multiDeviceAggregationStateCallbackMultiDeviceAggregationState callback.
Remove CallbackmethodremoveRTKChannelEnabledUpdatedCallback
method removeRTKChannelEnabledUpdatedCallback
void removeRTKChannelEnabledUpdatedCallback(@NonNull RTKChannelEnabledUpdatedCallback callback)
Package:dji.sdk.remotecontroller
Description:
Remove the RTKChannelEnabledUpdatedCallback callback.
Input Parameters:
@NonNull RTKChannelEnabledUpdatedCallback callbackRTKChannelEnabledUpdatedCallback callback.
methodremoveMultiDevicesPairingStateCallback
method removeMultiDevicesPairingStateCallback
void removeMultiDevicesPairingStateCallback(@Nullable MultiDeviceAggregationState.Callback multiDeviceAggregationStateCallback)
Package:dji.sdk.remotecontroller
Description:
Removes Callback.
Input Parameters:
@Nullable MultiDeviceAggregationState.Callback multiDeviceAggregationStateCallbackMultiDeviceAggregationState callback.
Aircraft Pairing
Enter Pairing ModemethodstartPairing
method startPairing
void startPairing(@Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.START_PAIRING
Description:
Enters pairing mode, in which the Remote Controller starts pairing with the aircraft. This method is used when the Remote Controller no longer recognizes which aircraft it is paired with.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the execution result returned. See BaseComponent for more information about the callback and what is recommended be done with it.
Exit Pairing ModemethodstopPairing
method stopPairing
void stopPairing(@Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.STOP_PAIRING
Description:
Exits pairing mode.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the execution result returned. See BaseComponent for more information about the callback and what is recommended be done with it.
Pairing StatemethodgetPairingState
method getPairingState
void getPairingState(@NonNull CompletionCallbackWith<PairingState> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.PAIRING_STATE
Description:
Gets the pairing status as the Remote Controller is pairing with the aircraft.
Input Parameters:
@NonNull CompletionCallbackWith<PairingState> callbackThe execution callback with the value(s) returned.
Multi Device Pairing
Pairing SupportedmethodisMultiDevicePairingSupported
method isMultiDevicePairingSupported
boolean isMultiDevicePairingSupported()
Package:dji.sdk.remotecontroller
Description:
Determines if multi-device pairing supported by the remote controller. When the remote controller supports multi-device pairing, it can be paired to more than one device (e.g. aircraft, RTK base station) at the same time. When this feature is supported, use startMultiDevicePairing and stopMultiDevicePairing to start and stop pairing instead of using the following methods:  - startPairing  - stopPairing  - getPairingState. This feature is only supported by Phantom 4 RTK.
Return:
booleantrue if multi-device pairing is supported.
Start PairingmethodstartMultiDevicePairing
method startMultiDevicePairing
void startMultiDevicePairing(PairingDevice target, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Starts pairing a target with the specific type (aircraft or RTK base station). This paring method is for Phantom 4 RTK only. To use RTK feature with a base station, the Phantom 4 RTK remote controller need to pair both the base station and the aircraft at the same time.  CAUTION: pairing an RTK base station will unpair the paired aircraft. Therefore, to use the base station properly, the user needs to pair the base station first, and the aircraft after. It is only supported when isMultiDevicePairingSupported returns true.
Input Parameters:
PairingDevice targetThe device target to start multi-device pairing.@Nullable CompletionCallback callbackCompletion block.
Stop PairingmethodstopMultiDevicePairing
method stopMultiDevicePairing
void stopMultiDevicePairing(@Nullable CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Stops the multi-device pairing. It is used after the pairing is started and before the remote controller is paired to a device successfully. It is not necessary to call this method if the remote controller is paired to a device successfully. Only Supported by Phantom 4 RTK.
Input Parameters:
@Nullable CompletionCallback callbackCompletion block.
RTK Channel
Set EnabledmethodsetRTKChannelEnabled
method setRTKChannelEnabled
void setRTKChannelEnabled(boolean enabled, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Enables the RTK channel on the remote controller. When RTK air system is using the base station as the reference station, the remote controller should enable the RTK channel and reserve some bandwidth for data transmission between the base station and the air system.  CAUTION: toggling RTK channel will reset the airlink between the remote controller and the aircraft. The airlink may take 3 seconds to recover. DO NOT enable/disable the channel when the aircraft is flying. If the base station is reconnected, you need to call this interface to enabled the RTK channel again. Only Supported by Phantom 4 RTK.
Input Parameters:
boolean enabledtrue to enable the RTK channel on the remote controller.@Nullable final CommonCallbacks.CompletionCallback callbackCompletion block.
Customize RC
Flight Control Stick MappingmethodsetCustomAircraftMapping
method setCustomAircraftMapping
void setCustomAircraftMapping(@NonNull AircraftMapping mapping, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.AIRCRAFT_CUSTOM_MAPPING
Description:
Set the mapping of custom style. It will change the current mapping style to STYLE_CUSTOM. The setting will only take effect when the remote controller is in master mode.
Input Parameters:
@NonNull AircraftMapping mappingThe remote controller aircraft mapping.@Nullable CompletionCallback callbackThe execution callback with the value(s) returned.
methodgetCustomAircraftMapping
method getCustomAircraftMapping
void getCustomAircraftMapping(@NonNull CompletionCallbackWith<AircraftMapping> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.AIRCRAFT_CUSTOM_MAPPING
Description:
Retrieves the stick mapping associated with the custom style.
Input Parameters:
@NonNull CompletionCallbackWith<AircraftMapping> callbackThe execution callback with the value(s) returned.
methodsetAircraftMappingStyle
method setAircraftMappingStyle
void setAircraftMappingStyle(@NonNull AircraftMappingStyle style, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.AIRCRAFT_MAPPING_STYLE
Description:
Sets the Remote Controller's control mode.
Input Parameters:
@NonNull AircraftMappingStyle styleRemote controller control mode to be set.@Nullable CompletionCallback callbackThe execution callback with the execution result returned.
methodgetAircraftMappingStyle
method getAircraftMappingStyle
void getAircraftMappingStyle(@NonNull CompletionCallbackWith<AircraftMappingStyle> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.AIRCRAFT_MAPPING_STYLE
Description:
Gets the Remote Controller's control mode.
Input Parameters:
@NonNull CompletionCallbackWith<AircraftMappingStyle> callbackThe execution callback with the execution result returned.
Gimbal WheelmethodsetLeftDialGimbalControlAxis
method setLeftDialGimbalControlAxis
void setLeftDialGimbalControlAxis(@NonNull GimbalAxis axis,                                                     @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:LEFT_WHEEL_GIMBAL_CONTROL_AXIS
Description:
Sets which of the gimbal directions the top left dial (Gimbal Dial) on the Remote Controller will control. The three options (pitch, roll, and yaw) are outlined in the enum named GimbalAxis.
Input Parameters:
@NonNull GimbalAxis axisGimbal direction to be set that the top left dial on the Remote Controller will control.@Nullable CompletionCallback callbackRemote execution result error callback. See BaseComponent for more information about the callback and what is recommended be done with it.
methodgetLeftDialGimbalControlAxis
method getLeftDialGimbalControlAxis
void getLeftDialGimbalControlAxis(@NonNull CompletionCallbackWith<GimbalAxis> callback)
Package:dji.sdk.remotecontrollerSDK Key:LEFT_WHEEL_GIMBAL_CONTROL_AXIS
Description:
Gets which of the gimbal directions the top left wheel (Gimbal Dial) on the Remote Controller will control.
Input Parameters:
@NonNull CompletionCallbackWith<GimbalAxis> callbackThe execution callback with the value(s) returned.
methodsetLeftDialGimbalControlSpeedCoefficient
method setLeftDialGimbalControlSpeedCoefficient
void setLeftDialGimbalControlSpeedCoefficient(int coefficient,                                                                 @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets gimbal rotation speed of the top left wheel (Gimbal Dial) on the Remote Controller. The valid range is [0, 100].
Input Parameters:
int coefficientGimbal control speed coefficient to be set. Setting it to zero can disable the gimbal control by the top left wheel.@Nullable CompletionCallback callbackThe execution callback with the execution result returned.
methodgetLeftDialGimbalControlSpeedCoefficient
method getLeftDialGimbalControlSpeedCoefficient
void getLeftDialGimbalControlSpeedCoefficient(@NonNull CompletionCallbackWith<Integer> callback)
Package:dji.sdk.remotecontroller
Description:
Gets gimbal rotation speed of the top left wheel (Gimbal Dial) on the Remote Controller. The valid range is [0, 100].
Input Parameters:
@NonNull CompletionCallbackWith<Integer> callbackThe execution callback with the execution result returned.
Custom ButtonsmethodsetCustomButtonTags
method setCustomButtonTags
void setCustomButtonTags(@NonNull CustomButtonTags tags, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.CUSTOM_BUTTON_TAGS
Description:
Sets custom button tags, which can be used by the user to record user settings. Moreover, this method will make it easier for developers to set custom tags for buttons in the user interface, will make it easier to use the C1 and C2 buttons on the Remote Controller.
Input Parameters:
@NonNull CustomButtonTags tagsBack buttons' custom tags, the value should in the range of [0, 255].@Nullable CompletionCallback callbackRemote execution result error callback.
methodgetCustomButtonTags
method getCustomButtonTags
void getCustomButtonTags(@NonNull CompletionCallbackWith<CustomButtonTags> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.CUSTOM_BUTTON_TAGS
Description:
Gets the custom button's (Back Button's) tags.
Input Parameters:
@NonNull CompletionCallbackWith<CustomButtonTags> callbackThe execution callback with the value(s) returned.
Shutter ButtonmethodsetShutterButtonBindingEnabled
method setShutterButtonBindingEnabled
void setShutterButtonBindingEnabled(boolean enabled, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Enables invoking shooting photo interface when the shutter button is pressed. Mavic 2 series remote controller's shutter button will not work physically when connecting to Mobile SDK. This setting will be stored in software application localized storage paired with the RC SN key, which means, if the application is killed, it will be set to enabled by default when the application is relaunched. It is only supported by Mavic 2 series.
Input Parameters:
boolean enabledtrue to enable invoking shooting photo interface when the shutter button is pressed.final CompletionCallback callbackThe execution callback with the value(s) returned.
methodgetShutterButtonBindingEnabled
method getShutterButtonBindingEnabled
void getShutterButtonBindingEnabled(final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.remotecontroller
Description:
Gets if shooting photo interface is involved when the shutter button is pressed. It is only supported by Mavic 2 series.
Input Parameters:
final CompletionCallbackWith<Boolean> callbackThe execution callback with the value(s) returned.
methodsetRecordButtonBindingEnabled
method setRecordButtonBindingEnabled
void setRecordButtonBindingEnabled(boolean enabled, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Enables invoking video record interface when the record button is pressed. Mavic 2 series remote controller's record button will not work physically when connecting to Mobile SDK. This setting will be stored in software application localized storage paired with the RC SN key. Only supported by Mavic 2 series.
Input Parameters:
boolean enabledtrue to enable invoking video record interface when the record button is pressed.final CompletionCallback callbackThe execution callback with the value(s) returned.
methodgetRecordButtonBindingEnabled
method getRecordButtonBindingEnabled
void getRecordButtonBindingEnabled(final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.remotecontroller
Description:
Gets if video record interface is involved when the record button is pressed. It is only supported by Mavic 2 series.
Input Parameters:
final CompletionCallbackWith<Boolean> callbackThe execution callback with the value(s) returned.
Photo and Video Toggle ButtonmethodsetPhotoAndVideoToggleButtonBindingEnabled
method setPhotoAndVideoToggleButtonBindingEnabled
void setPhotoAndVideoToggleButtonBindingEnabled(boolean enabled, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
true to switch camera flat mode between photo and video when the getPhotoAndVideoToggleButton button is pressed. false when getPhotoAndVideoToggleButton button is pressed, we will not bind any event. You can monitor the button and handle custom events by yourself. This setting will be stored in software application localized storage paired with the RC SN key, which means. Only supported by Mavic Air 2, DJI Air 2S.
Input Parameters:
boolean enabledtrue to switch camera flat mode between photo and video when the getPhotoAndVideoToggleButton button is pressed.final CompletionCallback callbackThe execution callback with the value(s) returned.
methodgetPhotoAndVideoToggleButtonBindingEnabled
method getPhotoAndVideoToggleButtonBindingEnabled
void getPhotoAndVideoToggleButtonBindingEnabled(final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.remotecontroller
Description:
Gets whether switching camera flat mode between photo and video is enabled when the getPhotoAndVideoToggleButton button is pressed. It is only supported by Mavic Air 2.
Input Parameters:
final CompletionCallbackWith<Boolean> callbackThe execution callback with the value(s) returned.
Shoot Photo And Record ButtonmethodsetShootPhotoAndRecordButtonBindingEnabled
method setShootPhotoAndRecordButtonBindingEnabled
void setShootPhotoAndRecordButtonBindingEnabled(boolean enabled, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
true to enable invoking shoot photo or record interface when the record button is pressed depend on the getPhotoAndVideoToggleButton button state. false when getPhotoAndVideoToggleButton button is pressed, we will not bind any event. You can monitor the button and handle custom events by yourself. This setting will be stored in software application localized storage paired with the RC SN key. Only supported by Mavic AIr 2, DJI Air 2S.
Input Parameters:
boolean enabledtrue to enable invoking shoot photo or record interface when the record button is pressed depend on the getPhotoAndVideoToggleButton button state.final CompletionCallback callbackThe execution callback with the value(s) returned.
methodgetShootPhotoAndRecordButtonBindingEnabled
method getShootPhotoAndRecordButtonBindingEnabled
void getShootPhotoAndRecordButtonBindingEnabled(final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.remotecontroller
Description:
Gets if shoot photo or video record interface is involved when the getPhotoAndVideoToggleButton button is pressed. It is only supported by Mavic Air 2, DJI Air 2S.
Input Parameters:
final CompletionCallbackWith<Boolean> callbackThe execution callback with the value(s) returned.
Mobile Device Charging
Charge Mobile ModemethodsetChargeMobileMode
method setChargeMobileMode
void setChargeMobileMode(@NonNull ChargeMobileMode mode, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the charge mode of a connected iOS device.  Note: Android devices are always charging when connected to the remote controller. It is only supported by Inspire 2, M200 series, Cendence and Mavic 2 series.
Input Parameters:
@NonNull ChargeMobileMode modeCharge Mobile mode.@Nullable CompletionCallback callbackThe execution callback with the execution result returned.
methodgetChargeMobileMode
method getChargeMobileMode
void getChargeMobileMode(@NonNull CompletionCallbackWith<ChargeMobileMode> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.CHARGE_MOBILE_MODE
Description:
Gets the mode to charge the connected iOS device. Note that Android devices are always charging when connected to the remote controller. It is only supported by Inspire 2, M200 series, Cendence, and Mavic 2 series.
Input Parameters:
@NonNull CompletionCallbackWith<ChargeMobileMode> callbackThe execution callback with the value(s) returned.
Master/Slave RC
SupportmethodisMasterSlaveModeSupported
method isMasterSlaveModeSupported
boolean isMasterSlaveModeSupported()
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.IS_MASTER_SLAVE_MODE_SUPPORTED
Description:
Query method to check if the Remote Controller supports master/slave mode. Master-slave mode is supported by the Inspire 1, Inspire 1 Pro, Matrice 100, Lightbridge 2 (including Matrice 600, Matrice 600 Pro, A3 and N3) and Inspire 2. Inspire 2 is using a new set of interfaces to control the master and slave connection.  - Similar to other products, Inspire 2's remote controller also use set/get RCMode to change the mode. - A slave remote controller can use getMasters and connectToMaster to join a master remote controller. - A master remote controller can use setMasterAuthorizationCode to change the authentication code.
Return:
booleanA boolean value.
Mode SelectionmethodsetMode
method setMode
void setMode(@NonNull RCMode mode, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.MODE
Description:
Sets the Remote Controller's mode. See the RCMode enum for all possible Remote Controller modes. The master and slave modes are only supported for the Inspire 1, Inspire 1 Pro, M100, Lightbridge 2 (including Matrice 600, Matrice 600 Pro, A3 and N3) and Inspire 2. It's not supported by Matrice 300 RTK.
Input Parameters:
@NonNull RCMode modeMode of type RCMode to be set for the Remote Controller.@Nullable CompletionCallback callbackThe execution callback with the returned execution result.
methodgetMode
method getMode
void getMode(@NonNull CompletionCallbackWith<RCMode> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.MODE
Description:
Gets the Remote Controller's work mode. It is supported by the Inspire 1, Inspire 1 Pro, Matrice 100, Lightbridge 2 (including Matrice 600, Matrice 600 Pro, A3 and N3) and Inspire 2.
Input Parameters:
@NonNull CompletionCallbackWith<RCMode> callbackThe execution callback with the value(s) returned.
IdentifiermethodsetName
method setName
void setName(@NonNull String name, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.NAME
Description:
Sets the Remote Controller's name.
Input Parameters:
@NonNull String nameRemote controller name to be set. Six characters at most.@Nullable CompletionCallback callbackThe execution callback with the execution result returned.
methodgetName
method getName
void getName(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.NAME
Description:
Gets the Remote Controller's name.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value(s) returned.
methodsetPassword
method setPassword
void setPassword(@NonNull String password, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.PASSWORD
Description:
Sets the Remote Controller's password.
Input Parameters:
@NonNull String passwordRemote controller password to be set, using a string consisted by 4 digits.@Nullable CompletionCallback callbackThe execution callback with the value(s) returned. See BaseComponent for more information about the callback and what is recommended to be done with it.
methodgetPassword
method getPassword
void getPassword(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.PASSWORD
Description:
Gets the Remote Controller's password.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value(s) returned.
Connection - MastermethodgetSlaveList
method getSlaveList
void getSlaveList(@NonNull CompletionCallbackWith<Information[]> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.SLAVE_LIST
Description:
Used by the current master Remote Controller to get all the slaves connected to it.
Input Parameters:
@NonNull CompletionCallbackWith<Information[]> callbackThe execution callback with the returned value(s).
Connection - SlavemethodstartMasterSearching
method startMasterSearching
void startMasterSearching(@NonNull MasterSearchingCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.START_SEARCH_MASTER
Description:
Starts a search by slave Remote Controller for nearby master Remote Controllers. To get the list of master Remote Controllers, first call getAvailableMasters, then call stopMasterSearching to end the search.
Input Parameters:
@NonNull MasterSearchingCallback callbackRemote execution result error callback. Please refer to BaseComponent for more information about the callback and what is recommended be done with it.
methodstopMasterSearching
method stopMasterSearching
void stopMasterSearching(@Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.STOP_MASTER_SEARCHING
Description:
Used by a slave Remote Controller to stop the search for nearby master Remote Controllers.
Input Parameters:
@Nullable CompletionCallback callbackRemote execution result error callback. Please refer to BaseComponent for more information about the callback and what is recommended be done with it.
methodgetAvailableMasters
method getAvailableMasters
void getAvailableMasters(@NonNull CompletionCallbackWith<Information[]> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.AVAILABLE_MASTERS
Description:
Starts search by slave Remote Controller for nearby master Remote Controllers. To get the list of master Remote Controllers use getAvailableMastersWithCallbackBlock then call stopMasterRCSearch to end th search.
Input Parameters:
@NonNull CompletionCallbackWith<Information[]> callbackThe execution callback with the value(s) returned. The array of masters contains objects of type Information.
methodgetMasterSearchingState
method getMasterSearchingState
void getMasterSearchingState(@NonNull CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.MASTER_SEARCHING_STATE
Description:
Returns the state of the master Remote Controller search. The search is initiated by the Mobile Device, but performed by the Remote Controller. Therefore, if the Mobile Device's application crashes while a search is ongoing, this method can be used to let the new instance of the application understand the Remote Controller state.
Input Parameters:
@NonNull CompletionCallbackWith<Boolean> callbackThe execution callback with the value(s) returned.
methodconnectToMaster
method connectToMaster
void connectToMaster(@NonNull Credentials credentials,                                        @Nullable                                            CompletionCallbackWith<ConnectToMasterResult> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.CONNECT_TO_MASTER
Description:
Used by a slave Remote Controller to request to join a master Remote Controller and be able to control the gimbal. If the master Remote Controller accepts the request, the master Remote Controller will control the aircraft and the slave Remote Controller will control the gimbal.
Input Parameters:
@NonNull Credentials credentialsInclude master's name and master's password.@Nullable                                              CompletionCallbackWith<ConnectToMasterResult> callbackThe execution callback with the value(s) returned.
methodgetConnectedMasterCredentials
method getConnectedMasterCredentials
void getConnectedMasterCredentials(@NonNull CompletionCallbackWith<Credentials> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.CONNECTED_MASTER_CREDENTIALS
Description:
Returns the master Remote Controller's information, which includes the unique identifier, name, and password.
Input Parameters:
@NonNull CompletionCallbackWith<Credentials> callbackThe execution callback with the value(s) returned.
Inspire 2 Connection - MastermethodsetMasterAuthorizationCode
method setMasterAuthorizationCode
void setMasterAuthorizationCode(@NonNull String authorizationCode, @Nullable       CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.SET_MASTER_AUTH_CODE
Description:
Sets the authorization code of a master remote controller. The slave remote controller needs to know the authorization code in order to join the master. A valid input is a string with 6 digits. The default value is "888888". It can only be called when the remote controller is in master mode.
Input Parameters:
@NonNull String authorizationCodeAuthorization code to set.@Nullable         CompletionCallback callbackThe execution callback with the value(s) returned.
Inspire 2 Connection - SlavemethodgetMasters
method getMasters
void getMasters(@NonNull CompletionCallbackWith<String[]> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.MASTER_LIST
Description:
Gets a list of the nearby remote controllers in master mode. It can only be called when the remote controller is in slave mode.
Input Parameters:
@NonNull CompletionCallbackWith<String[]> callbackThe execution callback with the returned value(s).
methodconnectToMaster
method connectToMaster
void connectToMaster(@NonNull AuthorizationInfo info, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.CONNECT_TO_MASTER_WITH_ID
Description:
Joins the master remote controller with the specific ID. If the remote controller has joined the same master before, the authorization code is not required until the master remote controller changes its authorization code. In this case, code can be null. It can only be called when the remote controller is in slave mode.
Input Parameters:
@NonNull AuthorizationInfo infoJoinMasterData object.@Nullable CompletionCallback callbackThe execution callback with the returned value(s).
Request Gimbal ControlmethodrequestGimbalControl
method requestGimbalControl
void requestGimbalControl(@Nullable CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Requests the gimbal control from the other remote controller. Different from requestLegacyGimbalControl, the gimbal control permission is transferred to the remote controller without the reply from the master remote controller. The master remote controller can attain the gimbal control back by calling the same method. It is only supported by Inspire 2, M200 series and Cendence.
Input Parameters:
@Nullable CompletionCallback callbackThe execution callback with the value(s) returned.
Gimbal Control - MastermethodrespondToRequestForGimbalControl
method respondToRequestForGimbalControl
void respondToRequestForGimbalControl(ResponseForGimbalControl response)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.RESPONSE_TO_REQUEST_FOR_GIMBAL_CONTROL
Description:
When a slave Remote Controller requests a master Remote Controller to control the gimbal, this method is used by a master Remote Controller to respond to the slave Remote Controller's request.
Input Parameters:
ResponseForGimbalControl responseThe response object of ResponseForGimbalControl to the slave Remote Controller.
Gimbal Control - SlavemethodrequestLegacyGimbalControl
method requestLegacyGimbalControl
void requestLegacyGimbalControl(@NonNull CompletionCallbackWith<RequestGimbalControlResult> callback)
Package:dji.sdk.remotecontroller
Description:
Called by the slave Remote Controller to request gimbal control from the master Remote Controller. It is only supported by Inspire 1 and DJI Lightbridge 2.
Input Parameters:
@NonNull CompletionCallbackWith<RequestGimbalControlResult> callbackThe execution callback with the value(s) returned.
methodsetGimbalMappingStyle
method setGimbalMappingStyle
void setGimbalMappingStyle(@NonNull GimbalMappingStyle style, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.GIMBAL_MAPPING_STYLE
Description:
Sets the Remote Controller's slave control mode.
Input Parameters:
@NonNull GimbalMappingStyle styleControl mode to be set.@Nullable CompletionCallback callbackRemote execution result error callback.
methodgetGimbalMappingStyle
method getGimbalMappingStyle
void getGimbalMappingStyle(@NonNull CompletionCallbackWith<GimbalMappingStyle> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.GIMBAL_MAPPING_STYLE
Description:
Gets the Remote Controller's slave control mode.
Input Parameters:
@NonNull CompletionCallbackWith<GimbalMappingStyle> callbackThe execution callback with the value(s) returned.
methodsetGimbalControlSpeedCoefficient
method setGimbalControlSpeedCoefficient
void setGimbalControlSpeedCoefficient(@NonNull GimbalControlSpeedCoefficient speedCoefficient,                                                         @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.GIMBAL_CONTROL_SPEED_COEFFICIENT
Description:
Called by the slave Remote Controller to set the gimbal's pitch, roll, and yaw speed with a range of [0, 100].
Input Parameters:
@NonNull GimbalControlSpeedCoefficient speedCoefficientSpeed to be set for gimbal's pitch, roll, and yaw, which should be in the range of [0, 100].@Nullable CompletionCallback callbackRemote execution result error callback. See BaseComponent for more information about the callback and what is recommended be done with it.
methodgetGimbalControlSpeedCoefficient
method getGimbalControlSpeedCoefficient
void getGimbalControlSpeedCoefficient(@NonNull CompletionCallbackWith<GimbalControlSpeedCoefficient> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.GIMBAL_CONTROL_SPEED_COEFFICIENT
Description:
Gets the current slave's gimbal's pitch, roll, and yaw speed with a range of [0, 100].
Input Parameters:
@NonNull CompletionCallbackWith<GimbalControlSpeedCoefficient> callbackThe execution callback with the value(s) returned.
Custom Gimbal MappingmethodsetCustomGimbalMapping
method setCustomGimbalMapping
void setCustomGimbalMapping(@NonNull GimbalMapping mapping, @Nullable CompletionCallback callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.CUSTOM_GIMBAL_MAPPING
Description:
Sets the Remote Controller's slave control mode.
Input Parameters:
@NonNull GimbalMapping mappingThe DJIRCGimbalMapping object.@Nullable CompletionCallback callbackThe execution callback with the value(s) returned.
methodgetCustomGimbalMapping
method getCustomGimbalMapping
void getCustomGimbalMapping(@NonNull CompletionCallbackWith<GimbalMapping> callback)
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.CUSTOM_GIMBAL_MAPPING
Description:
Gets the Remote Controller's slave control mode.
Input Parameters:
@NonNull CompletionCallbackWith<GimbalMapping> callbackThe execution callback with the value(s) returned.
Cendence Custom Buttons
Check SupportmethodisCustomizableButtonSupported
method isCustomizableButtonSupported
boolean isCustomizableButtonSupported()
Package:dji.sdk.remotecontroller
Description:
true if the remote controller supports customizable buttons. With the customizable buttons, the user can define the action bound to a button. When the button is clicked, the corresponding action can be received from the .
Only Cendence supports customizable buttons. This is distinct from remote
controllers with buttons C1 and C2 that support custom tags and a binding to DJI Go.
Return:
booleanTRUE to support customizable button.
Button Profile GroupmethodgetButtonProfileGroups
method getButtonProfileGroups
void getButtonProfileGroups(final CommonCallbacks.CompletionCallbackWith<String[]> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the names of the customizable button profile groups. The configurations of the customizable buttons are organized as groups. The maximum number of groups is 5 and each group contains 3 profiles. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
final CommonCallbacks.CompletionCallbackWith<String[]> callbackThe execution callback with the execution result returned.
methodaddButtonProfileGroup
method addButtonProfileGroup
void addButtonProfileGroup(String groupName, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Adds a group of customizable button profiles. Three default profiles will be created for the newly added group. The default profile can accessed through getButtonActions. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
String groupNameThe name of the group to be added.@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the execution result returned.
methodremoveButtonProfileGroup
method removeButtonProfileGroup
void removeButtonProfileGroup(String groupName, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Removes a group from the customizable button profiles. There must be at least one group, therefore, the removal of the last group will fail. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
String groupNameThe name of the group to be removed.@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the execution result returned.
methodrenameButtonProfileGroup
method renameButtonProfileGroup
void renameButtonProfileGroup(String oldProfileName,                                        String newProfileName,                                        @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Renames a profile group to a new name. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
String oldProfileNameThe name of the group to be renamed.String newProfileNameThe new profile group name.@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the execution result returned.
methodselectButtonProfileGroup
method selectButtonProfileGroup
void selectButtonProfileGroup(String groupName, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Selects the customizable button profile group. The profile with 0 configIndex in the group will be applied. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
String groupNameThe name of the group to select.@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the execution result returned.
methodgetSelectedButtonProfileGroup
method getSelectedButtonProfileGroup
void getSelectedButtonProfileGroup(final CommonCallbacks.CompletionCallbackWith<String> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the name of the selected customizable button profile group. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
final CommonCallbacks.CompletionCallbackWith<String> callbackThe execution callback with the execution result returned.
Button ProfilemethodselectButtonProfile
method selectButtonProfile
void selectButtonProfile(int profileIndex, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Selects the customizable button profile with the specific index in the selected profile group. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
int profileIndexThe index of the profile to select. The valid range is [0, 2].@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the execution result returned.
methodgetSelectedButtonProfile
method getSelectedButtonProfile
void getSelectedButtonProfile(final CommonCallbacks.CompletionCallbackWith<Integer> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the index of the selected button profile in the selected group. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
final CommonCallbacks.CompletionCallbackWith<Integer> callbackThe execution callback with the execution result returned.
Button ConfigmethodsetButtonConfig
method setButtonConfig
void setButtonConfig(ProfessionalRC.ButtonConfiguration config, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Customizes the button configuration. The configuration will be applied to the remote controller immediately and will be stored into the selected profile of the selected profile group. It is only valid when isCustomizableButtonSupported returns true. Supported by the Cendence remote controller.
Input Parameters:
ProfessionalRC.ButtonConfiguration configThe configuration to be set.@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the execution result returned.
methodgetButtonConfig
method getButtonConfig
void getButtonConfig(final CommonCallbacks.CompletionCallbackWith<ProfessionalRC.ButtonConfiguration> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the button configuration being applied to the remote controller. It is only valid when isCustomizableButtonSupported returns true. Supported by the Cendence remote controller.
Input Parameters:
final CommonCallbacks.CompletionCallbackWith<ProfessionalRC.ButtonConfiguration> callbackThe execution callback with the execution result returned.
methodresetButtonConfig
method resetButtonConfig
void resetButtonConfig(@Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Resets the selected button configuration to the default settings. The default configuration will be applied to the remote controller and will be stored into the selected index of the activated user. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the execution result returned.
Customize ButtonmethodcustomizeButton
method customizeButton
void customizeButton(ProfessionalRC.CustomizableButton button, ProfessionalRC.ButtonAction action, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Customizes the action of a button. The new setting will be applied to the remote controller and will be stored into the selected profile index of the selected profile group. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
ProfessionalRC.CustomizableButton buttonThe customizable button.ProfessionalRC.ButtonAction actionThe action to be bound to the button.@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the execution result returned.
methodfetchCustomizedActionOfButton
method fetchCustomizedActionOfButton
void fetchCustomizedActionOfButton(ProfessionalRC.CustomizableButton button, @Nullable final CommonCallbacks.CompletionCallbackWith<ProfessionalRC.ButtonAction> callback)
Package:dji.sdk.remotecontroller
Description:
Fetches the customized action of a button in the selected configuration. It is only valid when isCustomizableButtonSupported returns true.
Input Parameters:
ProfessionalRC.CustomizableButton buttonThe customizable button.@Nullable final CommonCallbacks.CompletionCallbackWith<ProfessionalRC.ButtonAction> callbackThe execution callback with the execution result returned.
RC Commands
Controlling GimbalmethodsetControllingGimbalIndex
method setControllingGimbalIndex
void setControllingGimbalIndex(int index, @Nullable final CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Directs commands of the physical buttons on the remote controller (rotating gimbal, shoot photo, record video, etc.) to the specific gimbal, when there are multiple gimbals connected. If there is only one gimbal connected, this setting is reset to the remaining gimbal. Enabling setAttitudeSynchronizationEnabled will reset this setting to index 0 and when setAttitudeSynchronizationEnabled is enabled, index can only be set to 0. It is only supported by M210, M210 RTK and Matrice 300 RTK.
Input Parameters:
int indexIndex of the gimbal to receive the remote controller commands.@Nullable final CommonCallbacks.CompletionCallback callbackThe execution callback with the execution result returned.
methodgetControllingGimbalIndex
method getControllingGimbalIndex
void getControllingGimbalIndex(final CommonCallbacks.CompletionCallbackWith<Integer> callback)
Package:dji.sdk.remotecontroller
Description:
The index of the gimbal that the remote controller is controlling. Commands of the physical buttons (rotating gimbal, shoot photo, record video, etc.) will be directed to the specific gimbal. If there is only one gimbal connected, this setting is reset to the remaining gimbal's index. Enabling setAttitudeSynchronizationEnabled will reset the value to 0. For product that supports only one gimbal, the value is always 0.
Input Parameters:
final CommonCallbacks.CompletionCallbackWith<Integer> callbackThe execution callback with the execution result returned.
Secondary Video
Check SupportedmethodisSecondaryVideoOutputSupported
method isSecondaryVideoOutputSupported
boolean isSecondaryVideoOutputSupported()
Package:dji.sdk.remotecontroller
Description:
Return whether secondary video output supported. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Return:
booleanA boolean value.
Set EnablemethodsetSecondaryVideoOutputEnabled
method setSecondaryVideoOutputEnabled
void setSecondaryVideoOutputEnabled(boolean enabled, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Enable secondary video output on Remote Controller. The remote controller outputs video to the Mobile Device by default. This will enable a secondary video stream to one of the Remote Controller's physical HDMI and SDI ports. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
boolean enabledEnables secondary video output.final CompletionCallback callbackThe execution callback with the execution result returned.
Get EnablemethodgetSecondaryVideoOutputEnabled
method getSecondaryVideoOutputEnabled
void getSecondaryVideoOutputEnabled(final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.remotecontroller
Description:
Gets whether secondary video output on Remote Controller is enabled. The Remote Controller outputs video to the Mobile Device by default, but a secondary video can be routed to its HDMI or SDI port. Use setSecondaryVideoOutputEnabled to enable or disable,  and setSecondaryVideoOutputPort to choose the port. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<Boolean> callbackThe execution callback with the value(s) returned.
Set Output PortmethodsetSecondaryVideoOutputPort
method setSecondaryVideoOutputPort
void setSecondaryVideoOutputPort(SecondaryVideoOutputPort port, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets secondary video output port on Remote Controller. HDMI or SDI are possible. Only one port can be active at once. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
SecondaryVideoOutputPort portSecondary video output port.final CompletionCallback callbackThe execution callback with the execution result returned.
Get Output PortmethodgetSecondaryVideoOutputPort
method getSecondaryVideoOutputPort
void getSecondaryVideoOutputPort(final CompletionCallbackWith<SecondaryVideoOutputPort> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the secondary video output port on Remote Controller. HDMI or SDI are possible. Only one port can be active at once. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<SecondaryVideoOutputPort> callbackThe execution callback with the value(s) returned.
Set Display ModemethodsetSecondaryVideoDisplay
method setSecondaryVideoDisplay
void setSecondaryVideoDisplay(SecondaryVideoDisplayMode mode, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the secondary video output Picture in Picture (PIP) display mode. The remote controller module can connect to both an FPV camera (through the HDMI and AV ports) and a camera mounted on the HD Gimbal (through the Gimbal port). The output video can then be a combination of the two video sources. Either a single video source can be  displayed, or one can be displayed within the other (as a Picture in Picture, or PIP). If the mode is set incorrectly,  then no output video will be displayed. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
SecondaryVideoDisplayMode modePicture in Picture (PIP) display mode.final CompletionCallback callbackThe execution callback with the execution result returned.
Get Display ModemethodgetSecondaryVideoDisplay
method getSecondaryVideoDisplay
void getSecondaryVideoDisplay(final CompletionCallbackWith<SecondaryVideoDisplayMode> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the secondary video output Picture in Picture (PIP) display mode. The air link module can connect to both an  FPV camera (through the HDMI and AV ports) and a camera mounted on the HD Gimbal (through the Gimbal port). The  output video can then be a combination of the two video sources. Either a single video source can be displayed, or  one can be displayed within the other (as a Picture in Picture, or PIP). It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<SecondaryVideoDisplayMode> callbackThe execution callback with the value(s) returned.
Set OSDK EnabledmethodsetSecondaryVideoOSDEnabled
method setSecondaryVideoOSDEnabled
void setSecondaryVideoOSDEnabled(boolean enabled, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Enables and disables On Screen Display (OSD) overlay on the secondary video. OSD is flight data like altitude, attitude etc. And can be overlayed on the PIP video. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
boolean enabledDetermines whether to display OSD on screen.final CompletionCallback callbackThe execution callback with the execution result returned.
Get OSD EnabledmethodgetSecondaryVideoOSDEnabled
method getSecondaryVideoOSDEnabled
void getSecondaryVideoOSDEnabled(final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.remotecontroller
Description:
Determines whether On Screen Display (OSD) is overlayed on the video feed.
Input Parameters:
final CompletionCallbackWith<Boolean> callbackThe execution callback with the value(s) returned.
Set OSD Top MarginmethodsetSecondaryVideoOSDTopMargin
method setSecondaryVideoOSDTopMargin
void setSecondaryVideoOSDTopMargin(int margin, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the OSD top margin in video pixels. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
int marginTop margin of OSD. The range is [0, 50].final CompletionCallback callbackThe execution callback with the execution result returned.
Get OSD Top MarginmethodgetSecondaryVideoOSDTopMargin
method getSecondaryVideoOSDTopMargin
void getSecondaryVideoOSDTopMargin(final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the OSD top margin in video pixels. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<Integer> callbackThe execution callback with the value(s) returned.
Set OSD Left MarginmethodsetSecondaryVideoOSDLeftMargin
method setSecondaryVideoOSDLeftMargin
void setSecondaryVideoOSDLeftMargin(int margin, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the OSD left margin in video pixels. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
int marginLeft margin of OSD. The range is [0, 50].final CompletionCallback callbackThe execution callback with the execution result returned.
Get OSD Left MarginmethodgetSecondaryVideoOSDLeftMargin
method getSecondaryVideoOSDLeftMargin
void getSecondaryVideoOSDLeftMargin(final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the OSD left margin in video pixels. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<Integer> callbackThe execution callback with the value(s) returned.
Set OSD Bottom MarginmethodsetSecondaryVideoOSDBottomMargin
method setSecondaryVideoOSDBottomMargin
void setSecondaryVideoOSDBottomMargin(int margin, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the OSD bottom margin in video pixels. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
int marginBottom margin of OSD. The range is [0, 50].final CompletionCallback callbackThe execution callback with the execution result returned.
get OSD Bottom MarginmethodgetSecondaryVideoOSDBottomMargin
method getSecondaryVideoOSDBottomMargin
void getSecondaryVideoOSDBottomMargin(final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the OSD bottom margin in video pixels. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<Integer> callbackThe execution callback with the value(s) returned.
Set OSD Right MarginmethodsetSecondaryVideoOSDRightMargin
method setSecondaryVideoOSDRightMargin
void setSecondaryVideoOSDRightMargin(int margin, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the OSD right margin in video pixels. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
int marginRight margin of OSD. The range is [0, 50].final CompletionCallback callbackThe execution callback with the execution result returned.
Get OSD Right MarginmethodgetSecondaryVideoOSDRightMargin
method getSecondaryVideoOSDRightMargin
void getSecondaryVideoOSDRightMargin(final CompletionCallbackWith<Integer> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the OSD right margin in video pixels. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<Integer> callbackThe execution callback with the value(s) returned.
Set OSD UnitmethodsetSecondaryVideoOSDUnit
method setSecondaryVideoOSDUnit
void setSecondaryVideoOSDUnit(SecondaryVideoOSDUnit unit, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the OSD units to either metric or imperial. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
SecondaryVideoOSDUnit unitOSD units.final CompletionCallback callbackThe execution callback with the execution result returned.
Get OSD UnitmethodgetSecondaryVideoOSDUnit
method getSecondaryVideoOSDUnit
void getSecondaryVideoOSDUnit(final CompletionCallbackWith<SecondaryVideoOSDUnit> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the OSD units (metric or imperial). It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<SecondaryVideoOSDUnit> callbackThe execution callback with the value(s) returned.
Set Output Format for HDMImethodsetSecondaryVideoOutputFormatForHDMI
method setSecondaryVideoOutputFormatForHDMI
void setSecondaryVideoOutputFormatForHDMI(SecondaryVideoFormat format, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the Remote Controller HDMI video port output video format. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
SecondaryVideoFormat formatThe value of the SecondaryVideoFormat Enum.final CompletionCallback callbackThe execution callback with the execution result returned.
Get Output Format for HDMImethodgetSecondaryVideoOutputFormatForHDMI
method getSecondaryVideoOutputFormatForHDMI
void getSecondaryVideoOutputFormatForHDMI(final CompletionCallbackWith<SecondaryVideoFormat> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the Remote Controller HDMI video port output video format. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<SecondaryVideoFormat> callbackThe execution callback with the execution result returned.
Set Output Format For SDImethodsetSecondaryVideoOutputFormatForSDI
method setSecondaryVideoOutputFormatForSDI
void setSecondaryVideoOutputFormatForSDI(SecondaryVideoFormat format, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the Remote Controller SDI video port output video format. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
SecondaryVideoFormat formatThe value of the SecondaryVideoFormat Enum.final CompletionCallback callbackThe execution callback with the execution result returned.
Get Output Format For SDImethodgetSecondaryVideoOutputFormatForSDI
method getSecondaryVideoOutputFormatForSDI
void getSecondaryVideoOutputFormatForSDI(final CompletionCallbackWith<SecondaryVideoFormat> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the Remote Controller SDI video port output video format. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<SecondaryVideoFormat> callbackThe execution callback with the execution result returned.
Set PIP PositionmethodsetSecondaryVideoPIPPosition
method setSecondaryVideoPIPPosition
void setSecondaryVideoPIPPosition(PIPPosition position, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Sets the PIP (Picture In Picture) position relative to the top left corner of the main subject video feed. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
PIPPosition positionPosition of the PIP on the screen.final CompletionCallback callbackThe execution callback with the execution result returned.
Get PIP PositionmethodgetSecondaryVideoPIPPosition
method getSecondaryVideoPIPPosition
void getSecondaryVideoPIPPosition(final CompletionCallbackWith<PIPPosition> callback)
Package:dji.sdk.remotecontroller
Description:
Gets the PIP (Picture In Picture) position relative to the top left corner of the main subject video feed. It is supported by Phantom 4 Professional, Matrice 200, Matrice 200 series V2, Inspire 1 and Inspire 2.
Input Parameters:
final CompletionCallbackWith<PIPPosition> callbackThe execution callback with the value(s) returned.
Live View
Simultaneous Output EnabledmethodsetLiveViewSimultaneousOutputEnabled
method setLiveViewSimultaneousOutputEnabled
void setLiveViewSimultaneousOutputEnabled(boolean enabled, final CompletionCallback callback)
Package:dji.sdk.remotecontroller
Description:
Enables the setting to output video to both the mobile device and the HDMI port on the remote controller simultaneously. When it is disabled and the remote controller is connected to a HDMI display, the mobile device will not receive the live view. It is only supported by Inspire 1 and M100.
Input Parameters:
boolean enabledtrue to enable live view simultaneous output.final CompletionCallback callbackThe execution callback with the value(s) returned.
methodgetLiveViewSimultaneousOutputEnabled
method getLiveViewSimultaneousOutputEnabled
void getLiveViewSimultaneousOutputEnabled(final CompletionCallbackWith<Boolean> callback)
Package:dji.sdk.remotecontroller
Description:
Determines whether the setting to output video to both the mobile device and the HDMI port on the remote controller simultaneously is enabled or not. When it is disabled and the remote controller is connected to a HDMI display, the mobile device will not receive the live view. It is only supported by Inspire 1 and M100.
Input Parameters:
final CompletionCallbackWith<Boolean> callbackThe execution callback with the value(s) returned.
Focus
Check Remote Focus SupportmethodisFocusControllerSupported
method isFocusControllerSupported
boolean isFocusControllerSupported()
Package:dji.sdk.remotecontrollerSDK Key:RemoteControllerKey.IS_FOCUS_CONTROLLER_SUPPORTED
Description:
Query method to check if the Remote Controller supports Remote Focus State Checking.
Return:
booleanA boolean value.
Inherited Methods:
dji.sdk.base.BaseComponentmethodsetComponentListener
method setComponentListener
void setComponentListener(ComponentListener listener)
Package:dji.sdk.base
Description:
Sets the listener for the DJI component.
Input Parameters:
ComponentListener listenerThe callback of ComponentListener.
methodgetIndex
method getIndex
int getIndex()
Package:dji.sdk.base
Description:
Returns the component index. Index is zero based. A component will have an index greater than zero when there  are multiple components of the same type on the DJI product, and one of the components already has the index 0.  For instance, M210 can have two gimbal mounted cameras, and will therefore have two gimbal components with indices  0 and 1, and two camera components with indices 0 and 1. For Matrice 600, there are printed numbers on the battery  boxes. The Battery component instance with index 0 corresponds to battery compartment number 1. For Inspire 2  and M200 series, Battery with index 0 corresponds to the battery on the port (left hand) side of the aircraft.  For M210, M210 RTK, M300 RTK and M350 RTK, Camera and Gimbal with index 0 corresponds to the camera and gimbal on the port  (left hand) side of the aircraft. Lidar with index 0 corresponds to the lidar(Zenmuse L1) on the port  (left hand) side of the aircraft.
Return:
intAn int value of index.
methodisConnected
method isConnected
boolean isConnected()
Package:dji.sdk.base
Description:
true if the component is connected.
Return:
booleantrue if the component is connected.
methodgetSerialNumber
method getSerialNumber
void getSerialNumber(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Gets the serial number of the component. Depending on the component, this serial number might not match the serial number found  on the physical component. Not supported by Spark.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value returned.
methodgetFirmwareVersion
method getFirmwareVersion
void getFirmwareVersion(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Returns the firmware version of the component. Each component will  have a different firmware version, the combination of which will  form the package firmware version getFirmwarePackageVersion found in BaseProduct. Not supported by Spark.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value(s) returned.
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ voidgetSecondaryVideoOutputFormatForHDMI
  ‚Ä¢ getFirmwareVersion
  ‚Ä¢ customizeButton
  ‚Ä¢ getSecondaryVideoOSDBottomMargin
  ‚Ä¢ getIndex
  ‚Ä¢ voidgetPassword
  ‚Ä¢ setSecondaryVideoDisplay
  ‚Ä¢ voidaddButtonProfileGroup
  ‚Ä¢ requestGimbalControl
  ‚Ä¢ booleanisMultiDevicePairingSupported
  ‚Ä¢ stopPairing
  ‚Ä¢ setSecondaryVideoOSDRightMargin
  ‚Ä¢ voidsetMode
  ‚Ä¢ setFocusControllerStateCallback
  ‚Ä¢ setLeftDialGimbalControlAxis
  ‚Ä¢ voidrespondToRequestForGimbalControl
  ‚Ä¢ voidgetSecondaryVideoOutputFormatForSDI
  ‚Ä¢ intgetIndex
  ‚Ä¢ voidsetHardwareStateCallback
  ‚Ä¢ voidremoveMultiDevicesPairingStateCallback
  ‚Ä¢ voidsetSecondaryVideoOSDRightMargin
  ‚Ä¢ getRecordButtonBindingEnabled
  ‚Ä¢ getGimbalMappingStyle
  ‚Ä¢ requestLegacyGimbalControl
  ‚Ä¢ setSoftSwitchJoyStickMode
  ‚Ä¢ setGimbalControlSpeedCoefficient
  ‚Ä¢ Controller
  ‚Ä¢ getButtonProfileGroups
  ‚Ä¢ getControllingGimbalIndex
  ‚Ä¢ value
  ‚Ä¢ getPhotoAndVideoToggleButtonBindingEnabled
  ‚Ä¢ setSecondaryVideoOutputPort
  ‚Ä¢ voidsetShootPhotoAndRecordButtonBindingEnabled
  ‚Ä¢ booleanisMasterSlaveModeSupported
  ‚Ä¢ setMasterSlaveStateCallback
  ‚Ä¢ voidsetSecondaryVideoOSDTopMargin
  ‚Ä¢ voidremoveButtonProfileGroup
  ‚Ä¢ getSoftSwitchJoyStickMode
  ‚Ä¢ setSecondaryVideoOutputFormatForHDMI
  ‚Ä¢ getCustomButtonTags
  ‚Ä¢ voidgetLeftDialGimbalControlSpeedCoefficient
  ‚Ä¢ direction
  ‚Ä¢ booleanisSecondaryVideoOutputSupported
  ‚Ä¢ voidsetChargeRemainingCallback
  ‚Ä¢ voidstopPairing
  ‚Ä¢ setGimbalControlRequestFromSlaveCallback
  ‚Ä¢ voidrequestLegacyGimbalControl
  ‚Ä¢ selectButtonProfileGroup
  ‚Ä¢ getLeftDialGimbalControlSpeedCoefficient
  ‚Ä¢ voidgetSecondaryVideoOSDBottomMargin
  ‚Ä¢ startPairing
  ‚Ä¢ respondToRequestForGimbalControl
  ‚Ä¢ getPassword
  ‚Ä¢ voidsetAircraftMappingStyle
  ‚Ä¢ setMasterAuthorizationCode
  ‚Ä¢ voidgetSelectedButtonProfile
  ‚Ä¢ setCustomGimbalMapping
  ‚Ä¢ setGPSDataCallback
  ‚Ä¢ voidstartMultiDevicePairing
  ‚Ä¢ voidselectButtonProfileGroup
  ‚Ä¢ setControllingGimbalIndex
  ‚Ä¢ addMultiDevicesPairingStateCallback
  ‚Ä¢ voidsetSecondaryVideoOSDLeftMargin
  ‚Ä¢ camera
  ‚Ä¢ setProRCEventCallback
  ‚Ä¢ fetchCustomizedActionOfButton
  ‚Ä¢ setSecondaryVideoPIPPosition
  ‚Ä¢ getSecondaryVideoOSDUnit
  ‚Ä¢ voidsetProRCEventCallback
  ‚Ä¢ isCustomizableButtonSupported
  ‚Ä¢ setComponentListener
  ‚Ä¢ voidgetCustomAircraftMapping
  ‚Ä¢ voidgetChargeMobileMode
  ‚Ä¢ voidaddRTKChannelEnabledUpdatedCallback
  ‚Ä¢ isFocusControllerSupported
  ‚Ä¢ setShutterButtonBindingEnabled
  ‚Ä¢ getCustomAircraftMapping
  ‚Ä¢ setGimbalMappingStyle
  ‚Ä¢ voidgetConnectedMasterCredentials
  ‚Ä¢ voidgetMode
  ‚Ä¢ master
  ‚Ä¢ Display
  ‚Ä¢ booleanisConnected
  ‚Ä¢ voidresetButtonConfig
  ‚Ä¢ getLiveViewSimultaneousOutputEnabled
  ‚Ä¢ getMasterSearchingState
  ‚Ä¢ setPassword
  ‚Ä¢ dial
  ‚Ä¢ getLeftDialGimbalControlAxis
  ‚Ä¢ getSecondaryVideoOutputEnabled
  ‚Ä¢ setSecondaryVideoOutputFormatForSDI
  ‚Ä¢ voidsetMasterSlaveStateCallback
  ‚Ä¢ getSlaveList
  ‚Ä¢ getMasters
  ‚Ä¢ voidstopMasterSearching
  ‚Ä¢ products
  ‚Ä¢ getPairingState
  ‚Ä¢ setLeftDialGimbalControlSpeedCoefficient
  ‚Ä¢ getButtonConfig
  ‚Ä¢ voidgetRecordButtonBindingEnabled
  ‚Ä¢ voidstartMasterSearching
  ‚Ä¢ voidsetGPSDataCallback
  ‚Ä¢ getSecondaryVideoOSDEnabled
  ‚Ä¢ other
  ‚Ä¢ voidgetSecondaryVideoOutputEnabled
  ‚Ä¢ isMultiDevicePairingSupported
  ‚Ä¢ setRecordButtonBindingEnabled
  ‚Ä¢ voidsetFocusControllerStateCallback
  ‚Ä¢ voidgetMasters
  ‚Ä¢ voidselectButtonProfile
  ‚Ä¢ voidgetLeftDialGimbalControlAxis
  ‚Ä¢ setSecondaryVideoOSDLeftMargin
  ‚Ä¢ voidgetFirmwareVersion
  ‚Ä¢ device
  ‚Ä¢ voidgetSlaveList
  ‚Ä¢ getShootPhotoAndRecordButtonBindingEnabled
  ‚Ä¢ ports
  ‚Ä¢ position
  ‚Ä¢ getSecondaryVideoOSDTopMargin
  ‚Ä¢ voidgetSecondaryVideoPIPPosition
  ‚Ä¢ voidsetCustomGimbalMapping
  ‚Ä¢ control
  ‚Ä¢ voidsetRTKChannelEnabled
  ‚Ä¢ isMasterSlaveModeSupported
  ‚Ä¢ voidgetAircraftMappingStyle
  ‚Ä¢ booleanisFocusControllerSupported
  ‚Ä¢ setRTKChannelEnabled
  ‚Ä¢ removeButtonProfileGroup
  ‚Ä¢ setSecondaryVideoOSDBottomMargin
  ‚Ä¢ voidgetSecondaryVideoOutputPort
  ‚Ä¢ buttons
  ‚Ä¢ voidremoveRTKChannelEnabledUpdatedCallback
  ‚Ä¢ voidgetCustomButtonTags
  ‚Ä¢ setButtonConfig
  ‚Ä¢ voidsetSecondaryVideoOSDBottomMargin
  ‚Ä¢ setSecondaryVideoOSDEnabled
  ‚Ä¢ getSecondaryVideoOutputPort
  ‚Ä¢ voidsetCustomAircraftMapping
  ‚Ä¢ booleanisCustomizableButtonSupported
  ‚Ä¢ voidsetPhotoAndVideoToggleButtonBindingEnabled
  ‚Ä¢ wheel
  ‚Ä¢ voidsetSecondaryVideoOutputFormatForHDMI
  ‚Ä¢ voidgetSecondaryVideoDisplay
  ‚Ä¢ voidgetSecondaryVideoOSDEnabled
  ‚Ä¢ setAircraftMappingStyle
  ‚Ä¢ getSecondaryVideoOutputFormatForHDMI
  ‚Ä¢ voidsetShutterButtonBindingEnabled
  ‚Ä¢ voidgetLiveViewSimultaneousOutputEnabled
  ‚Ä¢ startMultiDevicePairing
  ‚Ä¢ voidgetSoftSwitchJoyStickMode
  ‚Ä¢ setPhotoAndVideoToggleButtonBindingEnabled
  ‚Ä¢ setShootPhotoAndRecordButtonBindingEnabled
  ‚Ä¢ voidsetControllingGimbalIndex
  ‚Ä¢ setCustomButtonTags
  ‚Ä¢ voidsetRecordButtonBindingEnabled
  ‚Ä¢ removeMultiDevicesPairingStateCallback
  ‚Ä¢ getAvailableMasters
  ‚Ä¢ voidgetName
  ‚Ä¢ voidsetLiveViewSimultaneousOutputEnabled
  ‚Ä¢ isConnected
  ‚Ä¢ voidrequestGimbalControl
  ‚Ä¢ getSelectedButtonProfileGroup
  ‚Ä¢ getCustomGimbalMapping
  ‚Ä¢ units
  ‚Ä¢ voidsetButtonConfig
  ‚Ä¢ voidgetGimbalControlSpeedCoefficient
  ‚Ä¢ voidaddMultiDevicesPairingStateCallback
  ‚Ä¢ voidsetSecondaryVideoOutputEnabled
  ‚Ä¢ getMode
  ‚Ä¢ voidgetSecondaryVideoOSDLeftMargin
  ‚Ä¢ voidfetchCustomizedActionOfButton
  ‚Ä¢ voidgetSerialNumber
  ‚Ä¢ setMode
  ‚Ä¢ setSecondaryVideoOSDUnit
  ‚Ä¢ removeRTKChannelEnabledUpdatedCallback
  ‚Ä¢ voidsetGimbalControlRequestFromSlaveCallback
  ‚Ä¢ setSecondaryVideoOutputEnabled
  ‚Ä¢ voidsetName
  ‚Ä¢ voidsetGimbalMappingStyle
  ‚Ä¢ voidconnectToMaster
  ‚Ä¢ setHardwareStateCallback
  ‚Ä¢ voidsetSecondaryVideoPIPPosition
  ‚Ä¢ getChargeMobileMode
  ‚Ä¢ voidcustomizeButton
  ‚Ä¢ getSecondaryVideoOutputFormatForSDI
  ‚Ä¢ renameButtonProfileGroup
  ‚Ä¢ getSecondaryVideoOSDRightMargin
  ‚Ä¢ voidsetComponentListener
  ‚Ä¢ stopMasterSearching
  ‚Ä¢ connectToMaster
  ‚Ä¢ getName
  ‚Ä¢ PIP
  ‚Ä¢ getGimbalControlSpeedCoefficient
  ‚Ä¢ addRTKChannelEnabledUpdatedCallback
  ‚Ä¢ setCustomAircraftMapping
  ‚Ä¢ state
  ‚Ä¢ voidsetCustomButtonTags
  ‚Ä¢ Gimbal
  ‚Ä¢ getConnectedMasterCredentials
  ‚Ä¢ voidgetCustomGimbalMapping
  ‚Ä¢ voidgetSelectedButtonProfileGroup
  ‚Ä¢ getSecondaryVideoOSDLeftMargin
  ‚Ä¢ setName
  ‚Ä¢ voidgetPairingState
  ‚Ä¢ Dial
  ‚Ä¢ voidgetAvailableMasters
  ‚Ä¢ voidstopMultiDevicePairing
  ‚Ä¢ voidgetSecondaryVideoOSDUnit
  ‚Ä¢ voidsetSecondaryVideoDisplay
  ‚Ä¢ addButtonProfileGroup
  ‚Ä¢ voidsetSoftSwitchJoyStickMode
  ‚Ä¢ voidgetMasterSearchingState
  ‚Ä¢ getShutterButtonBindingEnabled
  ‚Ä¢ port
  ‚Ä¢ normal
  ‚Ä¢ type
  ‚Ä¢ options
  ‚Ä¢ setChargeMobileMode
  ‚Ä¢ isSecondaryVideoOutputSupported
  ‚Ä¢ voidgetGimbalMappingStyle
  ‚Ä¢ voidsetSecondaryVideoOutputFormatForSDI
  ‚Ä¢ voidgetSecondaryVideoOSDTopMargin
  ‚Ä¢ voidsetSecondaryVideoOSDUnit
  ‚Ä¢ voidgetSecondaryVideoOSDRightMargin
  ‚Ä¢ voidgetShootPhotoAndRecordButtonBindingEnabled
  ‚Ä¢ selectButtonProfile
  ‚Ä¢ getSerialNumber
  ‚Ä¢ voidgetControllingGimbalIndex
  ‚Ä¢ Picture
  ‚Ä¢ voidsetChargeMobileMode
  ‚Ä¢ voidsetPassword
  ‚Ä¢ setSecondaryVideoOSDTopMargin
  ‚Ä¢ startMasterSearching
  ‚Ä¢ window
  ‚Ä¢ voidgetButtonConfig
  ‚Ä¢ video
  ‚Ä¢ voidsetSecondaryVideoOSDEnabled
  ‚Ä¢ controller
  ‚Ä¢ voidstartPairing
  ‚Ä¢ getSecondaryVideoDisplay
  ‚Ä¢ voidgetShutterButtonBindingEnabled
  ‚Ä¢ setChargeRemainingCallback
  ‚Ä¢ getAircraftMappingStyle
  ‚Ä¢ resetButtonConfig
  ‚Ä¢ getSelectedButtonProfile
  ‚Ä¢ voidgetPhotoAndVideoToggleButtonBindingEnabled
  ‚Ä¢ stopMultiDevicePairing
  ‚Ä¢ voidsetSecondaryVideoOutputPort
  ‚Ä¢ voidgetButtonProfileGroups
  ‚Ä¢ lidar
  ‚Ä¢ setLiveViewSimultaneousOutputEnabled
  ‚Ä¢ getSecondaryVideoPIPPosition


================================================================================
P√ÅGINA 9: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/Missions/DJIWaypointMission.html
M√©todos encontrados: 36
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class WaypointMission
@EXClassNullAway final class WaypointMission
Package:dji.common.mission.waypoint
Description:
In the waypoint mission, the aircraft will travel between waypoints, execute actions at waypoints, and adjust heading and altitude between waypoints. Waypoints are physical locations to which the aircraft will fly. Creating a series of waypoints, in effect, will program a flight route for the aircraft to follow. Actions can also be added to waypoints, which will be carried out when the aircraft reaches the waypoint. The aircraft travels between waypoints automatically at a base speed. However, the user can change the speed by using the pitch joystick. If the stick is pushed up, the speed will increase. If the stick is pushed down, the speed will slow down. The stick can be pushed down to stop the aircraft and further pushed to start making the aircraft travel back along the path it came. When the aircraft is travelling through waypoints in the reverse order, it will not execute waypoint actions at each waypoint. If the stick is released, the aircraft will again travel through the waypoints in the original order, and continue to execute waypoint actions (even if executed previously). If the aircraft is pulled back along the waypoint mission all the way to the first waypoint, then it will hover in place until the stick is released enough for it to again progress through the mission from start to finish. It is not supported by Mavic Pro when using WiFi connection. It is not supported by Spark, Mavic Mini, DJI Mini 2, DJI Mini SE, Mavic Air 2, DJI Air 2S and Matrice 300 RTK.
Class Members:
Related:
enumWaypointMissionExecuteState
enum WaypointMissionExecuteState
@EXClassNullAway enum WaypointMissionExecuteState
Package:dji.common.mission.waypoint
Description:
Current waypoint mission state.
Enum Members:
INITIALIZINGWaypoint mission is initializing, which means the mission has started and the aircraft is going to the first waypoint.MOVINGAircraft is currently moving toward the mission's next waypoint. This happens when the WaypointMissionFlightPathMode is set to NORMAL.CURVE_MODE_MOVINGAircraft is currently moving. This happens when the WaypointMissionFlightPathMode is set to CURVED.CURVE_MODE_TURNINGAircraft is currently turning. This happens when the WaypointMissionFlightPathMode is set to CURVED.BEGIN_ACTIONAircraft has reached a waypoint, has rotated to the new heading and is now processing actions. This state will be called before the waypoint actions starts executing and will occur for each waypoint action.DOING_ACTIONAircraft is at a waypoint and is executing an action.FINISHED_ACTIONAircraft is at a waypoint and has finished executing the current waypoint action. This state occurs once for each waypoint action.RETURN_TO_FIRST_WAYPOINTAircraft has returned to the first waypoint. This happens when the getFinishedAction is set to RETURN_TO_FIRST_WAYPOINT.PAUSEDThe mission is currently paused by the user.
Class Members:
classWaypointenumWaypointMissionFinishedAction
enum WaypointMissionFinishedAction
@EXClassNullAway enum WaypointMissionFinishedAction
Package:dji.common.mission.waypoint
Description:
Actions taken when the waypoint mission has finished.
Enum Members:
NO_ACTIONNo further action will be taken on completion of mission. At this point, the aircraft can be  controlled by the remote controller.GO_HOMEThe aircraft will go home when the mission is complete. If the aircraft is more than 20m away from  the home point it will go home and land. Otherwise, it will land directly at the current location.AUTO_LANDThe aircraft will land automatically at the last waypoint.GO_FIRST_WAYPOINTThe aircraft will go back to its first waypoint and hover in position.CONTINUE_UNTIL_ENDWhen the aircraft reaches its final waypoint, it will hover without ending the mission. The joystick  can still be used to pull the aircraft back along its previous waypoints. The only way this mission  can end is if stopMission is called.
Class Members:
enumWaypointMissionHeadingMode
enum WaypointMissionHeadingMode
@EXClassNullAway enum WaypointMissionHeadingMode
Package:dji.common.mission.waypoint
Description:
Current waypoint mission heading mode.
Enum Members:
AUTOAircraft's heading will always be in the direction of flight.USING_INITIAL_DIRECTIONAircraft's heading will be set to the heading when reaching the first waypoint. Before reaching the  first waypoint, the aircraft's heading can be controlled by the remote controller. When the aircraft  reaches the first waypoint, its heading will be fixed.CONTROL_BY_REMOTE_CONTROLLERAircraft's heading will be controlled by the remote controller.USING_WAYPOINT_HEADINGAircraft will rotate its heading after the waypoint has been reached. You should use this interface heading to set aircraft heading.TOWARD_POINT_OF_INTERESTAfter the first waypoint has been reached, aircraft heading will always toward to the point of interest.
Class Members:
enumWaypointMissionFlightPathMode
enum WaypointMissionFlightPathMode
@EXClassNullAway enum WaypointMissionFlightPathMode
Package:dji.common.mission.waypoint
Description:
Waypoint mission flight path mode.
Enum Members:
NORMALThe flight path will be normal and the aircraft will move from one waypoint to the next in straight lines.CURVEDThe flight path will be curved and the aircraft will move from one waypoint to the next in a curved motion,  adhering to the cornerRadiusInMeters, which is set in Waypoint.
Class Members:
enumWaypointMissionGotoWaypointMode
enum WaypointMissionGotoWaypointMode
@EXClassNullAway enum WaypointMissionGotoWaypointMode
Package:dji.common.mission.waypoint
Description:
This enum will determine the goto point mode while the drone executes the flight.
Enum Members:
SAFELYGo to the waypoint safely. The aircraft will rise to the same altitude of the waypoint if the current  altitude is lower then the waypoint altitude. It then goes to the waypoint coordinate from the current  altitude, and proceeds to the altitude of the waypoint.POINT_TO_POINTGo to the waypoint from the current aircraft point to the waypoint directly.
Class Members:
CoordinatemethodgetCoordinate
method getCoordinate
LocationCoordinate2D getCoordinate()
Package:dji.common.mission.waypoint
Description:
The aircraft's coordinate when the mission is interrupted.
Return:
LocationCoordinate2DAn object of LocationCoordinate2D.
altitudemethodgetAltitude
method getAltitude
float getAltitude()
Package:dji.common.mission.waypoint
Description:
The aircraft's altitude when the mission is interrupted. This value represents the  absolute height.
Return:
floatA float value of the waypoint altitude.
indexmethodgetIndex
method getIndex
int getIndex()
Package:dji.common.mission.waypoint
Description:
The waypoint index that aircraft latest reached when the mission is interrupted.
Return:
intAn int value of the waypoint index.
methodgetMissionID
method getMissionID
int getMissionID()
Package:dji.common.mission.waypoint
Description:
MissionID of interrupted mission.
Return:
intAn int value of the MissionID.
classWaypointMissionInterruptionMake MissionclassBuildermethodcheckParameters
method checkParameters
@Nullable DJIError checkParameters()
Package:dji.common.mission.waypoint
Description:
Checks if the configuration for the mission is valid before loading it into WaypointMissionOperator.
Return:
DJIErrorError found when checking parameters of the waypoint. null if all the parameters are valid.
Waypoint InformationmethodgetWaypointCount
method getWaypointCount
int getWaypointCount()
Package:dji.common.mission.waypoint
Description:
Number of waypoints in the waypoint mission.
Return:
intWaypoint count.
methodgetMissionID
method getMissionID
int getMissionID()
Package:dji.common.mission.waypoint
Description:
Get the mission id.
Return:
intMission ID.
methodgetWaypointList
method getWaypointList
@Size(max = MAX_WAYPOINT_COUNT, min = MIN_WAYPOINT_COUNT) List<Waypoint> getWaypointList()
Package:dji.common.mission.waypoint
Description:
Returns an list of all waypoints in the mission.
Return:
List<Waypoint>A List of Waypoint instances contained in the mission.
Flight SpeedmethodgetMaxFlightSpeed
method getMaxFlightSpeed
float getMaxFlightSpeed()
Package:dji.common.mission.waypoint
Description:
While the aircraft is travelling between waypoints, you can offset its speed by using the throttle joystick  on the remote controller. getMaxFlightSpeed is this offset when the joystick is pushed  to maximum deflection. For example, If maxFlightSpeed is 10 m/s, then pushing the throttle joystick all the  way up will add 10 m/s to the aircraft speed, while pushing down will subtract 10 m/s from the aircraft  speed. If the remote controller stick is not at maximum deflection, then the offset speed will be  interpolated between [0, getMaxFlightSpeed] with a resolution of 1000 steps. If the  offset speed is negative, then the aircraft will fly backwards to previous waypoints. When it reaches the  first waypoint, it will then hover in place until a positive speed is  applied. getMaxFlightSpeed has a range of [2,15] m/s.
Return:
floatFlight speed in m/s
methodgetAutoFlightSpeed
method getAutoFlightSpeed
float getAutoFlightSpeed()
Package:dji.common.mission.waypoint
Description:
The base automatic speed of the aircraft as it moves between waypoints with range [-15, 15] m/s. The  aircraft's actual speed is a combination of the base automatic speed, and the speed control given by  the throttle joystick on the remote controller. If getAutoFlightSpeed >0: Actual  speed is getAutoFlightSpeed + Joystick Speed (with combined max  of getMaxFlightSpeed) If getAutoFlightSpeed =0: Actual speed is  controlled only by the remote controller joystick. If getAutoFlightSpeed <0 and the  aircraft is at the first waypoint, the aircraft will hover in place until the speed is made positive by  the remote controller joystick.
Return:
floatFlight speed in m/s
Start Mission behaviormethodgetGotoFirstWaypointMode
method getGotoFirstWaypointMode
WaypointMissionGotoWaypointMode getGotoFirstWaypointMode()
Package:dji.common.mission.waypoint
Description:
Defines how the aircraft will go to the first waypoint from its current position. Default  is SAFELY.
Return:
WaypointMissionGotoWaypointModeThe behavior of the aircraft at the begining of the mission
End Mission BehaviormethodgetFinishedAction
method getFinishedAction
WaypointMissionFinishedAction getFinishedAction()
Package:dji.common.mission.waypoint
Description:
Action the aircraft will take when the waypoint mission is complete.
Return:
WaypointMissionFinishedActionThe action to execute when the waypoint mission finishes
Aircraft HeadingmethodgetHeadingMode
method getHeadingMode
WaypointMissionHeadingMode getHeadingMode()
Package:dji.common.mission.waypoint
Description:
Heading of the aircraft as it moves between waypoints. Default  is AUTO.
Return:
WaypointMissionHeadingModeHeading mode.
methodgetPointOfInterest
method getPointOfInterest
LocationCoordinate2D getPointOfInterest()
Package:dji.common.mission.waypoint
Description:
Aircraft heading will be fixed to the point of interest location during the waypoint mission. Used when getHeadingMode  is TOWARD_POINT_OF_INTEREST.
Return:
LocationCoordinate2DPoint of interest location.
Flight PathmethodgetFlightPathMode
method getFlightPathMode
WaypointMissionFlightPathMode getFlightPathMode()
Package:dji.common.mission.waypoint
Description:
The path the aircraft follows between waypoints. The aircraft can either fly directly between waypoints in a straight line, or turn near a waypoint in the curve where the waypoint location defines a part of the curve.
Return:
WaypointMissionFlightPathModeThe flight path mode.
Connection LostmethodisExitMissionOnRCSignalLostEnabled
method isExitMissionOnRCSignalLostEnabled
boolean isExitMissionOnRCSignalLostEnabled()
Package:dji.common.mission.waypoint
Description:
Determines whether the mission should stop when connection between the  aircraft and remote controller is lost. Default is false.
Return:
booleantrue if mission should stop when connection is lost.
GimbalmethodisGimbalPitchRotationEnabled
method isGimbalPitchRotationEnabled
boolean isGimbalPitchRotationEnabled()
Package:dji.common.mission.waypoint
Description:
true if the gimbal pitch rotation can be controlled during the waypoint mission. When true, gimbalPitch in Waypoint is used to control gimbal pitch.
Return:
booleantrue if gimbal pitch can be controlled.
Repeat MissionmethodgetRepeatTimes
method getRepeatTimes
int getRepeatTimes()
Package:dji.common.mission.waypoint
Description:
Gets the repeat times of the mission.
Return:
intNumber of times to repeat mission
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ WaypointMissionFinishedActiongetFinishedAction
  ‚Ä¢ WaypointMissionGotoWaypointModegetGotoFirstWaypointMode
  ‚Ä¢ getFlightPathMode
  ‚Ä¢ getHeadingMode
  ‚Ä¢ getIndex
  ‚Ä¢ getAutoFlightSpeed
  ‚Ä¢ getCoordinate
  ‚Ä¢ getAltitude
  ‚Ä¢ isExitMissionOnRCSignalLostEnabled
  ‚Ä¢ checkParameters
  ‚Ä¢ WaypointMissionFlightPathModegetFlightPathMode
  ‚Ä¢ Speed
  ‚Ä¢ intgetIndex
  ‚Ä¢ LocationCoordinate2DgetCoordinate
  ‚Ä¢ intgetWaypointCount
  ‚Ä¢ Size
  ‚Ä¢ getRepeatTimes
  ‚Ä¢ floatgetAltitude
  ‚Ä¢ getWaypointCount
  ‚Ä¢ getWaypointList
  ‚Ä¢ DJIErrorcheckParameters
  ‚Ä¢ intgetMissionID
  ‚Ä¢ actions
  ‚Ä¢ booleanisExitMissionOnRCSignalLostEnabled
  ‚Ä¢ getPointOfInterest
  ‚Ä¢ floatgetAutoFlightSpeed
  ‚Ä¢ floatgetMaxFlightSpeed
  ‚Ä¢ getMissionID
  ‚Ä¢ getMaxFlightSpeed
  ‚Ä¢ isGimbalPitchRotationEnabled
  ‚Ä¢ getFinishedAction
  ‚Ä¢ WaypointMissionHeadingModegetHeadingMode
  ‚Ä¢ getGotoFirstWaypointMode
  ‚Ä¢ LocationCoordinate2DgetPointOfInterest
  ‚Ä¢ booleanisGimbalPitchRotationEnabled
  ‚Ä¢ intgetRepeatTimes


================================================================================
P√ÅGINA 10: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/AirLink/DJIAirLink.html
M√©todos encontrados: 43
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class AirLink
class AirLink extends BaseComponent
Package:dji.sdk.airlinkInherits From:BaseComponent
Description:
This class contains information about the wireless link between the aircraft and the remote controller, the aircraft and the mobile device or the handheld product and the mobile device. To determine whether a particular wireless link is supported, check the isSupported flag. This object is available from the Aircraft or HandHeld object which is a subclass of BaseProduct.
Class Members:
State UpdatesmethodsetUplinkSignalQualityCallback
method setUplinkSignalQualityCallback
void setUplinkSignalQualityCallback(SignalQualityCallback callback)
Package:dji.sdk.airlink
Description:
Define a callback to listen for updates on the uplink signal. This link transfers all information from the remote controller to the  aircraft, which is predominantly control information. The callback will be updated when the signal quality changed.
Input Parameters:
SignalQualityCallback callbackThe SignalQualityCallback interface.
methodsetDownlinkSignalQualityCallback
method setDownlinkSignalQualityCallback
void setDownlinkSignalQualityCallback(SignalQualityCallback callback)
Package:dji.sdk.airlink
Description:
Define a callback to listen for updates on the downlink signal. This link transfers all information from aircraft to remote controller,  which is predominantly video information. Signal quality is a function of signal strength, interference and data rate. Signal quality  will be more susceptible to weak signal strengths or high interference when the data rate is high.
Input Parameters:
SignalQualityCallback callbackThe SignalQualityCallback interface.
methodsetCountryCodeCallback
method setCountryCodeCallback
void setCountryCodeCallback(CountryCodeCallback countryCodeCallback)
Package:dji.sdk.airlink
Description:
Sets the Callback for CountryCode update.
Input Parameters:
CountryCodeCallback countryCodeCallbackThe CountryCodeCallback interface.
methodaddBaseStationSignalQualityUpdatedCallback
method addBaseStationSignalQualityUpdatedCallback
void addBaseStationSignalQualityUpdatedCallback(BaseStationSignalQualityUpdatedCallback callback)
Package:dji.sdk.airlink
Description:
Adds the Callback for base station signal quality update.
Input Parameters:
BaseStationSignalQualityUpdatedCallback callbackThe BaseStationSignalQualityUpdatedCallback interface.
methodremoveBaseStationSignalQualityUpdatedCallback
method removeBaseStationSignalQualityUpdatedCallback
void removeBaseStationSignalQualityUpdatedCallback(BaseStationSignalQualityUpdatedCallback callback)
Package:dji.sdk.airlink
Description:
Removes the Callback for base station signal quality update.
Input Parameters:
BaseStationSignalQualityUpdatedCallback callbackThe BaseStationSignalQualityUpdatedCallback interface.
LightbridgemethodisLightbridgeLinkSupported
method isLightbridgeLinkSupported
boolean isLightbridgeLinkSupported()
Package:dji.sdk.airlinkSDK Key:AirLinkKey.IS_LIGHTBRIDGE_LINK_SUPPORTED
Description:
true if Lightbridge Air Link is supported.
Return:
booleanA boolean value.
methodgetLightbridgeLink
method getLightbridgeLink
LightbridgeLink getLightbridgeLink()
Package:dji.sdk.airlink
Description:
Returns the Lightbridge Air Link if it is available.
Return:
LightbridgeLinkAn instance of LightbridgeLink.
OcuSyncmethodisOcuSyncLinkSupported
method isOcuSyncLinkSupported
boolean isOcuSyncLinkSupported()
Package:dji.sdk.airlink
Description:
true if the OcuSync Link is supported. OcuSync Link is only supported by Mavic Pro.
Return:
booleanA boolean value.
methodgetOcuSyncLink
method getOcuSyncLink
OcuSyncLink getOcuSyncLink()
Package:dji.sdk.airlink
Description:
Returns the OcuSync Link if it is available.
Return:
OcuSyncLinkAn instance of OcuSyncLink.
WiFimethodisWiFiLinkSupported
method isWiFiLinkSupported
boolean isWiFiLinkSupported()
Package:dji.sdk.airlinkSDK Key:AirLinkKey.IS_WIFI_LINK_SUPPORTED
Description:
true if WiFi Air Link is supported.
Return:
booleanA boolean value.
methodgetWiFiLink
method getWiFiLink
WiFiLink getWiFiLink()
Package:dji.sdk.airlink
Description:
Returns the WiFi Air Link if it is available.
Return:
WiFiLinkAn instance of WiFiLink.
Update Country CodemethodupdateCountryCode
method updateCountryCode
void updateCountryCode(@Nullable CommonCallbacks.CompletionCallback callback)
Package:dji.sdk.airlink
Description:
Update/Sync the latest CountryCode to the DJI Product.
Input Parameters:
@Nullable CommonCallbacks.CompletionCallback callbackThe execution callback with the returned execution result.
methodisUpdateCountryCodeRequired
method isUpdateCountryCodeRequired
boolean isUpdateCountryCodeRequired()
Package:dji.sdk.airlink
Description:
Checks if we need to update country code to the DJI Product.
Return:
booleantrue if the country code is required to update.
Auto Update Country CodemethodsetAutoUpdateCountryCodeEnabled
method setAutoUpdateCountryCodeEnabled
static void setAutoUpdateCountryCodeEnabled(boolean enabled)
Package:dji.sdk.airlink
Description:
Enable/Disable automatic update CountryCode feature.
Input Parameters:
boolean enabledtrue to enable auto update of the country code.
methodgetAutoUpdateCountryCodeEnabled
method getAutoUpdateCountryCodeEnabled
static boolean getAutoUpdateCountryCodeEnabled()
Package:dji.sdk.airlink
Description:
Determines if auto update country code is enabled. When it is enabled, SDK will update the country  code to the aircraft automatically when it is required. It is enabled by default and the value is  stored persistently on the device.
Return:
static booleantrue if auto update country code is enabled.
Related:
classSignalQualityCallbackclassCountryCodeCallbackclassBaseStationSignalQualityUpdatedCallbackclassLightbridgeLinkclassOcuSyncLinkclassWiFiLink
Inherited Methods:
dji.sdk.base.BaseComponentmethodsetComponentListener
method setComponentListener
void setComponentListener(ComponentListener listener)
Package:dji.sdk.base
Description:
Sets the listener for the DJI component.
Input Parameters:
ComponentListener listenerThe callback of ComponentListener.
methodgetIndex
method getIndex
int getIndex()
Package:dji.sdk.base
Description:
Returns the component index. Index is zero based. A component will have an index greater than zero when there  are multiple components of the same type on the DJI product, and one of the components already has the index 0.  For instance, M210 can have two gimbal mounted cameras, and will therefore have two gimbal components with indices  0 and 1, and two camera components with indices 0 and 1. For Matrice 600, there are printed numbers on the battery  boxes. The Battery component instance with index 0 corresponds to battery compartment number 1. For Inspire 2  and M200 series, Battery with index 0 corresponds to the battery on the port (left hand) side of the aircraft.  For M210, M210 RTK, M300 RTK and M350 RTK, Camera and Gimbal with index 0 corresponds to the camera and gimbal on the port  (left hand) side of the aircraft. Lidar with index 0 corresponds to the lidar(Zenmuse L1) on the port  (left hand) side of the aircraft.
Return:
intAn int value of index.
methodisConnected
method isConnected
boolean isConnected()
Package:dji.sdk.base
Description:
true if the component is connected.
Return:
booleantrue if the component is connected.
methodgetSerialNumber
method getSerialNumber
void getSerialNumber(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Gets the serial number of the component. Depending on the component, this serial number might not match the serial number found  on the physical component.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value returned.
methodgetFirmwareVersion
method getFirmwareVersion
void getFirmwareVersion(@NonNull CompletionCallbackWith<String> callback)
Package:dji.sdk.base
Description:
Returns the firmware version of the component. Each component will  have a different firmware version, the combination of which will  form the package firmware version getFirmwarePackageVersion found in BaseProduct.
Input Parameters:
@NonNull CompletionCallbackWith<String> callbackThe execution callback with the value(s) returned.
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ getLightbridgeLink
  ‚Ä¢ isUpdateCountryCodeRequired
  ‚Ä¢ getFirmwareVersion
  ‚Ä¢ setCountryCodeCallback
  ‚Ä¢ setComponentListener
  ‚Ä¢ voidsetDownlinkSignalQualityCallback
  ‚Ä¢ getWiFiLink
  ‚Ä¢ voidaddBaseStationSignalQualityUpdatedCallback
  ‚Ä¢ getIndex
  ‚Ä¢ voidremoveBaseStationSignalQualityUpdatedCallback
  ‚Ä¢ booleanisConnected
  ‚Ä¢ staticvoidsetAutoUpdateCountryCodeEnabled
  ‚Ä¢ setUplinkSignalQualityCallback
  ‚Ä¢ isOcuSyncLinkSupported
  ‚Ä¢ OcuSyncLinkgetOcuSyncLink
  ‚Ä¢ WiFiLinkgetWiFiLink
  ‚Ä¢ staticbooleangetAutoUpdateCountryCodeEnabled
  ‚Ä¢ addBaseStationSignalQualityUpdatedCallback
  ‚Ä¢ port
  ‚Ä¢ intgetIndex
  ‚Ä¢ booleanisOcuSyncLinkSupported
  ‚Ä¢ getOcuSyncLink
  ‚Ä¢ setAutoUpdateCountryCodeEnabled
  ‚Ä¢ isLightbridgeLinkSupported
  ‚Ä¢ isConnected
  ‚Ä¢ booleanisLightbridgeLinkSupported
  ‚Ä¢ voidsetUplinkSignalQualityCallback
  ‚Ä¢ getSerialNumber
  ‚Ä¢ value
  ‚Ä¢ voidgetSerialNumber
  ‚Ä¢ voidupdateCountryCode
  ‚Ä¢ LightbridgeLinkgetLightbridgeLink
  ‚Ä¢ removeBaseStationSignalQualityUpdatedCallback
  ‚Ä¢ getAutoUpdateCountryCodeEnabled
  ‚Ä¢ voidgetFirmwareVersion
  ‚Ä¢ booleanisWiFiLinkSupported
  ‚Ä¢ setDownlinkSignalQualityCallback
  ‚Ä¢ booleanisUpdateCountryCodeRequired
  ‚Ä¢ voidsetCountryCodeCallback
  ‚Ä¢ voidsetComponentListener
  ‚Ä¢ lidar
  ‚Ä¢ updateCountryCode
  ‚Ä¢ isWiFiLinkSupported


================================================================================
P√ÅGINA 11: DJI Mobile SDK Documentation
  
URL: https://developer.dji.com/api-reference/android-api/Components/KeyManager/DJIKeyManager.html
M√©todos encontrados: 16
================================================================================

üìù CONTENIDO COMPLETO:
----------------------------------------
DJI Mobile SDK Documentation
Developer
Mobile SDK
UX SDK
Onboard SDK
Payload SDK
Windows SDK
Login
Register
User Center
Logout
Mobile SDK
OverviewDocumentationAPI Reference
IOS SDK
Android SDK
IOS UX SDK
Android UX SDK
DownloadsSupport
Manager Classes
DJISDKManager
SDKManagerCallback
BluetoothProductConnector
BluetoothDevicesListCallback
BluetoothDevice
DJISDKInitEvent
KeyManager
DJIKey
BatteryKey
CameraKey
FlightControllerKey
RadarKey
PayloadKey
GimbalKey
ProductKey
RemoteControllerKey
HandheldControllerKey
AirLinkKey
AccessoryAggregationKey
LidarKey
BaseStationKey
DiagnosticsKey
GetCallback
SetCallback
ActionCallback
KeyListener
FlyZoneManager
UnlockedZoneGroup
FlyZoneInformation
SubFlyZoneInformation
Callback
BasicDatabaseUpgradeProgressUpdatedCallback
CustomUnlockZone
FlySafeWarningInformation
FlySafeSeriousWarningInformation
FlySafeTipInformation
FlySafeReturnToHomeInformation
FlySafeNotification
Callback
AppActivationManager
AircraftBindingStateListener
AppActivationStateListener
UserAccountManager
UserAccountStateChangeListener
UserAccountInformation
DataProtectionManager
LDMManager
LDMModule
Builder
LDMCallback
UTMISSManager
Callback
UTMISSParam
FlightHubManager
OnlineDevice
BoundDevice
User
Team
UpStream
LiveStream
FlightPathNode
FlightHistoricalDetail
Statistics
HistoricalFlight
RealTimeFlightData
UpdatedUploadStateCallback
Callback
LiveStreamManager
OnLiveErrorStatusListener
LiveVideoResolution
IUASRemoteIDManager
UASRemoteIDStatus
UASRemoteIDStatusListener
UpgradeManager
UpgradeComponent
UpgradeFirmwareListener
FirmwareUpgradeProgress
FirmwareInformation
UpgradeComponentChangeListener
Base Classes
BaseProduct
VideoFeeder
VideoDataListener
VideoActiveStatusListener
VideoFeed
Callback
PhysicalSourceListener
BaseComponent
ComponentListener
Product Classes
Aircraft
HandHeld
Component Classes
FlightController
OnboardSDKDeviceDataCallback
FlightControllerState
Callback
Attitude
LocationCoordinate3D
GoHomeAssessment
GravityCenterState
Compass
RTK
RTKBaseStationInformation
RTKBaseStationListCallback
RTKConnectionStateWithBaseStationReferenceSourceCallback
RTKState
Callback
RTKNetworkServiceProvider
NetworkServiceState
Callback
NetworkServicePlan
NetworkServicePlansState
Builder
NetworkServiceSettings
Builder
ReceiverInfo
LocationStandardDeviation
LandingGear
FlightAssistant
Callback
Callback
Callback
VisionDetectionState
Callback
ObstacleDetectionSector
VisionControlState
Callback
SmartCaptureState
PerceptionInformation
ObstacleAvoidanceSensorState
AccessLocker
FormattingState
Callback
UserAccountInfo
Radar
Simulator
InitializationData
SimulatorState
Callback
IMUState
Callback
MultipleOrientationCalibrationHint
FlightControlData
LocationCoordinate2D
AirSenseSystemInformation
Callback
AirSenseAirplaneState
Callback
LEDsSettings
Builder
Limits
Battery
AggregationState
Callback
BatteryOverview
BatteryState
Callback
WarningRecord
Camera
SuperResolutionInfo
Callback
PinPoint
PinPointInfo
CalibrationCallback
TimeLapsePreviewCallback
HistogramCallback
TapZoomStateCallback
TemperatureDataCallback
SystemState
Callback
FocusState
Callback
StorageState
Callback
SSDState
Callback
MediaManager
VideoPlaybackStateListener
DownloadListener<E>
FileListStateListener
MediaFile
Callback
AudioMediaFile
MediaFileInfo
NewFileInfoCallback
VideoPlaybackState
FetchMediaTaskScheduler
FetchMediaTask
Callback
PlaybackManager
FileDownloadCallback
PlaybackState
CallBack
Capabilities
DJICameraParametersListener
MultispectralShutterSpeedRangeCallback
MultispectralExposureCompensationRangeCallback
SettingsDefinitions
ExposureSettings
Callback
OpticalZoomSpec
HybridZoomSpec
PhotoTimeIntervalSettings
PictureStylePreset
ThermalProfile
ThermalAreaTemperatureAggregations
Callback
ThermalExternalSceneSettings
Callback
WhiteBalance
SSDClipFileName
OriginalPhotoSettings
MultispectralStoragePhotoSettings
StoragePhotoCamerasParamBuilder
MultispectralExposureState
Callback
WatermarkSettings
LaserMeasureInformation
Callback
FocusAssistantSettings
PhotoTimeLapseSettings
ResolutionAndFrameRate
CameraStreamSettings
ColorWaveformSettings
StabilizationState
CameraPeakThreshold
Lens
TapZoomStateCallback
TemperatureDataCallback
ThermalGlobalTemperatureCallback
LensCapabilities
DJILensParametersListener
ThermalGainModeTemperatureRangeCallback
Gimbal
GimbalState
MovementSettings
Attitude
Callback
Callback
BatteryChargeRemainingCallback
Rotation
Builder
MultiGimbalConnectionWorkingStatus
GimbalBalanceDetectionState
Callback
DirectionState
GimbalControlParametersAutoTuningState
Callback
GimbalCoaxialityDetectionState
Callback
AirLink
SignalQualityCallback
CountryCodeCallback
BaseStationSignalQualityUpdatedCallback
LightbridgeLink
ChannelInterference
LightbridgeAntennaRSSI
AntennaRSSICallback
ChannelInterferenceCallback
OcuSyncLink
VideoDataRateCallback
WarningMessagesCallback
ChannelInterferenceCallback
FrequencyInterference
WiFiLink
MagneticInterferenceCallback
ChannelInterferenceCallback
WifiChannelInterference
RemoteController
GimbalMapping
GimbalStickMapping
Callback
MasterSearchingCallback
RTKChannelEnabledUpdatedCallback
HardwareState
HardwareStateCallback
RightDial
TransformationSwitch
Button
FiveDButton
GPSData
Time
GPSLocation
BatteryState
Callback
FocusControllerState
FocusControllerStateCallback
AircraftMapping
AircraftStickMapping
CustomButtonTags
Builder
Information
ControlRequestCallback
MasterSlaveState
Callback
GimbalControlSpeedCoefficient
ResponseForGimbalControl
AuthorizationInfo
Credentials
ProfessionalRC
Event
ButtonConfiguration
ButtonConfigurationBuilder
Callback
MultiDeviceAggregationState
Callback
HandheldController
HardwareState
Callback
LEDCommand
LEDColorPattern
MobileRemoteController
Payload
PayloadWidget
PayloadWidgetListener
PayloadWidgetDownloadListener
HintMessageCallback
CommandDataCallback
VideoDataReceivedCallback
StreamDataCallback
WidgetValueChangedCallback
ActivateInfo
Pipeline
Pipelines
AccessoryAggregation
Spotlight
SpotlightState
Callback
Beacon
Speaker
SpeakerState
Callback
AudioFileInfo
TransmissionListener
AccessoryAggregationState
Callback
BaseStation
BaseStationBatteryState
Callback
BaseStationState
Callback
Lidar
DJIPointCloudStatusListener
DJIPointCloudLiveDataListener
IDJILidarLiveViewDataProcessor
Capabilities
DJILidarParametersListener
PointCloudLiveViewData
PointCloudView
Mission Classes
MissionControl
Triggerable
TimelineElement
Listener
TimelineElementFeedback
MissionControlError
MissionAction
TakeOffAction
AircraftYawAction
AircraftYawActionError
GoToAction
GoToActionError
GoHomeAction
HotpointAction
GimbalAttitudeAction
GimbalAttitudeActionError
RecordVideoAction
RecordVideoActionError
ShootPhotoAction
ShootPhotoActionError
LandAction
TimelineMission
Trigger
Action
Listener
BatteryPowerLevelTrigger
WaypointReachedTrigger
AircraftLandedTrigger
WaypointMissionOperator
WaypointMission
Builder
Waypoint
WaypointAction
WaypointMissionInterruption
WaypointMissionEvent
WaypointMissionUploadEvent
WaypointUploadProgress
WaypointMissionDownloadEvent
WaypointDownloadProgress
WaypointMissionExecutionEvent
WaypointExecutionProgress
WaypointMissionState
WaypointMissionOperatorListener
WaypointV2MissionOperator
WaypointV2Mission
WaypointV2
Builder
Builder
WaypointV2MissionOperatorListener
WaypointV2ActionListener
ActionDownloadEvent
ActionUploadEvent
ActionExecutionEvent
ActionUploadProgress
WaypointV2MissionExecutionEvent
WaypointV2MissionDownloadEvent
WaypointV2MissionUploadEvent
WaypointV2Action
Builder
WaypointActuator
WaypointGimbalActuatorParam
WaypointGimbalPathShooting
WaypointGimbalPathPointInfo
Builder
WaypointGimbalStartPathShootingParam
Builder
WaypointGimbalStopPathShootingParam
Builder
Builder
Builder
WaypointAircraftControlParam
Builder
WaypointAircraftControlStartStopFlyParam
Builder
WaypointAircraftControlRotateYawParam
Builder
WaypointPointCloudRecordActuatorParam
WaypointLidarActuatorParam
Builder
Builder
WaypointCameraActuatorParam
Builder
WaypointCameraZoomParam
Builder
WaypointCameraFocusModeParam
Builder
WaypointCameraFocusParam
WaypointCameraFocusRectangleTargetParam
Builder
WaypointCameraFocusPointTargetParam
Builder
Builder
WaypointCameraCustomNameParam
Builder
Builder
WaypointTrigger
Builder
WaypointIntervalTriggerParam
Builder
WaypointTrajectoryTriggerParam
Builder
WaypointV2AssociateTriggerParam
Builder
WaypointReachPointTriggerParam
Builder
ActionDownloadProgress
ActionExecutionProgress
ActionTypes
WaypointV2UploadProgress
WaypointV2DownloadProgress
WaypointV2ExecutionProgress
FollowMeMissionOperator
FollowMeMissionOperatorListener
FollowMeMission
FollowMeMissionEvent
FollowMeMissionState
PanoramaMissionOperator
PanoramaMissionOperatorListener
PanoramaMissionEvent
PanoramaMissionState
PanoramaMissionExecutionState
HotpointMissionOperator
HotpointMission
HotpointMissionOperatorListener
HotpointMissionEvent
HotpointMissionState
IntelligentHotpointMissionOperator
IntelligentHotpointMission
IntelligentHotpointMissionOperatorListener
IntelligentHotpointMissionState
IntelligentHotpointMissionEvent
TapFlyMissionOperator
TapFlyMissionOperatorListener
TapFlyMission
TapFlyExecutionState
Vector
TapFlyMissionEvent
TapFlyMissionState
ActiveTrackOperator
ActiveTrackMission
ActiveTrackTrackingState
SubjectSensingState
ActiveTrackMissionEvent
ActiveTrackState
ActiveTrackMissionOperatorListener
Misc Classes
CommonCallbacks
CompletionCallback<T
CompletionCallbackWith<T>
Y>
WarningStatusItem
VideoSizeCalculatorUtil
VideoSizeListener
LocationUtil
DJIParamCapability
DJIParamMinMaxCapability
DJIError
DJIGimbalError
DataProtectionError
DJIFlightHubError
DJIRTKNetworkServiceError
DJIAccessoryAggregationError
DJIAccessLockerError
DJIPayloadError
DJIUTMISSError
DJILDMError
DJIUpgradeError
DJIWaypointV2Error
PipelineError
DJISDKError
DJISDKCacheError
DJICameraError
DJIFlightControllerError
DJIMissionError
DJIAirLinkError
DJIBatteryError
DJIFlySafeError
DJIRemoteControllerError
DJIDiagnostics
DiagnosticsInformationCallback
DeviceHealthInformation
DJICodecManager
YuvDataCallback
Stick
class KeyManager
class KeyManager
Package:dji.keysdk
Description:
KeyManager provides access to the keyed interface using DJIKey and corresponding subclass objects. KeyManager is accessed from getKeyManager in DJISDKManager.
Class Members:
methodgetValue
method getValue
@Nullable Object getValue(@NonNull DJIKey key)
Package:dji.keysdk
Description:
Returns the latest known value if available for the key.  Does not pull it from the product if unavailable.
Input Parameters:
@NonNull DJIKey keyAn instance of DJIKey.
Return:
@Nullable ObjectThe value associated with the key.
methodgetValue
method getValue
void getValue(@NonNull DJIKey key, @NonNull final GetCallback callback)
Package:dji.keysdk
Description:
Performs a get on a gettable key, pulling the information from the product if necessary.
Input Parameters:
@NonNull DJIKey keyA valid gettable key@NonNull final GetCallback callbackA valid get callback.
methodsetValue
method setValue
void setValue(@NonNull DJIKey key, @NonNull Object value, @Nullable final SetCallback callback)
Package:dji.keysdk
Description:
Performs a set on a settable key, changing attributes on the  connected product.
Input Parameters:
@NonNull Object valueA value object relevant to the given key@NonNull DJIKey keyA valid settable key@Nullable final SetCallback callbackA set callback.
methodperformAction
method performAction
void performAction(@NonNull DJIKey key, @Nullable final ActionCallback callback, final Object... arguments)
Package:dji.keysdk
Description:
Performs an action on an actionable key.
Input Parameters:
@NonNull DJIKey keyA valid actionable keyfinal Object... argumentsOptional arguments relevant to the specific key@Nullable final ActionCallback callbackAn action callback.
methodaddListener
method addListener
void addListener(@NonNull DJIKey key, @NonNull final KeyListener listener)
Package:dji.keysdk
Description:
Subscribes the listener object to all changes of value on the given  key.
Input Parameters:
@NonNull DJIKey keyA valid value-based key (get, set and/or action)@NonNull final KeyListener listenerA valid object to hold the subscription
methodremoveListener
method removeListener
void removeListener(@NonNull final KeyListener listener)
Package:dji.keysdk
Description:
Stops the subscription to updates of a specific key value for a  specific listener. Does not affect other listeners subscribing to  this key or other subscriptions of the listener.
Input Parameters:
@NonNull final KeyListener listenerThe listener object passed at the moment of calling startListening.
methodisKeySupported
method isKeySupported
boolean isKeySupported(@NonNull DJIKey key)
Package:dji.keysdk
Description:
Determines if a key is supported by the connected product.
Input Parameters:
@NonNull DJIKey keyKey to be check on current product.
Return:
booleantrue if the key is supported.
methodremoveKey
method removeKey
void removeKey(DJIKey key)
Package:dji.keysdk
Description:
Remove a key's cache value.
Input Parameters:
DJIKey keyKey to be removed on current product.
Related:
classDJIKeyclassGetCallbackclassSetCallbackclassActionCallbackclassKeyListener
√ó
Search Mobile SDK Document
{{searchCount}}¬†Results
{{{(item.highlights && item.highlights.title) || item.title}}}
{{{(item.highlights && item.highlights.content[0]) || item.title}}}
Load More
Loading...
Not Found
SDKMobile SDKUX SDKOnboard SDKPayload SDKWindows SDK
InfoProducts
CommunityStack OverflowYouTubeTwitter
Contact Us dev@dji.com
Business Cooperation dev@dji.com
BILLING billing-dev@dji.com
Copyright ¬© 2022 DJI All Rights ReservedPrivacy PolicyTerms of Use

üîß M√âTODOS ENCONTRADOS:
----------------------------------------
  ‚Ä¢ voidperformAction
  ‚Ä¢ voidsetValue
  ‚Ä¢ addListener
  ‚Ä¢ voidgetValue
  ‚Ä¢ voidaddListener
  ‚Ä¢ removeListener
  ‚Ä¢ voidremoveKey
  ‚Ä¢ key
  ‚Ä¢ removeKey
  ‚Ä¢ ObjectgetValue
  ‚Ä¢ booleanisKeySupported
  ‚Ä¢ voidremoveListener
  ‚Ä¢ setValue
  ‚Ä¢ performAction
  ‚Ä¢ isKeySupported
  ‚Ä¢ getValue

