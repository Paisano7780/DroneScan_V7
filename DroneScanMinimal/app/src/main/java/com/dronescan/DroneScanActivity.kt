package com.dronescan

import android.Manifest
import android.content.*
import android.content.pm.PackageManager
import android.hardware.usb.UsbManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.provider.Settings
import android.util.Log
import android.widget.TextView
import android.widget.LinearLayout
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.dronescan.barcode.BarcodeProcessor
import com.dronescan.csv.CsvExporter
import com.dronescan.debug.DebugLogger
import com.dronescan.usb.UsbDroneManager
import java.io.File

class DroneScanActivity : AppCompatActivity() {
    private val REQUEST_ALL_PERMISSIONS = 1003
    private val REQUEST_MANAGE_ALL_FILES = 1002
    
    private var titleTextView: TextView? = null
    private var statusTextView: TextView? = null
    private var resultTextView: TextView? = null
    private var scanButton: Button? = null
    private var exportButton: Button? = null
    private var connectButton: Button? = null
    private var debugLogsButton: Button? = null
    
    private lateinit var usbDroneManager: UsbDroneManager
    private lateinit var barcodeProcessor: BarcodeProcessor
    private lateinit var csvExporter: CsvExporter
    
    private var isUsbConnected = false

    private val usbReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            when (intent.action) {
                UsbManager.ACTION_USB_DEVICE_ATTACHED -> {
                    updateStatus("Dispositivo USB conectado. Verificando...")
                    checkUsbConnection()
                }
                UsbManager.ACTION_USB_DEVICE_DETACHED -> {
                    updateStatus("Dispositivo USB desconectado.")
                    isUsbConnected = false
                    updateConnectionStatus()
                }
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        setupUI()
        initializeComponents()
        setupButtons()
        requestAllPermissions()
        registerUsbReceiver()
        checkUsbConnection()
        
        Log.d("DroneScan", "DroneScan Pro USB iniciado correctamente")
    }

    private fun setupUI() {
        val layout = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(32, 32, 32, 32)
        }
        
        titleTextView = TextView(this).apply {
            text = "DroneScan Pro - Esc√°ner DJI"
            textSize = 20f
            setPadding(0, 0, 0, 24)
            setTextColor(resources.getColor(android.R.color.black))
        }
        
        statusTextView = TextView(this).apply {
            text = "Estado: Inicializando..."
            textSize = 16f
            setPadding(0, 0, 0, 16)
            setTextColor(resources.getColor(android.R.color.darker_gray))
        }
        
        resultTextView = TextView(this).apply {
            text = "DroneScan Pro - Acceso USB Nativo\\n\\nüîå Caracter√≠sticas:\\n‚Ä¢ Acceso directo v√≠a USB Host\\n‚Ä¢ Sin dependencias SDK complejas\\n‚Ä¢ Detecci√≥n autom√°tica de dispositivos\\n‚Ä¢ Compatible con DJI RC y otros drones\\n‚Ä¢ Procesamiento inteligente de im√°genes\\n\\nConecta tu drone o control remoto v√≠a USB para comenzar."
            textSize = 14f
            setPadding(0, 0, 0, 24)
            setTextColor(resources.getColor(android.R.color.black))
        }
        
        connectButton = Button(this).apply {
            text = "üîç Verificar Conexi√≥n USB"
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            ).apply { setMargins(0, 0, 0, 12) }
        }
        
        val buttonLayout = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            )
        }
        
        scanButton = Button(this).apply {
            text = "üì∏ Escanear Fotos"
            layoutParams = LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                1f
            ).apply { setMargins(0, 0, 4, 0) }
        }
        
        exportButton = Button(this).apply {
            text = "üìÅ Ver Exportaciones"
            layoutParams = LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                1f
            ).apply { setMargins(4, 0, 4, 0) }
        }
        
        debugLogsButton = Button(this).apply {
            text = "üîç Logs"
            layoutParams = LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                1f
            ).apply { setMargins(4, 0, 0, 0) }
        }
        
        buttonLayout.addView(scanButton)
        buttonLayout.addView(exportButton)
        buttonLayout.addView(debugLogsButton)
        
        layout.addView(titleTextView)
        layout.addView(statusTextView)
        layout.addView(resultTextView)
        layout.addView(connectButton)
        layout.addView(buttonLayout)
        
        setContentView(layout)
    }
    
    private fun initializeComponents() {
        usbDroneManager = UsbDroneManager(this)
        barcodeProcessor = BarcodeProcessor(this)
        csvExporter = CsvExporter(this)
        
        // Inicializar el USB manager
        usbDroneManager.initialize()
    }
    
    private fun setupButtons() {
        connectButton?.setOnClickListener {
            DebugLogger.d("DroneScan", "üîç Usuario toc√≥ bot√≥n verificar conexi√≥n")
            usbDroneManager.forceCheckDevices()
            checkUsbConnection()
        }
        
        scanButton?.setOnClickListener {
            if (isUsbConnected) {
                updateStatus("Iniciando escaneo USB...")
                scanUsbPhotos()
            } else {
                updateStatus("Iniciando escaneo manual...")
                scanDronePhotos()
            }
        }
        
        exportButton?.setOnClickListener {
            openExportFolder()
        }
        
        debugLogsButton?.setOnClickListener {
            showDebugLogs()
        }
    }
    
    private fun updateStatus(message: String) {
        statusTextView?.text = "Estado: $message"
        DebugLogger.d("DroneScan", message)
    }
    
    private fun updateResult(message: String) {
        resultTextView?.text = message
        DebugLogger.d("DroneScan", message)
    }
    
    private fun updateConnectionStatus() {
        val status = if (isUsbConnected) "‚úÖ USB Conectado" else "‚ùå USB Desconectado"
        connectButton?.text = "üîç Verificar Conexi√≥n USB - $status"
        
        scanButton?.text = if (isUsbConnected) "üì∏ Escanear USB" else "üì∏ Escanear Manual"
    }

    private fun checkUsbConnection() {
        try {
            updateStatus("Verificando dispositivos USB...")
            
            isUsbConnected = usbDroneManager.hasConnectedDrone()
            val deviceName = usbDroneManager.getConnectedDeviceName()
            
            if (isUsbConnected && deviceName != null) {
                updateStatus("‚úÖ Dispositivo USB conectado")
                updateResult("üéâ ¬°Dispositivo USB detectado!\\n\\nüì± Dispositivo: $deviceName\\nüîó Conexi√≥n: Establecida\\nüì° Acceso: Directo v√≠a USB Host\\n\\nüöÄ Listo para escanear fotos directamente del dispositivo.\\n\\nUsa 'üì∏ Escanear USB' para acceso directo a las fotos.")
            } else {
                updateStatus("‚ö†Ô∏è No hay dispositivos USB conectados")
                updateResult("‚ö†Ô∏è No se detectaron dispositivos USB compatibles\\n\\nüîå Para conectar tu drone o control remoto:\\n1. Conecta el cable USB al m√≥vil\\n2. Acepta permisos USB cuando aparezcan\\n3. Presiona 'Verificar Conexi√≥n USB'\\n\\nüì± Mientras tanto, puedes usar el modo manual para escanear fotos locales.")
            }
            
            updateConnectionStatus()
            
        } catch (e: Exception) {
            updateStatus("‚ùå Error verificando USB")
            updateResult("‚ùå Error verificando conexi√≥n USB: ${e.message}\\n\\nüîÑ Soluciones:\\n1. Reconectar el dispositivo USB\\n2. Verificar que el cable funcione\\n3. Reiniciar la aplicaci√≥n\\n4. Usar modo manual si el problema persiste")
            Log.e("DroneScan", "Error verificando USB", e)
            isUsbConnected = false
            updateConnectionStatus()
        }
    }
    
    private fun scanUsbPhotos() {
        try {
            updateStatus("üîÑ Accediendo a fotos v√≠a USB...")
            
            val photos = usbDroneManager.scanForPhotos()
            
            if (photos.isNotEmpty()) {
                updateStatus("üìÅ Encontradas ${photos.size} fotos")
                updateResult("üîç Analizando fotos del dispositivo USB...\\n\\nüìä Total de fotos: ${photos.size}\\nüéØ Preparando procesamiento...\\n‚è≥ Iniciando escaneo de c√≥digos...")
                processPhotos(photos)
            } else {
                updateStatus("üì≠ No hay fotos en el dispositivo")
                updateResult("üì≠ No se encontraron fotos en el dispositivo USB\\n\\nüîç Verifica que:\\n‚Ä¢ El dispositivo tenga fotos\\n‚Ä¢ Las fotos est√©n en formato compatible (JPG, PNG, DNG)\\n‚Ä¢ El dispositivo est√© correctamente conectado\\n\\nüí° Puedes probar con 'Escanear Manual' para usar fotos locales")
            }
        } catch (e: Exception) {
            updateStatus("‚ùå Error accediendo a USB")
            updateResult("‚ùå No se pudo acceder a las fotos USB\\n\\nüîç Error: ${e.message}\\n\\nüîß Soluciones:\\n‚Ä¢ Verificar conexi√≥n USB\\n‚Ä¢ Verificar permisos de la app\\n‚Ä¢ Reconectar el dispositivo\\n‚Ä¢ Usar 'Escanear Manual' como alternativa")
            Log.e("DroneScan", "Error obteniendo fotos USB: ${e.message}", e)
        }
    }

    private fun requestAllPermissions() {
        val permissions = mutableListOf<String>()
        
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            permissions.add(Manifest.permission.READ_EXTERNAL_STORAGE)
        }
        
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)
        }
        
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            permissions.add(Manifest.permission.CAMERA)
        }
        
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
                permissions.add(Manifest.permission.BLUETOOTH_CONNECT)
            }
        }

        if (permissions.isNotEmpty()) {
            updateStatus("üîê Solicitando permisos...")
            AlertDialog.Builder(this)
                .setTitle("üîê Permisos Requeridos")
                .setMessage("DroneScan Pro necesita permisos para:\\n\\nüìÅ Almacenamiento: Leer fotos y guardar resultados\\nüì∑ C√°mara: Escaneo de c√≥digos QR/barras\\nüîó Conexi√≥n: Comunicaci√≥n con drone DJI\\n\\n‚úÖ Todos los permisos son necesarios para el funcionamiento completo")
                .setPositiveButton("‚úÖ Conceder") { _, _ ->
                    ActivityCompat.requestPermissions(this, permissions.toTypedArray(), REQUEST_ALL_PERMISSIONS)
                }
                .setNegativeButton("‚ùå Cancelar") { _, _ ->
                    updateResult("‚ùå Permisos denegados\\n\\nLa aplicaci√≥n necesita permisos para funcionar correctamente.\\n\\nüîß Ve a: Configuraci√≥n ‚Üí Aplicaciones ‚Üí DroneScan ‚Üí Permisos")
                }
                .show()
        } else {
            checkManageAllFilesPermission()
        }
    }

    private fun checkManageAllFilesPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            if (!Environment.isExternalStorageManager()) {
                updateStatus("üìÅ Configurando acceso total a archivos...")
                try {
                    val intent = Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION).apply {
                        data = Uri.parse("package:$packageName")
                    }
                    startActivityForResult(intent, REQUEST_MANAGE_ALL_FILES)
                } catch (e: Exception) {
                    updateStatus("‚ùå Error configurando permisos")
                    Toast.makeText(this, "Configura permisos manualmente en Configuraci√≥n", Toast.LENGTH_LONG).show()
                }
            } else {
                permissionsGranted()
            }
        } else {
            permissionsGranted()
        }
    }
    
    private fun permissionsGranted() {
        updateStatus("‚úÖ Todos los permisos concedidos")
        updateResult("üéâ ¬°Configuraci√≥n completada!\\n\\n‚úÖ Todos los permisos est√°n configurados\\nüîß DroneScan Pro est√° listo para usar\\n\\nüöÄ Pr√≥ximos pasos:\\n1. Conecta tu drone DJI Mini 3 v√≠a USB\\n2. Usa 'üîç Verificar Conexi√≥n DJI'\\n3. Inicia el escaneo con 'üì∏ Escanear Fotos'\\n\\nüí° Tambi√©n puedes usar el modo manual sin drone")
    }

    private fun registerUsbReceiver() {
        val filter = IntentFilter().apply {
            addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED)
            addAction(UsbManager.ACTION_USB_DEVICE_DETACHED)
        }
        registerReceiver(usbReceiver, filter)
        Log.d("DroneScan", "USB receiver registrado")
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            unregisterReceiver(usbReceiver)
            usbDroneManager.cleanup()
        } catch (e: Exception) {
            Log.e("DroneScan", "Error en cleanup: ${e.message}")
        }
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        when (requestCode) {
            REQUEST_ALL_PERMISSIONS -> {
                if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                    updateStatus("‚úÖ Permisos b√°sicos concedidos")
                    checkManageAllFilesPermission()
                } else {
                    updateStatus("‚ö†Ô∏è Algunos permisos denegados")
                    updateResult("‚ö†Ô∏è Algunos permisos fueron denegados\\n\\nüîß Para funcionalidad completa:\\n1. Ve a Configuraci√≥n ‚Üí Aplicaciones ‚Üí DroneScan\\n2. Habilita todos los permisos\\n3. Reinicia la aplicaci√≥n\\n\\nüí° La app puede funcionar con limitaciones")
                }
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQUEST_MANAGE_ALL_FILES) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R && Environment.isExternalStorageManager()) {
                permissionsGranted()
            } else {
                updateStatus("‚ö†Ô∏è Permiso de archivos pendiente")
                updateResult("‚ö†Ô∏è Permiso de gesti√≥n de archivos no concedido\\n\\nüîß Para funcionalidad completa:\\n1. Ve a Configuraci√≥n ‚Üí Aplicaciones ‚Üí DroneScan\\n2. Activa 'Permitir gesti√≥n de todos los archivos'\\n3. Vuelve a la aplicaci√≥n")
            }
        }
    }

    private fun scanDronePhotos() {
        try {
            // Limpiar el resultado anterior
            updateResult("")
            
            updateStatus("ÔøΩ Iniciando escaneo...")
            
            if (usbDroneManager.hasConnectedDrone()) {
                updateResult("üîó Dispositivo USB detectado\\n\\nüì± Accediendo directamente v√≠a USB...")
                scanUsbPhotos()
            } else {
                updateStatus("üìÇ Buscando dispositivos...")
                updateResult("üîç Buscando dispositivos USB compatibles...")
                
                // Verificar si hay dispositivos USB disponibles
                val availableDevices = usbDroneManager.getAvailableDevices()
                
                if (availableDevices.isNotEmpty()) {
                    updateResult("ÔøΩ Dispositivos encontrados: ${availableDevices.size}\\n\\nüîÑ Intentando conexi√≥n autom√°tica...")
                    scanUsbPhotos()
                } else {
                    updateStatus("ÔøΩ No hay dispositivos USB")
                    updateResult("ÔøΩ No se detectaron dispositivos USB\\n\\nÔøΩ Verifica que:\\n‚Ä¢ El dispositivo est√© conectado por USB\\n‚Ä¢ Los permisos USB est√©n habilitados\\n‚Ä¢ El modo de transferencia de archivos est√© activo\\n\\nüí° Tambi√©n puedes usar 'Escanear Manual' para fotos locales")
                }
            }
            
        } catch (e: Exception) {
            updateStatus("‚ùå Error en escaneo")
            updateResult("‚ùå Error durante el escaneo: ${e.message}\\n\\nÔøΩ Puedes intentar:\\n‚Ä¢ Reconectar el dispositivo USB\\n‚Ä¢ Usar 'Escanear Manual'\\n‚Ä¢ Verificar permisos de la app")
            Log.e("DroneScan", "Error en scanDronePhotos", e)
        }
    }

    private fun processPhotos(photos: List<UsbDroneManager.DronePhoto>) {
        val allBarcodes = mutableListOf<String>()
        var processedCount = 0

        updateStatus("üîç Analizando c√≥digos en ${photos.size} fotos...")

        for (photo in photos) {
            try {
                val barcodes = barcodeProcessor.processImage(photo.file.absolutePath)
                allBarcodes.addAll(barcodes)
                processedCount++
                
                updateStatus("üìä Procesadas $processedCount/${photos.size} ‚Ä¢ C√≥digos: ${allBarcodes.size}")
                
                if (processedCount % 5 == 0 || processedCount == photos.size) {
                    updateResult("üîÑ Progreso del escaneo:\\n\\nüìä Fotos procesadas: $processedCount/${photos.size}\\nüéØ C√≥digos encontrados: ${allBarcodes.size}\\nüìÑ √öltimo archivo: ${photo.name}\\n\\n‚è≥ ${if (processedCount < photos.size) "Procesando..." else "Finalizando..."}")
                }
            } catch (e: Exception) {
                Log.e("DroneScan", "Error procesando ${photo.name}: ${e.message}")
            }
        }

        updateStatus("‚úÖ Procesamiento completado")

        if (allBarcodes.isNotEmpty()) {
            exportToCSV(allBarcodes, photos)
        } else {
            updateResult("‚úÖ An√°lisis completado\\n\\nüìä Resultados:\\n‚Ä¢ ${photos.size} fotos analizadas\\n‚Ä¢ 0 c√≥digos QR/barras encontrados\\n\\nüí° Posibles causas:\\n‚Ä¢ Fotos sin c√≥digos visibles\\n‚Ä¢ C√≥digos muy peque√±os o borrosos\\n‚Ä¢ √Ångulos no legibles\\n‚Ä¢ Iluminaci√≥n insuficiente\\n\\nüîç Revisa que las fotos contengan c√≥digos claros y legibles")
        }
    }

    private fun exportToCSV(barcodes: List<String>, photos: List<UsbDroneManager.DronePhoto>) {
        try {
            updateStatus("üíæ Exportando a CSV...")
            
            val csvFile = csvExporter.exportBarcodes(barcodes, photos.map { it.file })
            
            updateStatus("üéâ Exportaci√≥n completada")
            updateResult("üéâ ¬°Exportaci√≥n exitosa!\\n\\nüìÑ Archivo: ${csvFile.name}\\nüìÅ Ubicaci√≥n: Documents/DroneScan/\\n\\nüìä Estad√≠sticas detalladas:\\n‚Ä¢ üéØ C√≥digos totales: ${barcodes.size}\\n‚Ä¢ üì∏ Fotos procesadas: ${photos.size}\\n‚Ä¢ üî¢ C√≥digos √∫nicos: ${barcodes.distinct().size}\\n‚Ä¢ üìã Duplicados: ${barcodes.size - barcodes.distinct().size}\\n\\nüíæ Encuentra tu archivo CSV en la carpeta de exportaciones")
            
            Toast.makeText(this, "üéâ CSV exportado: ${barcodes.size} c√≥digos", Toast.LENGTH_LONG).show()
            
        } catch (e: Exception) {
            updateStatus("‚ùå Error en exportaci√≥n")
            updateResult("‚ùå Error exportando CSV: ${e.message}\\n\\nüîß Verifica:\\n‚Ä¢ Permisos de escritura\\n‚Ä¢ Espacio disponible\\n‚Ä¢ Acceso a Documents/\\n\\nüîÑ Intenta reiniciar si persiste el problema")
            Log.e("DroneScan", "Error exportando CSV", e)
        }
    }
    
    private fun openExportFolder() {
        try {
            val intent = Intent(Intent.ACTION_VIEW).apply {
                data = Uri.parse("content://com.android.externalstorage.documents/document/primary%3ADocuments%2FDroneScan")
                addCategory(Intent.CATEGORY_DEFAULT)
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }
            
            if (intent.resolveActivity(packageManager) != null) {
                startActivity(intent)
            } else {
                val fallbackIntent = Intent(Intent.ACTION_VIEW).apply {
                    data = Uri.parse("content://com.android.externalstorage.documents/document/primary%3ADocuments")
                    type = "*/*"
                }
                if (fallbackIntent.resolveActivity(packageManager) != null) {
                    startActivity(fallbackIntent)
                } else {
                    Toast.makeText(this, "üìÅ Busca: Documents/DroneScan en tu explorador de archivos", Toast.LENGTH_LONG).show()
                }
            }
        } catch (e: Exception) {
            Toast.makeText(this, "üìÅ Ve a: Documents/DroneScan", Toast.LENGTH_LONG).show()
        }
    }
    
    private fun showDebugLogs() {
        val errorLogs = DebugLogger.getErrorLogs()
        val allLogs = DebugLogger.getAllLogs()
        
        AlertDialog.Builder(this)
            .setTitle("üîç Debug Logs - DroneScan v2.4")
            .setMessage("Selecciona qu√© logs quieres ver:")
            .setPositiveButton("‚ùå Solo Errores") { _, _ ->
                showLogsDialog(errorLogs, "Logs de Errores")
            }
            .setNeutralButton("üìã Todos los Logs") { _, _ ->
                showLogsDialog(allLogs, "Todos los Logs")
            }
            .setNegativeButton("üóëÔ∏è Limpiar") { _, _ ->
                DebugLogger.clearLogs()
                Toast.makeText(this, "Logs limpiados", Toast.LENGTH_SHORT).show()
            }
            .show()
    }
    
    private fun showLogsDialog(logs: String, title: String) {
        AlertDialog.Builder(this)
            .setTitle(title)
            .setMessage(logs)
            .setPositiveButton("üìã Copiar") { _, _ ->
                if (DebugLogger.copyLogsToClipboard(this, title.contains("Errores"))) {
                    Toast.makeText(this, "Logs copiados al portapapeles", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this, "Error al copiar logs", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("Cerrar", null)
            .show()
    }
    
    /**
     * onNewIntent - CR√çTICO como Bridge App
     * ACTION_USB_ACCESSORY_ATTACHED es un Activity Broadcast.
     * Debe estar aqu√≠, no en USBConnectionManager
     * Basado en BridgeActivity.java l√≠nea 161-184
     */
    override fun onNewIntent(intent: Intent?) {
        super.onNewIntent(intent)
        
        if (intent?.action != null) {
            DebugLogger.d("DroneScanActivity", "üì± onNewIntent: ${intent.action}")
            
            when (intent.action) {
                UsbManager.ACTION_USB_ACCESSORY_ATTACHED -> {
                    DebugLogger.d("DroneScanActivity", "üîó USB_ACCESSORY_ATTACHED detectado en onNewIntent")
                    
                    // Forzar verificaci√≥n inmediata como Bridge App
                    usbDroneManager.forceCheckDevices()
                    
                    // Mostrar notificaci√≥n al usuario
                    Toast.makeText(this, "üîó Accesorio USB conectado", Toast.LENGTH_SHORT).show()
                    updateStatus("üì± Verificando accesorio conectado...")
                }
                else -> {
                    DebugLogger.d("DroneScanActivity", "üì± Acci√≥n no manejada en onNewIntent: ${intent.action}")
                }
            }
        }
    }
}
